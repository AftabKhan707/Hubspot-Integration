/**
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface AddDocumentsRequest
 */
export interface AddDocumentsRequest {
    /**
     * Array of documents to be added to the collection.
     * @type {Array<any>}
     * @memberof AddDocumentsRequest
     */
    data: Array<any>;
}
/**
 *
 * @export
 * @interface AddDocumentsResponse
 */
export interface AddDocumentsResponse {
    /**
     * information about the added documents
     * @type {Array<DocumentStatus>}
     * @memberof AddDocumentsResponse
     */
    data?: Array<DocumentStatus>;
    /**
     * A string representing the collection offset after completing the write
     * @type {string}
     * @memberof AddDocumentsResponse
     */
    last_offset?: string;
}
/**
 *
 * @export
 * @interface Alias
 */
export interface Alias {
    /**
     * name of the alias
     * @type {string}
     * @memberof Alias
     */
    name?: string;
    /**
     * alias description
     * @type {string}
     * @memberof Alias
     */
    description?: string;
    /**
     * name of the workspace
     * @type {string}
     * @memberof Alias
     */
    workspace?: string;
    /**
     * email of the creator
     * @type {string}
     * @memberof Alias
     */
    creator_email?: string;
    /**
     * list of fully qualified collection names referenced by alias
     * @type {Array<string>}
     * @memberof Alias
     */
    collections?: Array<string>;
    /**
     * state of the alias
     * @type {string}
     * @memberof Alias
     */
    state?: Alias.StateEnum;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof Alias
     */
    created_at?: string;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof Alias
     */
    modified_at?: string;
}
/**
 * @export
 * @namespace Alias
 */
export declare namespace Alias {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        CREATED,
        DELETED
    }
}
/**
 * API keys are used to authenticate requests to Rockset's API. An API key is tied to the user who creates it.
 * @export
 * @interface ApiKey
 */
export interface ApiKey {
    /**
     * Date that API key was created (ISO-8601 format).
     * @type {string}
     * @memberof ApiKey
     */
    created_at?: string;
    /**
     * Name of the API key.
     * @type {string}
     * @memberof ApiKey
     */
    name: string;
    /**
     * API key string of 64 alphanumeric characters.
     * @type {string}
     * @memberof ApiKey
     */
    key: string;
    /**
     * Date that API key was most recently used (ISO-8601 format).
     * @type {string}
     * @memberof ApiKey
     */
    last_access_time?: string;
    /**
     * Role specifying access control. If not specified, API key will have access to all of the associated user's roles.
     * @type {string}
     * @memberof ApiKey
     */
    role?: string;
    /**
     * Email of API key owner.
     * @type {string}
     * @memberof ApiKey
     */
    created_by?: string;
    /**
     * current state of this key
     * @type {string}
     * @memberof ApiKey
     */
    state?: ApiKey.StateEnum;
}
/**
 * @export
 * @namespace ApiKey
 */
export declare namespace ApiKey {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        ACTIVE,
        SUSPENDED
    }
}
/**
 *
 * @export
 * @interface AwsAccessKey
 */
export interface AwsAccessKey {
    /**
     * AWS access key ID
     * @type {string}
     * @memberof AwsAccessKey
     */
    aws_access_key_id: string;
    /**
     * AWS secret access key
     * @type {string}
     * @memberof AwsAccessKey
     */
    aws_secret_access_key: string;
}
/**
 *
 * @export
 * @interface AwsRole
 */
export interface AwsRole {
    /**
     * ARN of rockset-role created in your account
     * @type {string}
     * @memberof AwsRole
     */
    aws_role_arn: string;
}
/**
 *
 * @export
 * @interface BodyPart
 */
export interface BodyPart {
    /**
     *
     * @type {ContentDisposition}
     * @memberof BodyPart
     */
    contentDisposition?: ContentDisposition;
    /**
     *
     * @type {any}
     * @memberof BodyPart
     */
    entity?: any;
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof BodyPart
     */
    headers?: {
        [key: string]: Array<string>;
    };
    /**
     *
     * @type {MediaType}
     * @memberof BodyPart
     */
    mediaType?: MediaType;
    /**
     *
     * @type {MessageBodyWorkers}
     * @memberof BodyPart
     */
    messageBodyWorkers?: MessageBodyWorkers;
    /**
     *
     * @type {MultiPart}
     * @memberof BodyPart
     */
    parent?: MultiPart;
    /**
     *
     * @type {Providers}
     * @memberof BodyPart
     */
    providers?: Providers;
    /**
     *
     * @type {{ [key: string]: Array<ParameterizedHeader>; }}
     * @memberof BodyPart
     */
    parameterizedHeaders?: {
        [key: string]: Array<ParameterizedHeader>;
    };
}
/**
 *
 * @export
 * @interface Cluster
 */
export interface Cluster {
    /**
     * unique identifier for the cluster
     * @type {string}
     * @memberof Cluster
     */
    id?: string;
    /**
     * cluster type
     * @type {string}
     * @memberof Cluster
     */
    cluster_type?: Cluster.ClusterTypeEnum;
    /**
     * aws region
     * @type {string}
     * @memberof Cluster
     */
    aws_region?: string;
    /**
     * domain of org using cluster
     * @type {string}
     * @memberof Cluster
     */
    domain?: string;
    /**
     * top level domain of org using cluster
     * @type {string}
     * @memberof Cluster
     */
    top_level_domain?: string;
    /**
     * api server url for cluster
     * @type {string}
     * @memberof Cluster
     */
    apiserver_url?: string;
}
/**
 * @export
 * @namespace Cluster
 */
export declare namespace Cluster {
    /**
     * @export
     * @enum {string}
     */
    enum ClusterTypeEnum {
        PUBLIC,
        PRIVATE
    }
}
/**
 *
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof Collection
     */
    created_at?: string;
    /**
     * email of user who created the collection
     * @type {string}
     * @memberof Collection
     */
    created_by?: string;
    /**
     * unique identifer for collection, can contain alphanumeric or dash characters
     * @type {string}
     * @memberof Collection
     */
    name?: string;
    /**
     * text describing the collection
     * @type {string}
     * @memberof Collection
     */
    description?: string;
    /**
     * name of the workspace that the collection is in
     * @type {string}
     * @memberof Collection
     */
    workspace?: string;
    /**
     * current status of collection, one of: CREATED, READY, DELETED
     * @type {string}
     * @memberof Collection
     */
    status?: Collection.StatusEnum;
    /**
     * list of sources from which collection ingests
     * @type {Array<Source>}
     * @memberof Collection
     */
    sources?: Array<Source>;
    /**
     * metrics about the collection
     * @type {CollectionStats}
     * @memberof Collection
     */
    stats?: CollectionStats;
    /**
     * number of seconds after which data is purged based on event time
     * @type {number}
     * @memberof Collection
     */
    retention_secs?: number;
    /**
     * list of mappings applied on all documents in a collection
     * @type {Array<FieldMappingV2>}
     * @memberof Collection
     */
    field_mappings?: Array<FieldMappingV2>;
    /**
     * Field mapping for a collection
     * @type {FieldMappingQuery}
     * @memberof Collection
     */
    field_mapping_query?: FieldMappingQuery;
    /**
     * list of partitions for a collection
     * @type {Array<FieldPartition>}
     * @memberof Collection
     */
    field_partitions?: Array<FieldPartition>;
    /**
     * list of clustering fields for a collection
     * @type {Array<FieldPartition>}
     * @memberof Collection
     */
    clustering_key?: Array<FieldPartition>;
    /**
     * list of aliases for a collection
     * @type {Array<Alias>}
     * @memberof Collection
     */
    aliases?: Array<Alias>;
    /**
     * list of field schemas
     * @type {Array<FieldSchema>}
     * @memberof Collection
     */
    field_schemas?: Array<FieldSchema>;
    /**
     * inverted index group encoding options
     * @type {InvertedIndexGroupEncodingOptions}
     * @memberof Collection
     */
    inverted_index_group_encoding_options?: InvertedIndexGroupEncodingOptions;
    /**
     * Whether the collection is insert only or not
     * @type {boolean}
     * @memberof Collection
     */
    insert_only?: boolean;
    /**
     * If true, exactly-once write semantics is enabled.
     * @type {boolean}
     * @memberof Collection
     */
    enable_exactly_once_writes?: boolean;
}
/**
 * @export
 * @namespace Collection
 */
export declare namespace Collection {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        INITIALIZED,
        CREATED,
        READY,
        PAUSED,
        DELETED,
        PAUSING,
        RESUMING,
        PREPARINGBULK,
        BULKINGESTMODE,
        EXITINGBULKINGESTMODE,
        UNKNOWN
    }
}
/**
 *
 * @export
 * @interface CollectionMetric
 */
export interface CollectionMetric {
    /**
     *
     * @type {string}
     * @memberof CollectionMetric
     */
    collection_path?: string;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    doc_count?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    total_index_size?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    total_bytes_ingested?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    ingest_parse_errors?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    ingest_source_total_time_ms?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    ingest_source_measurements?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    leaf_ingest_total_time_ms?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    leaf_ingest_measurements?: number;
    /**
     *
     * @type {boolean}
     * @memberof CollectionMetric
     */
    is_bulk_ingest?: boolean;
    /**
     *
     * @type {number}
     * @memberof CollectionMetric
     */
    time?: number;
}
/**
 *
 * @export
 * @interface CollectionStats
 */
export interface CollectionStats {
    /**
     * number of documents in the collection
     * @type {number}
     * @memberof CollectionStats
     */
    doc_count?: number;
    /**
     * number of documents purged from the collection
     * @type {number}
     * @memberof CollectionStats
     */
    purged_doc_count?: number;
    /**
     * number between 0 and 1 that indicates progress of collection creation
     * @type {number}
     * @memberof CollectionStats
     */
    fill_progress?: number;
    /**
     * milliseconds since Unix epoch Jan 1, 1970
     * @type {number}
     * @memberof CollectionStats
     */
    last_queried_ms?: number;
    /**
     * milliseconds since Unix epoch Jan 1, 1970
     * @type {number}
     * @memberof CollectionStats
     */
    last_updated_ms?: number;
    /**
     * total collection size in bytes
     * @type {number}
     * @memberof CollectionStats
     */
    total_size?: number;
    /**
     * total collection index size in bytes
     * @type {number}
     * @memberof CollectionStats
     */
    total_index_size?: number;
    /**
     * total collection row index size in bytes
     * @type {number}
     * @memberof CollectionStats
     */
    row_index_size?: number;
    /**
     * total collection column index size in bytes
     * @type {number}
     * @memberof CollectionStats
     */
    column_index_size?: number;
    /**
     * total collection inverted index size in bytes
     * @type {number}
     * @memberof CollectionStats
     */
    inverted_index_size?: number;
    /**
     * total collection range index size in bytes
     * @type {number}
     * @memberof CollectionStats
     */
    range_index_size?: number;
    /**
     * total size of bytes purged in bytes
     * @type {number}
     * @memberof CollectionStats
     */
    purged_doc_size?: number;
    /**
     * total number of bytes inserted into the collection
     * @type {number}
     * @memberof CollectionStats
     */
    bytes_inserted?: number;
    /**
     * total number of bytes overwritten in writing into the collection
     * @type {number}
     * @memberof CollectionStats
     */
    bytes_overwritten?: number;
    /**
     * total number of bytes inserted into the collection during bulk
     * @type {number}
     * @memberof CollectionStats
     */
    bulk_bytes_inserted?: number;
    /**
     * total number of bytes overwritten in writing into the collection during bulk
     * @type {number}
     * @memberof CollectionStats
     */
    bulk_bytes_overwritten?: number;
}
/**
 *
 * @export
 * @interface ComputeUsage
 */
export interface ComputeUsage {
    /**
     *
     * @type {number}
     * @memberof ComputeUsage
     */
    minutes: number;
    /**
     *
     * @type {number}
     * @memberof ComputeUsage
     */
    total_compute_cost: number;
}
/**
 *
 * @export
 * @interface ContactSalesRequest
 */
export interface ContactSalesRequest {
    /**
     * email to cc, determined by user
     * @type {string}
     * @memberof ContactSalesRequest
     */
    cc_email?: string;
    /**
     * user phone number
     * @type {string}
     * @memberof ContactSalesRequest
     */
    phone_number?: string;
    /**
     * category user is contacting us about
     * @type {string}
     * @memberof ContactSalesRequest
     */
    category?: string;
    /**
     * message from user
     * @type {string}
     * @memberof ContactSalesRequest
     */
    message?: string;
    /**
     * source of contact sales trigger
     * @type {string}
     * @memberof ContactSalesRequest
     */
    source?: string;
}
/**
 *
 * @export
 * @interface ContactSupportRequest
 */
export interface ContactSupportRequest {
    /**
     * subject of support ticket
     * @type {string}
     * @memberof ContactSupportRequest
     */
    subject?: string;
    /**
     * description of support ticket
     * @type {string}
     * @memberof ContactSupportRequest
     */
    description?: string;
}
/**
 *
 * @export
 * @interface ContentDisposition
 */
export interface ContentDisposition {
    /**
     *
     * @type {string}
     * @memberof ContentDisposition
     */
    type?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ContentDisposition
     */
    parameters?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof ContentDisposition
     */
    fileName?: string;
    /**
     *
     * @type {Date}
     * @memberof ContentDisposition
     */
    creationDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContentDisposition
     */
    modificationDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContentDisposition
     */
    readDate?: Date;
    /**
     *
     * @type {number}
     * @memberof ContentDisposition
     */
    size?: number;
}
/**
 *
 * @export
 * @interface CreateAliasRequest
 */
export interface CreateAliasRequest {
    /**
     * Alias name
     * @type {string}
     * @memberof CreateAliasRequest
     */
    name: string;
    /**
     * optional description
     * @type {string}
     * @memberof CreateAliasRequest
     */
    description?: string;
    /**
     * list of fully qualified collection names referenced by alias
     * @type {Array<string>}
     * @memberof CreateAliasRequest
     */
    collections: Array<string>;
}
/**
 *
 * @export
 * @interface CreateAliasResponse
 */
export interface CreateAliasResponse {
    /**
     * alias that was created
     * @type {Alias}
     * @memberof CreateAliasResponse
     */
    data?: Alias;
}
/**
 *
 * @export
 * @interface CreateApiKeyRequest
 */
export interface CreateApiKeyRequest {
    /**
     * Name for this API key.
     * @type {string}
     * @memberof CreateApiKeyRequest
     */
    name: string;
    /**
     * Role specifying access control. If not specified, API key will have access to all of the associated user's roles.
     * @type {string}
     * @memberof CreateApiKeyRequest
     */
    role?: string;
}
/**
 *
 * @export
 * @interface CreateApiKeyResponse
 */
export interface CreateApiKeyResponse {
    /**
     * The API key that was created.
     * @type {ApiKey}
     * @memberof CreateApiKeyResponse
     */
    data?: ApiKey;
}
/**
 *
 * @export
 * @interface CreateCollectionRequest
 */
export interface CreateCollectionRequest {
    /**
     * unique identifier for collection, can contain alphanumeric or dash characters
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    name: string;
    /**
     * text describing the collection
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    description?: string;
    /**
     * list of sources from which to ingest data
     * @type {Array<Source>}
     * @memberof CreateCollectionRequest
     */
    sources?: Array<Source>;
    /**
     * number of seconds after which data is purged, based on event time
     * @type {number}
     * @memberof CreateCollectionRequest
     */
    retention_secs?: number;
    /**
     * If non-null, the collection will be time partitioned and each partition will be time_partition_resolution_secs wide.
     * @type {number}
     * @memberof CreateCollectionRequest
     */
    time_partition_resolution_secs?: number;
    /**
     * If true disallows updates and deletes, but makes indexing more efficient
     * @type {boolean}
     * @memberof CreateCollectionRequest
     */
    insert_only?: boolean;
    /**
     * If true, exactly-once write semantics is enabled.
     * @type {boolean}
     * @memberof CreateCollectionRequest
     */
    enable_exactly_once_writes?: boolean;
    /**
     * configuration for event data
     * @type {EventTimeInfo}
     * @memberof CreateCollectionRequest
     */
    event_time_info?: EventTimeInfo;
    /**
     * list of mappings
     * @type {Array<FieldMappingV2>}
     * @memberof CreateCollectionRequest
     */
    field_mappings?: Array<FieldMappingV2>;
    /**
     * Mapping of fields for a collection
     * @type {FieldMappingQuery}
     * @memberof CreateCollectionRequest
     */
    field_mapping_query?: FieldMappingQuery;
    /**
     * list of field partitions
     * @type {Array<FieldPartition>}
     * @memberof CreateCollectionRequest
     */
    field_partitions?: Array<FieldPartition>;
    /**
     * list of clustering fields
     * @type {Array<FieldPartition>}
     * @memberof CreateCollectionRequest
     */
    clustering_key?: Array<FieldPartition>;
    /**
     * list of field schemas
     * @type {Array<FieldSchema>}
     * @memberof CreateCollectionRequest
     */
    field_schemas?: Array<FieldSchema>;
    /**
     * inverted index group encoding options
     * @type {InvertedIndexGroupEncodingOptions}
     * @memberof CreateCollectionRequest
     */
    inverted_index_group_encoding_options?: InvertedIndexGroupEncodingOptions;
    /**
     * override value for bulk ingest state
     * @type {boolean}
     * @memberof CreateCollectionRequest
     */
    bulk_load_override?: boolean;
    /**
     * Virtual instance type, chosen at first collection creation
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    instance_type?: CreateCollectionRequest.InstanceTypeEnum;
}
/**
 * @export
 * @namespace CreateCollectionRequest
 */
export declare namespace CreateCollectionRequest {
    /**
     * @export
     * @enum {string}
     */
    enum InstanceTypeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
}
/**
 *
 * @export
 * @interface CreateCollectionResponse
 */
export interface CreateCollectionResponse {
    /**
     * collection that was created
     * @type {Collection}
     * @memberof CreateCollectionResponse
     */
    data?: Collection;
}
/**
 *
 * @export
 * @interface CreateIntegrationRequest
 */
export interface CreateIntegrationRequest {
    /**
     * descriptive label
     * @type {string}
     * @memberof CreateIntegrationRequest
     */
    name: string;
    /**
     * longer explanation for the integration
     * @type {string}
     * @memberof CreateIntegrationRequest
     */
    description?: string;
    /**
     * Amazon S3 details, must have one of aws_access_key or aws_role
     * @type {S3Integration}
     * @memberof CreateIntegrationRequest
     */
    s3?: S3Integration;
    /**
     * Amazon Kinesis details, must have one of aws_access_key or aws_role
     * @type {KinesisIntegration}
     * @memberof CreateIntegrationRequest
     */
    kinesis?: KinesisIntegration;
    /**
     * Amazon DynamoDB details, must have one of aws_access_key or aws_role
     * @type {DynamodbIntegration}
     * @memberof CreateIntegrationRequest
     */
    dynamodb?: DynamodbIntegration;
    /**
     * Amazon Redshift details
     * @type {RedshiftIntegration}
     * @memberof CreateIntegrationRequest
     */
    redshift?: RedshiftIntegration;
    /**
     * GCS details
     * @type {GcsIntegration}
     * @memberof CreateIntegrationRequest
     */
    gcs?: GcsIntegration;
    /**
     *
     * @type {SegmentIntegration}
     * @memberof CreateIntegrationRequest
     */
    segment?: SegmentIntegration;
    /**
     *
     * @type {KafkaIntegration}
     * @memberof CreateIntegrationRequest
     */
    kafka?: KafkaIntegration;
    /**
     * MongoDb details
     * @type {MongoDbIntegration}
     * @memberof CreateIntegrationRequest
     */
    mongodb?: MongoDbIntegration;
}
/**
 *
 * @export
 * @interface CreateIntegrationResponse
 */
export interface CreateIntegrationResponse {
    /**
     * integration object that was created
     * @type {Integration}
     * @memberof CreateIntegrationResponse
     */
    data?: Integration;
}
/**
 *
 * @export
 * @interface CreateIpAllowlistRequest
 */
export interface CreateIpAllowlistRequest {
    /**
     * IP Allowlist policy name
     * @type {string}
     * @memberof CreateIpAllowlistRequest
     */
    name: string;
    /**
     * optional description
     * @type {string}
     * @memberof CreateIpAllowlistRequest
     */
    description?: string;
    /**
     * individual IP address or range of IP addresses in CIDR notation
     * @type {string}
     * @memberof CreateIpAllowlistRequest
     */
    ip_address: string;
}
/**
 *
 * @export
 * @interface CreateIpAllowlistResponse
 */
export interface CreateIpAllowlistResponse {
    /**
     * IP Allowlist network policy entry that was created
     * @type {IpAllowlist}
     * @memberof CreateIpAllowlistResponse
     */
    data?: IpAllowlist;
}
/**
 *
 * @export
 * @interface CreateIssueRequest
 */
export interface CreateIssueRequest {
    /**
     * title
     * @type {string}
     * @memberof CreateIssueRequest
     */
    title?: string;
    /**
     * description
     * @type {string}
     * @memberof CreateIssueRequest
     */
    description?: string;
}
/**
 *
 * @export
 * @interface CreateIssueResponse
 */
export interface CreateIssueResponse {
    /**
     * issue that was created
     * @type {Issue}
     * @memberof CreateIssueResponse
     */
    data?: Issue;
}
/**
 *
 * @export
 * @interface CreateOrganizationRequest
 */
export interface CreateOrganizationRequest {
    /**
     * unique identifier for the organization
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    id?: string;
    /**
     * name of the organization
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    display_name?: string;
    /**
     * name of the creating user
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    first_name?: string;
    /**
     * name of the creating user
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    last_name?: string;
    /**
     * email of the creating user
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    email?: string;
    /**
     * name of the company
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    company_name?: string;
    /**
     * phone number of the user
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    phone_number?: string;
    /**
     * whether plan is a 15 day free trial
     * @type {boolean}
     * @memberof CreateOrganizationRequest
     */
    trial?: boolean;
    /**
     * whether to use KMS for S3 operations
     * @type {boolean}
     * @memberof CreateOrganizationRequest
     */
    use_kms_for_s3?: boolean;
    /**
     * cluster id
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    cluster_id?: string;
    /**
     * cluster name to determine cluster mapping on org creation
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    cluster_name?: string;
    /**
     * encyption key
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    encryption_key?: string;
}
/**
 *
 * @export
 * @interface CreatePreviewSourceRequest
 */
export interface CreatePreviewSourceRequest {
    /**
     * name of integration to use
     * @type {string}
     * @memberof CreatePreviewSourceRequest
     */
    integration_name?: string;
    /**
     * whether type is file upload
     * @type {boolean}
     * @memberof CreatePreviewSourceRequest
     */
    file_upload?: boolean;
    /**
     * configuration to receive data from kafka
     * @type {SourceKafka}
     * @memberof CreatePreviewSourceRequest
     */
    kafka?: SourceKafka;
}
/**
 *
 * @export
 * @interface CreatePreviewSourceResponse
 */
export interface CreatePreviewSourceResponse {
    /**
     * details of the created preview source
     * @type {PreviewSource}
     * @memberof CreatePreviewSourceResponse
     */
    data?: PreviewSource;
}
/**
 *
 * @export
 * @interface CreateQueryLambdaRequest
 */
export interface CreateQueryLambdaRequest {
    /**
     * Query Lambda name
     * @type {string}
     * @memberof CreateQueryLambdaRequest
     */
    name: string;
    /**
     * optional description
     * @type {string}
     * @memberof CreateQueryLambdaRequest
     */
    description?: string;
    /**
     * Query Lambda SQL query
     * @type {QueryLambdaSql}
     * @memberof CreateQueryLambdaRequest
     */
    sql: QueryLambdaSql;
}
/**
 *
 * @export
 * @interface CreateQueryLambdaTagRequest
 */
export interface CreateQueryLambdaTagRequest {
    /**
     * name of Query Lambda tag
     * @type {string}
     * @memberof CreateQueryLambdaTagRequest
     */
    tag_name: string;
    /**
     * hash identifying a Query Lambda tag
     * @type {string}
     * @memberof CreateQueryLambdaTagRequest
     */
    version: string;
}
/**
 *
 * @export
 * @interface CreateRoleRequest
 */
export interface CreateRoleRequest {
    /**
     * Unique identifier for the role.
     * @type {string}
     * @memberof CreateRoleRequest
     */
    role_name?: string;
    /**
     * Description for the role.
     * @type {string}
     * @memberof CreateRoleRequest
     */
    description?: string;
    /**
     * List of privileges that will be associated with the role.
     * @type {Array<Privilege>}
     * @memberof CreateRoleRequest
     */
    privileges?: Array<Privilege>;
}
/**
 *
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * user email, must be unique
     * @type {string}
     * @memberof CreateUserRequest
     */
    email: string;
    /**
     * List of roles for a given user
     * @type {Array<string>}
     * @memberof CreateUserRequest
     */
    roles: Array<string>;
}
/**
 *
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     * user that was created
     * @type {User}
     * @memberof CreateUserResponse
     */
    data?: User;
}
/**
 *
 * @export
 * @interface CreateViewRequest
 */
export interface CreateViewRequest {
    /**
     * View name
     * @type {string}
     * @memberof CreateViewRequest
     */
    name: string;
    /**
     * optional description
     * @type {string}
     * @memberof CreateViewRequest
     */
    description?: string;
    /**
     * SQL for this view
     * @type {string}
     * @memberof CreateViewRequest
     */
    query: string;
}
/**
 *
 * @export
 * @interface CreateViewResponse
 */
export interface CreateViewResponse {
    /**
     * view that was updated
     * @type {View}
     * @memberof CreateViewResponse
     */
    data?: View;
}
/**
 *
 * @export
 * @interface CreateWorkspaceRequest
 */
export interface CreateWorkspaceRequest {
    /**
     * descriptive label and unique identifier
     * @type {string}
     * @memberof CreateWorkspaceRequest
     */
    name: string;
    /**
     * longer explanation for the workspace
     * @type {string}
     * @memberof CreateWorkspaceRequest
     */
    description?: string;
}
/**
 *
 * @export
 * @interface CreateWorkspaceResponse
 */
export interface CreateWorkspaceResponse {
    /**
     * the workspace that was created
     * @type {Workspace}
     * @memberof CreateWorkspaceResponse
     */
    data?: Workspace;
}
/**
 *
 * @export
 * @interface Credit
 */
export interface Credit {
    /**
     *
     * @type {number}
     * @memberof Credit
     */
    credit_id?: number;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    org_id?: string;
    /**
     *
     * @type {number}
     * @memberof Credit
     */
    credit_start?: number;
    /**
     *
     * @type {number}
     * @memberof Credit
     */
    credit_end?: number;
    /**
     *
     * @type {number}
     * @memberof Credit
     */
    value?: number;
    /**
     *
     * @type {number}
     * @memberof Credit
     */
    value_used?: number;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    credit_type?: Credit.CreditTypeEnum;
    /**
     *
     * @type {number}
     * @memberof Credit
     */
    max_monthly_application?: number;
}
/**
 * @export
 * @namespace Credit
 */
export declare namespace Credit {
    /**
     * @export
     * @enum {string}
     */
    enum CreditTypeEnum {
        GENERIC,
        COMPUTE,
        INGEST,
        STORAGE
    }
}
/**
 *
 * @export
 * @interface CsvParams
 */
export interface CsvParams {
    /**
     * If the first line in every object specifies the column names
     * @type {boolean}
     * @memberof CsvParams
     */
    firstLineAsColumnNames?: boolean;
    /**
     * a single character that is the column separator
     * @type {string}
     * @memberof CsvParams
     */
    separator?: string;
    /**
     * can be one of: UTF-8, ISO_8859_1, UTF-16
     * @type {string}
     * @memberof CsvParams
     */
    encoding?: string;
    /**
     * names of columns
     * @type {Array<string>}
     * @memberof CsvParams
     */
    columnNames?: Array<string>;
    /**
     * names of columns
     * @type {Array<string>}
     * @memberof CsvParams
     */
    columnTypes?: Array<CsvParams.ColumnTypesEnum>;
    /**
     * character within which a cell value is enclosed,null character if no such character, default is '\"'
     * @type {string}
     * @memberof CsvParams
     */
    quoteChar?: string;
    /**
     * escape character removes any special meaning from the following character,default is '\\'
     * @type {string}
     * @memberof CsvParams
     */
    escapeChar?: string;
}
/**
 * @export
 * @namespace CsvParams
 */
export declare namespace CsvParams {
    /**
     * @export
     * @enum {string}
     */
    enum ColumnTypesEnum {
        UNKNOWN,
        BOOLEAN,
        BOOL,
        INTEGER,
        INT,
        FLOAT,
        TIME,
        DATE,
        DATETIME,
        TIMESTAMP,
        STRING
    }
}
/**
 *
 * @export
 * @interface DeleteAliasResponse
 */
export interface DeleteAliasResponse {
    /**
     * alias that was deleted
     * @type {Alias}
     * @memberof DeleteAliasResponse
     */
    data?: Alias;
}
/**
 *
 * @export
 * @interface DeleteApiKeyResponse
 */
export interface DeleteApiKeyResponse {
    /**
     * The API key that was deleted.
     * @type {ApiKey}
     * @memberof DeleteApiKeyResponse
     */
    data?: ApiKey;
}
/**
 *
 * @export
 * @interface DeleteCollectionResponse
 */
export interface DeleteCollectionResponse {
    /**
     * collection that was deleted
     * @type {Collection}
     * @memberof DeleteCollectionResponse
     */
    data?: Collection;
}
/**
 *
 * @export
 * @interface DeleteDocumentsRequest
 */
export interface DeleteDocumentsRequest {
    /**
     * Array of IDs of documents to be deleted
     * @type {Array<DeleteDocumentsRequestData>}
     * @memberof DeleteDocumentsRequest
     */
    data: Array<DeleteDocumentsRequestData>;
}
/**
 *
 * @export
 * @interface DeleteDocumentsRequestData
 */
export interface DeleteDocumentsRequestData {
    /**
     * unique document ID
     * @type {string}
     * @memberof DeleteDocumentsRequestData
     */
    _id: string;
}
/**
 *
 * @export
 * @interface DeleteDocumentsResponse
 */
export interface DeleteDocumentsResponse {
    /**
     * information about deleted documents
     * @type {Array<DocumentStatus>}
     * @memberof DeleteDocumentsResponse
     */
    data?: Array<DocumentStatus>;
}
/**
 *
 * @export
 * @interface DeleteIntegrationResponse
 */
export interface DeleteIntegrationResponse {
    /**
     * integration object that was deleted
     * @type {Integration}
     * @memberof DeleteIntegrationResponse
     */
    data?: Integration;
}
/**
 *
 * @export
 * @interface DeleteIpAllowlistRequest
 */
export interface DeleteIpAllowlistRequest {
    /**
     * Org ID of the org for which we want to delete an entry
     * @type {string}
     * @memberof DeleteIpAllowlistRequest
     */
    org_id?: string;
}
/**
 *
 * @export
 * @interface DeleteIpAllowlistResponse
 */
export interface DeleteIpAllowlistResponse {
    /**
     * IP Allowlist network policy entry that was deleted
     * @type {IpAllowlist}
     * @memberof DeleteIpAllowlistResponse
     */
    data?: IpAllowlist;
}
/**
 *
 * @export
 * @interface DeleteQueryLambdaResponse
 */
export interface DeleteQueryLambdaResponse {
    /**
     * Query Lambda details
     * @type {QueryLambda}
     * @memberof DeleteQueryLambdaResponse
     */
    data?: QueryLambda;
}
/**
 *
 * @export
 * @interface DeleteUserResponse
 */
export interface DeleteUserResponse {
    /**
     * user object that was deleted
     * @type {User}
     * @memberof DeleteUserResponse
     */
    data?: User;
}
/**
 *
 * @export
 * @interface DeleteViewResponse
 */
export interface DeleteViewResponse {
    /**
     * view that was deleted
     * @type {View}
     * @memberof DeleteViewResponse
     */
    data?: View;
}
/**
 *
 * @export
 * @interface DeleteWorkspaceResponse
 */
export interface DeleteWorkspaceResponse {
    /**
     * the workspace that was deleted
     * @type {Workspace}
     * @memberof DeleteWorkspaceResponse
     */
    data?: Workspace;
}
/**
 *
 * @export
 * @interface DocumentStatus
 */
export interface DocumentStatus {
    /**
     * collection name
     * @type {string}
     * @memberof DocumentStatus
     */
    _collection?: string;
    /**
     * error message, if any
     * @type {ErrorModel}
     * @memberof DocumentStatus
     */
    error?: ErrorModel;
    /**
     * unique document ID
     * @type {string}
     * @memberof DocumentStatus
     */
    _id?: string;
    /**
     * status, one of ADDED, REPLACED, DELETED, ERROR
     * @type {string}
     * @memberof DocumentStatus
     */
    status?: DocumentStatus.StatusEnum;
    /**
     * unique id used to represent each patch request
     * @type {string}
     * @memberof DocumentStatus
     */
    patch_id?: string;
}
/**
 * @export
 * @namespace DocumentStatus
 */
export declare namespace DocumentStatus {
    /**
     * @export
     * @enum {string}
     */
    enum StatusEnum {
        ADDED,
        REPLACED,
        DELETED,
        PATCHED,
        ERROR
    }
}
/**
 *
 * @export
 * @interface DynamodbIntegration
 */
export interface DynamodbIntegration {
    /**
     * credentials for an AWS access key integration
     * @type {AwsAccessKey}
     * @memberof DynamodbIntegration
     */
    aws_access_key?: AwsAccessKey;
    /**
     * role used for external id type authentication
     * @type {AwsRole}
     * @memberof DynamodbIntegration
     */
    aws_role?: AwsRole;
    /**
     * S3 bucket used for export during collection initial dump
     * @type {string}
     * @memberof DynamodbIntegration
     */
    s3_export_bucket_name?: string;
}
/**
 * Describes details about an error
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * descriptive message about the error
     * @type {string}
     * @memberof ErrorModel
     */
    message?: string;
    /**
     * category of the error
     * @type {string}
     * @memberof ErrorModel
     */
    type?: ErrorModel.TypeEnum;
    /**
     * Line where the error happened (if applicable)
     * @type {number}
     * @memberof ErrorModel
     */
    line?: number;
    /**
     * Column where the error happened (if applicable)
     * @type {number}
     * @memberof ErrorModel
     */
    column?: number;
    /**
     * Internal trace ID to help with debugging
     * @type {string}
     * @memberof ErrorModel
     */
    trace_id?: string;
    /**
     * ID of the error
     * @type {string}
     * @memberof ErrorModel
     */
    error_id?: string;
}
/**
 * @export
 * @namespace ErrorModel
 */
export declare namespace ErrorModel {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        AUTHEXCEPTION,
        VERSIONEXCEPTION,
        INTERNALERROR,
        INVALIDINPUT,
        NOTIMPLEMENTEDYET,
        RESOURCEEXCEEDED,
        ALREADYEXISTS,
        NOTALLOWED,
        NOTACCEPTABLE,
        NOTSUPPORTED,
        NOTFOUND,
        DEPENDENTRESOURCES,
        QUERYERROR,
        NOTREADY,
        FORBIDDEN,
        QUERYTIMEOUT,
        ROLENOTFOUND,
        CONNECTIONERROR,
        CREATING,
        BADREQUEST,
        SERVICEUNAVAILABLE,
        RATELIMITEXCEEDED,
        QUERYCANCELLED,
        CLIENTCONNECTIONERROR
    }
}
/**
 *
 * @export
 * @interface EventTimeInfo
 */
export interface EventTimeInfo {
    /**
     * name of the field containing event time
     * @type {string}
     * @memberof EventTimeInfo
     */
    field: string;
    /**
     * format of time field, can be one of: milliseconds_since_epoch, seconds_since_epoch
     * @type {string}
     * @memberof EventTimeInfo
     */
    format?: string;
    /**
     * default time zone, in standard IANA format
     * @type {string}
     * @memberof EventTimeInfo
     */
    time_zone?: string;
}
/**
 *
 * @export
 * @interface ExecuteQueryLambdaRequest
 */
export interface ExecuteQueryLambdaRequest {
    /**
     * list of named parameters
     * @type {Array<QueryParameter>}
     * @memberof ExecuteQueryLambdaRequest
     */
    parameters?: Array<QueryParameter>;
    /**
     * Row limit to use if no limit specified in the SQL query text
     * @type {number}
     * @memberof ExecuteQueryLambdaRequest
     */
    default_row_limit?: number;
    /**
     * Whether to generate warnings
     * @type {boolean}
     * @memberof ExecuteQueryLambdaRequest
     */
    generate_warnings?: boolean;
    /**
     * Flag to paginate and store the results of this query for later / sequential retrieval.
     * @type {boolean}
     * @memberof ExecuteQueryLambdaRequest
     */
    paginate?: boolean;
    /**
     * Number of documents to return in addition to paginating for this query call. Only relevant if `paginate` flag is also set.
     * @type {number}
     * @memberof ExecuteQueryLambdaRequest
     */
    initial_paginate_response_doc_count?: number;
}
/**
 *
 * @export
 * @interface FieldMapping
 */
export interface FieldMapping {
}
/**
 *
 * @export
 * @interface FieldMappingQuery
 */
export interface FieldMappingQuery {
    /**
     * SELECT * EXCEPT (name), SHA256(name) AS name_anon FROM _input
     * @type {string}
     * @memberof FieldMappingQuery
     */
    sql?: string;
}
/**
 *
 * @export
 * @interface FieldMappingV2
 */
export interface FieldMappingV2 {
    /**
     * A user specified string that is a name for this mapping
     * @type {string}
     * @memberof FieldMappingV2
     */
    name?: string;
    /**
     * A boolean that determines whether to drop all fields in this document. If set, input and output fields should not be set
     * @type {boolean}
     * @memberof FieldMappingV2
     */
    is_drop_all_fields?: boolean;
    /**
     * A List of InputField for this mapping
     * @type {Array<InputField>}
     * @memberof FieldMappingV2
     */
    input_fields?: Array<InputField>;
    /**
     * An OutputField for this mapping
     * @type {OutputField}
     * @memberof FieldMappingV2
     */
    output_field?: OutputField;
}
/**
 *
 * @export
 * @interface FieldMask
 */
export interface FieldMask {
    /**
     *
     * @type {Array<string>}
     * @memberof FieldMask
     */
    input_path: Array<string>;
    /**
     *
     * @type {FieldMaskMask}
     * @memberof FieldMask
     */
    mask?: FieldMaskMask;
}
/**
 * Field masking function name + args. The args is a JSON object.
 * @export
 * @interface FieldMaskMask
 */
export interface FieldMaskMask {
    /**
     *
     * @type {string}
     * @memberof FieldMaskMask
     */
    name: string;
    /**
     *
     * @type {any}
     * @memberof FieldMaskMask
     */
    args?: any;
}
/**
 *
 * @export
 * @interface FieldOptions
 */
export interface FieldOptions {
    /**
     *  index or no_index
     * @type {string}
     * @memberof FieldOptions
     */
    index_mode?: string;
    /**
     *  v1_index or no_index
     * @type {string}
     * @memberof FieldOptions
     */
    range_index_mode?: string;
    /**
     *  index or no_index
     * @type {string}
     * @memberof FieldOptions
     */
    type_index_mode?: string;
    /**
     *  store or no_store
     * @type {string}
     * @memberof FieldOptions
     */
    column_index_mode?: string;
}
/**
 *
 * @export
 * @interface FieldPartition
 */
export interface FieldPartition {
    /**
     * The name of a field, parsed as a SQL qualified name
     * @type {string}
     * @memberof FieldPartition
     */
    field_name?: string;
    /**
     * The type of partitions on a field
     * @type {string}
     * @memberof FieldPartition
     */
    type?: FieldPartition.TypeEnum;
    /**
     * The values for partitioning of a field
     * @type {Array<string>}
     * @memberof FieldPartition
     */
    keys?: Array<string>;
}
/**
 * @export
 * @namespace FieldPartition
 */
export declare namespace FieldPartition {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        AUTO
    }
}
/**
 *
 * @export
 * @interface FieldSchema
 */
export interface FieldSchema {
    /**
     * The name of a field, parsed as a SQL qualified name
     * @type {string}
     * @memberof FieldSchema
     */
    field_name?: string;
    /**
     * The indexing options for a field
     * @type {FieldOptions}
     * @memberof FieldSchema
     */
    field_options?: FieldOptions;
}
/**
 *
 * @export
 * @interface FileUploadStatus
 */
export interface FileUploadStatus {
    /**
     * name of the file uploaded
     * @type {string}
     * @memberof FileUploadStatus
     */
    file_name?: string;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof FileUploadStatus
     */
    uploaded_at?: string;
    /**
     * id used to identify a file upload request
     * @type {string}
     * @memberof FileUploadStatus
     */
    file_upload_id?: string;
}
/**
 *
 * @export
 * @interface FormDataBodyPart
 */
export interface FormDataBodyPart {
    /**
     *
     * @type {ContentDisposition}
     * @memberof FormDataBodyPart
     */
    contentDisposition?: ContentDisposition;
    /**
     *
     * @type {any}
     * @memberof FormDataBodyPart
     */
    entity?: any;
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof FormDataBodyPart
     */
    headers?: {
        [key: string]: Array<string>;
    };
    /**
     *
     * @type {MediaType}
     * @memberof FormDataBodyPart
     */
    mediaType?: MediaType;
    /**
     *
     * @type {MessageBodyWorkers}
     * @memberof FormDataBodyPart
     */
    messageBodyWorkers?: MessageBodyWorkers;
    /**
     *
     * @type {MultiPart}
     * @memberof FormDataBodyPart
     */
    parent?: MultiPart;
    /**
     *
     * @type {Providers}
     * @memberof FormDataBodyPart
     */
    providers?: Providers;
    /**
     *
     * @type {boolean}
     * @memberof FormDataBodyPart
     */
    simple?: boolean;
    /**
     *
     * @type {FormDataContentDisposition}
     * @memberof FormDataBodyPart
     */
    formDataContentDisposition?: FormDataContentDisposition;
    /**
     *
     * @type {string}
     * @memberof FormDataBodyPart
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof FormDataBodyPart
     */
    value?: string;
    /**
     *
     * @type {{ [key: string]: Array<ParameterizedHeader>; }}
     * @memberof FormDataBodyPart
     */
    parameterizedHeaders?: {
        [key: string]: Array<ParameterizedHeader>;
    };
}
/**
 *
 * @export
 * @interface FormDataContentDisposition
 */
export interface FormDataContentDisposition {
    /**
     *
     * @type {string}
     * @memberof FormDataContentDisposition
     */
    type?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof FormDataContentDisposition
     */
    parameters?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof FormDataContentDisposition
     */
    fileName?: string;
    /**
     *
     * @type {Date}
     * @memberof FormDataContentDisposition
     */
    creationDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof FormDataContentDisposition
     */
    modificationDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof FormDataContentDisposition
     */
    readDate?: Date;
    /**
     *
     * @type {number}
     * @memberof FormDataContentDisposition
     */
    size?: number;
    /**
     *
     * @type {string}
     * @memberof FormDataContentDisposition
     */
    name?: string;
}
/**
 *
 * @export
 * @interface FormatParams
 */
export interface FormatParams {
    /**
     * source data is in json format
     * @type {boolean}
     * @memberof FormatParams
     */
    json?: boolean;
    /**
     *
     * @type {CsvParams}
     * @memberof FormatParams
     */
    csv?: CsvParams;
    /**
     *
     * @type {XmlParams}
     * @memberof FormatParams
     */
    xml?: XmlParams;
    /**
     *
     * @type {boolean}
     * @memberof FormatParams
     */
    mysql_dms?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof FormatParams
     */
    postgres_dms?: boolean;
}
/**
 *
 * @export
 * @interface GcpServiceAccount
 */
export interface GcpServiceAccount {
    /**
     * Contents of JSON Service Account key file
     * @type {string}
     * @memberof GcpServiceAccount
     */
    service_account_key_file_json: string;
}
/**
 *
 * @export
 * @interface GcsIntegration
 */
export interface GcsIntegration {
    /**
     * credentials for an AWS key integration
     * @type {GcpServiceAccount}
     * @memberof GcsIntegration
     */
    gcp_service_account?: GcpServiceAccount;
}
/**
 *
 * @export
 * @interface GetActivityResponse
 */
export interface GetActivityResponse {
    /**
     * list of activity details
     * @type {Array<any>}
     * @memberof GetActivityResponse
     */
    activities?: Array<any>;
}
/**
 *
 * @export
 * @interface GetAliasResponse
 */
export interface GetAliasResponse {
    /**
     * alias that was requested
     * @type {Alias}
     * @memberof GetAliasResponse
     */
    data?: Alias;
}
/**
 *
 * @export
 * @interface GetApiKeyResponse
 */
export interface GetApiKeyResponse {
    /**
     * The requested API key object.
     * @type {ApiKey}
     * @memberof GetApiKeyResponse
     */
    data?: ApiKey;
}
/**
 *
 * @export
 * @interface GetCollectionCommit
 */
export interface GetCollectionCommit {
    /**
     *
     * @type {GetCollectionCommitData}
     * @memberof GetCollectionCommit
     */
    data?: GetCollectionCommitData;
    /**
     *
     * @type {Offsets}
     * @memberof GetCollectionCommit
     */
    offsets?: Offsets;
}
/**
 *
 * @export
 * @interface GetCollectionCommitData
 */
export interface GetCollectionCommitData {
    /**
     *
     * @type {string}
     * @memberof GetCollectionCommitData
     */
    fence?: string;
    /**
     *
     * @type {boolean}
     * @memberof GetCollectionCommitData
     */
    passed?: boolean;
}
/**
 *
 * @export
 * @interface GetCollectionResponse
 */
export interface GetCollectionResponse {
    /**
     * collection that was requested
     * @type {Collection}
     * @memberof GetCollectionResponse
     */
    data?: Collection;
}
/**
 *
 * @export
 * @interface GetIntegrationResponse
 */
export interface GetIntegrationResponse {
    /**
     * integration object
     * @type {Integration}
     * @memberof GetIntegrationResponse
     */
    data?: Integration;
}
/**
 *
 * @export
 * @interface GetIpAllowlistResponse
 */
export interface GetIpAllowlistResponse {
    /**
     * IP Allowlist entry that was requested
     * @type {IpAllowlist}
     * @memberof GetIpAllowlistResponse
     */
    data?: IpAllowlist;
}
/**
 *
 * @export
 * @interface GetUserTosResponse
 */
export interface GetUserTosResponse {
    /**
     * date user has accepted ToS
     * @type {string}
     * @memberof GetUserTosResponse
     */
    data?: string;
}
/**
 *
 * @export
 * @interface GetViewResponse
 */
export interface GetViewResponse {
    /**
     * view that was requested
     * @type {View}
     * @memberof GetViewResponse
     */
    data?: View;
}
/**
 *
 * @export
 * @interface GetVirtualInstanceMetricsResponse
 */
export interface GetVirtualInstanceMetricsResponse {
    /**
     * virtual instance
     * @type {VirtualInstance}
     * @memberof GetVirtualInstanceMetricsResponse
     */
    virtual_instance?: VirtualInstance;
    /**
     * virtual instance metrics per time
     * @type {Array<VirtualInstanceMetrics>}
     * @memberof GetVirtualInstanceMetricsResponse
     */
    metrics?: Array<VirtualInstanceMetrics>;
}
/**
 *
 * @export
 * @interface GetVirtualInstanceResponse
 */
export interface GetVirtualInstanceResponse {
    /**
     * virtual instance that was requested
     * @type {VirtualInstance}
     * @memberof GetVirtualInstanceResponse
     */
    data?: VirtualInstance;
}
/**
 *
 * @export
 * @interface GetWorkspaceResponse
 */
export interface GetWorkspaceResponse {
    /**
     * the workspace that was requested
     * @type {Workspace}
     * @memberof GetWorkspaceResponse
     */
    data?: Workspace;
}
/**
 *
 * @export
 * @interface IngestUsage
 */
export interface IngestUsage {
    /**
     *
     * @type {Array<IngestUsagePrice>}
     * @memberof IngestUsage
     */
    states: Array<IngestUsagePrice>;
    /**
     *
     * @type {number}
     * @memberof IngestUsage
     */
    total_cost: number;
}
/**
 *
 * @export
 * @interface IngestUsagePrice
 */
export interface IngestUsagePrice {
    /**
     *
     * @type {number}
     * @memberof IngestUsagePrice
     */
    price?: number;
    /**
     *
     * @type {number}
     * @memberof IngestUsagePrice
     */
    total_bytes_ingested?: number;
    /**
     *
     * @type {number}
     * @memberof IngestUsagePrice
     */
    total_cost?: number;
}
/**
 *
 * @export
 * @interface InputField
 */
export interface InputField {
    /**
     * The name of a field, parsed as a SQL qualified name
     * @type {string}
     * @memberof InputField
     */
    field_name?: string;
    /**
     * Define the behaviour if fieldName is missing or is null
     * @type {string}
     * @memberof InputField
     */
    if_missing?: InputField.IfMissingEnum;
    /**
     * If true, then drop fieldName from the document
     * @type {boolean}
     * @memberof InputField
     */
    is_drop?: boolean;
    /**
     * Sql parameter name
     * @type {string}
     * @memberof InputField
     */
    param?: string;
}
/**
 * @export
 * @namespace InputField
 */
export declare namespace InputField {
    /**
     * @export
     * @enum {string}
     */
    enum IfMissingEnum {
        SKIP,
        PASS
    }
}
/**
 *
 * @export
 * @interface InputStream
 */
export interface InputStream {
}
/**
 * Instance
 * @export
 * @interface Instance
 */
export interface Instance {
    /**
     * id
     * @type {string}
     * @memberof Instance
     */
    id?: string;
    /**
     * instance plan
     * @type {string}
     * @memberof Instance
     */
    instance_plan?: Instance.InstancePlanEnum;
    /**
     * instance type
     * @type {string}
     * @memberof Instance
     */
    instance_type?: Instance.InstanceTypeEnum;
    /**
     * hourly compute
     * @type {number}
     * @memberof Instance
     */
    hourly_compute?: number;
    /**
     * compute usage
     * @type {ComputeUsage}
     * @memberof Instance
     */
    compute_usage?: ComputeUsage;
    /**
     * leaf group
     * @type {LeafGroup}
     * @memberof Instance
     */
    leaf_group?: LeafGroup;
}
/**
 * @export
 * @namespace Instance
 */
export declare namespace Instance {
    /**
     * @export
     * @enum {string}
     */
    enum InstancePlanEnum {
        RESERVED,
        ONDEMAND
    }
    /**
     * @export
     * @enum {string}
     */
    enum InstanceTypeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
}
/**
 * Integrations that can be associated with data sources to create collections. Only one type of integration may be specified.
 * @export
 * @interface Integration
 */
export interface Integration {
    /**
     * descriptive label and unique identifier
     * @type {string}
     * @memberof Integration
     */
    name: string;
    /**
     * longer explanation for the integration
     * @type {string}
     * @memberof Integration
     */
    description?: string;
    /**
     * list of collections that use the integration
     * @type {Array<Collection>}
     * @memberof Integration
     */
    collections?: Array<Collection>;
    /**
     * email of user who created the integration
     * @type {string}
     * @memberof Integration
     */
    created_by: string;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof Integration
     */
    created_at?: string;
    /**
     * Amazon S3 details, must have one of aws_access_key or aws_role
     * @type {S3Integration}
     * @memberof Integration
     */
    s3?: S3Integration;
    /**
     * Amazon Kinesis details, must have one of aws_access_key or aws_role
     * @type {KinesisIntegration}
     * @memberof Integration
     */
    kinesis?: KinesisIntegration;
    /**
     * Amazon DynamoDB details, must have one of aws_access_key or aws_role
     * @type {DynamodbIntegration}
     * @memberof Integration
     */
    dynamodb?: DynamodbIntegration;
    /**
     * GCS details
     * @type {GcsIntegration}
     * @memberof Integration
     */
    gcs?: GcsIntegration;
    /**
     * Segment details
     * @type {SegmentIntegration}
     * @memberof Integration
     */
    segment?: SegmentIntegration;
    /**
     * Kafka details
     * @type {KafkaIntegration}
     * @memberof Integration
     */
    kafka?: KafkaIntegration;
    /**
     * MongoDb details
     * @type {MongoDbIntegration}
     * @memberof Integration
     */
    mongodb?: MongoDbIntegration;
}
/**
 *
 * @export
 * @interface InvertedIndexGroupEncodingOptions
 */
export interface InvertedIndexGroupEncodingOptions {
    /**
     *
     * @type {number}
     * @memberof InvertedIndexGroupEncodingOptions
     */
    format_version?: number;
    /**
     *
     * @type {number}
     * @memberof InvertedIndexGroupEncodingOptions
     */
    group_size?: number;
    /**
     *
     * @type {number}
     * @memberof InvertedIndexGroupEncodingOptions
     */
    restart_length?: number;
    /**
     *
     * @type {string}
     * @memberof InvertedIndexGroupEncodingOptions
     */
    event_time_codec?: string;
    /**
     *
     * @type {string}
     * @memberof InvertedIndexGroupEncodingOptions
     */
    doc_id_codec?: string;
}
/**
 *
 * @export
 * @interface InviteState
 */
export interface InviteState {
    /**
     * state of user
     * @type {string}
     * @memberof InviteState
     */
    data?: InviteState.DataEnum;
}
/**
 * @export
 * @namespace InviteState
 */
export declare namespace InviteState {
    /**
     * @export
     * @enum {string}
     */
    enum DataEnum {
        PENDING,
        ACCEPTED,
        EXPIRED,
        CANCELLED
    }
}
/**
 * An invoice created by Stripe.
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * total amount billed
     * @type {number}
     * @memberof Invoice
     */
    amount_paid?: number;
    /**
     * total amount billed
     * @type {number}
     * @memberof Invoice
     */
    amount_due?: number;
    /**
     * time in microseconds charge occured
     * @type {number}
     * @memberof Invoice
     */
    date?: number;
    /**
     * pdf link for full invoice with line items
     * @type {string}
     * @memberof Invoice
     */
    pdf_link?: string;
}
/**
 *
 * @export
 * @interface IpAllowlist
 */
export interface IpAllowlist {
    /**
     * IP Allowlist policy name
     * @type {string}
     * @memberof IpAllowlist
     */
    name: string;
    /**
     * optional description
     * @type {string}
     * @memberof IpAllowlist
     */
    description?: string;
    /**
     * email of the creator
     * @type {string}
     * @memberof IpAllowlist
     */
    creator_email?: string;
    /**
     * individual IP address or range of IP addresses in CIDR notation
     * @type {string}
     * @memberof IpAllowlist
     */
    ip_address: string;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof IpAllowlist
     */
    created_at?: string;
}
/**
 *
 * @export
 * @interface Issue
 */
export interface Issue {
    /**
     * identifier
     * @type {string}
     * @memberof Issue
     */
    identifier?: string;
    /**
     * url
     * @type {string}
     * @memberof Issue
     */
    url?: string;
}
/**
 *
 * @export
 * @interface KafkaIntegration
 */
export interface KafkaIntegration {
    /**
     * Kafka topics to tail
     * @type {Array<string>}
     * @memberof KafkaIntegration
     */
    kafka_topic_names?: Array<string>;
    /**
     * The status of the Kafka source by topic
     * @type {{ [key: string]: StatusKafka; }}
     * @memberof KafkaIntegration
     */
    source_status_by_topic?: {
        [key: string]: StatusKafka;
    };
    /**
     * The format of the Kafka topics being tailed
     * @type {string}
     * @memberof KafkaIntegration
     */
    kafka_data_format?: KafkaIntegration.KafkaDataFormatEnum;
    /**
     * kafka connection string
     * @type {string}
     * @memberof KafkaIntegration
     */
    connection_string?: string;
    /**
     * Whether to use v3 integration
     * @type {boolean}
     * @memberof KafkaIntegration
     */
    use_v3?: boolean;
    /**
     * The Kafka bootstrap server url(s). Required only for V3 integration.
     * @type {string}
     * @memberof KafkaIntegration
     */
    bootstrap_servers?: string;
    /**
     * Kafka security configurations. Required only for V3 integration.
     * @type {KafkaV3SecurityConfig}
     * @memberof KafkaIntegration
     */
    security_config?: KafkaV3SecurityConfig;
}
/**
 * @export
 * @namespace KafkaIntegration
 */
export declare namespace KafkaIntegration {
    /**
     * @export
     * @enum {string}
     */
    enum KafkaDataFormatEnum {
        JSON,
        AVRO
    }
}
/**
 *
 * @export
 * @interface KafkaV3SecurityConfig
 */
export interface KafkaV3SecurityConfig {
    /**
     * The secure API key
     * @type {string}
     * @memberof KafkaV3SecurityConfig
     */
    api_key: string;
    /**
     * The secure API password
     * @type {string}
     * @memberof KafkaV3SecurityConfig
     */
    secret: string;
}
/**
 *
 * @export
 * @interface KinesisIntegration
 */
export interface KinesisIntegration {
    /**
     * credentials for an AWS access key integration
     * @type {AwsAccessKey}
     * @memberof KinesisIntegration
     */
    aws_access_key?: AwsAccessKey;
    /**
     * details of an AWS cross-account role integration
     * @type {AwsRole}
     * @memberof KinesisIntegration
     */
    aws_role?: AwsRole;
}
/**
 * Leaf Group
 * @export
 * @interface LeafGroup
 */
export interface LeafGroup {
    /**
     * pod type
     * @type {string}
     * @memberof LeafGroup
     */
    pod_type?: LeafGroup.PodTypeEnum;
    /**
     * pod count
     * @type {number}
     * @memberof LeafGroup
     */
    pod_count?: number;
    /**
     * cpu count
     * @type {number}
     * @memberof LeafGroup
     */
    cpu_count?: number;
}
/**
 * @export
 * @namespace LeafGroup
 */
export declare namespace LeafGroup {
    /**
     * @export
     * @enum {string}
     */
    enum PodTypeEnum {
        C5D9XLARGE32CPU,
        I32XLARGE4CPU,
        I32XLARGE2CPU
    }
}
/**
 *
 * @export
 * @interface LineItem
 */
export interface LineItem {
    /**
     *
     * @type {number}
     * @memberof LineItem
     */
    start?: number;
    /**
     *
     * @type {number}
     * @memberof LineItem
     */
    end?: number;
    /**
     *
     * @type {string}
     * @memberof LineItem
     */
    region?: string;
    /**
     *
     * @type {number}
     * @memberof LineItem
     */
    cost?: number;
    /**
     *
     * @type {number}
     * @memberof LineItem
     */
    quantity?: number;
    /**
     *
     * @type {string}
     * @memberof LineItem
     */
    unit?: string;
    /**
     *
     * @type {number}
     * @memberof LineItem
     */
    rate?: number;
    /**
     *
     * @type {string}
     * @memberof LineItem
     */
    rate_unit?: string;
    /**
     *
     * @type {string}
     * @memberof LineItem
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof LineItem
     */
    type?: LineItem.TypeEnum;
    /**
     *
     * @type {string}
     * @memberof LineItem
     */
    readable_line_item?: string;
}
/**
 * @export
 * @namespace LineItem
 */
export declare namespace LineItem {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        COMPUTEFREE,
        COMPUTESHARED,
        COMPUTESMALL,
        COMPUTEMEDIUM,
        COMPUTELARGE,
        COMPUTEXLARGE,
        COMPUTEXLARGE2,
        COMPUTEXLARGE4,
        COMPUTEXLARGE8,
        COMPUTEXLARGE16,
        STORAGE,
        INGEST,
        CREDITCOMPUTE,
        CREDITSTORAGE,
        CREDITINGEST,
        CREDIT
    }
}
/**
 *
 * @export
 * @interface LineItems
 */
export interface LineItems {
    /**
     *
     * @type {string}
     * @memberof LineItems
     */
    org_id?: string;
    /**
     *
     * @type {number}
     * @memberof LineItems
     */
    start?: number;
    /**
     *
     * @type {number}
     * @memberof LineItems
     */
    end?: number;
    /**
     *
     * @type {Array<LineItem>}
     * @memberof LineItems
     */
    line_items?: Array<LineItem>;
    /**
     *
     * @type {number}
     * @memberof LineItems
     */
    total_cost?: number;
}
/**
 *
 * @export
 * @interface LineItemsResponse
 */
export interface LineItemsResponse {
    /**
     * billing line items
     * @type {LineItems}
     * @memberof LineItemsResponse
     */
    data?: LineItems;
}
/**
 *
 * @export
 * @interface ListAliasesResponse
 */
export interface ListAliasesResponse {
    /**
     * list of all aliases
     * @type {Array<Alias>}
     * @memberof ListAliasesResponse
     */
    data?: Array<Alias>;
}
/**
 *
 * @export
 * @interface ListAllQueryPagesResponse
 */
export interface ListAllQueryPagesResponse {
    /**
     *
     * @type {Array<QueryPageInfo>}
     * @memberof ListAllQueryPagesResponse
     */
    data?: Array<QueryPageInfo>;
}
/**
 *
 * @export
 * @interface ListApiKeysResponse
 */
export interface ListApiKeysResponse {
    /**
     * List of API key objects.
     * @type {Array<ApiKey>}
     * @memberof ListApiKeysResponse
     */
    data?: Array<ApiKey>;
}
/**
 *
 * @export
 * @interface ListCollectionsResponse
 */
export interface ListCollectionsResponse {
    /**
     * list of all collections
     * @type {Array<Collection>}
     * @memberof ListCollectionsResponse
     */
    data?: Array<Collection>;
}
/**
 *
 * @export
 * @interface ListCreditsResponse
 */
export interface ListCreditsResponse {
    /**
     *
     * @type {Array<Credit>}
     * @memberof ListCreditsResponse
     */
    data?: Array<Credit>;
}
/**
 *
 * @export
 * @interface ListIntegrationsResponse
 */
export interface ListIntegrationsResponse {
    /**
     * list of integration objects
     * @type {Array<Integration>}
     * @memberof ListIntegrationsResponse
     */
    data?: Array<Integration>;
}
/**
 *
 * @export
 * @interface ListIpAllowlistsResponse
 */
export interface ListIpAllowlistsResponse {
    /**
     * list of all IP Allowlist network policies
     * @type {Array<IpAllowlist>}
     * @memberof ListIpAllowlistsResponse
     */
    data?: Array<IpAllowlist>;
}
/**
 *
 * @export
 * @interface ListQueryLambdaTagsResponse
 */
export interface ListQueryLambdaTagsResponse {
    /**
     * list of all tags associated with a Query Lambda
     * @type {Array<QueryLambdaTag>}
     * @memberof ListQueryLambdaTagsResponse
     */
    data?: Array<QueryLambdaTag>;
}
/**
 *
 * @export
 * @interface ListQueryLambdaVersionsResponse
 */
export interface ListQueryLambdaVersionsResponse {
    /**
     * list of all versions for a particular Query Lambda
     * @type {Array<QueryLambdaVersion>}
     * @memberof ListQueryLambdaVersionsResponse
     */
    data?: Array<QueryLambdaVersion>;
}
/**
 *
 * @export
 * @interface ListQueryLambdasResponse
 */
export interface ListQueryLambdasResponse {
    /**
     * list of all Query Lambdas
     * @type {Array<QueryLambda>}
     * @memberof ListQueryLambdasResponse
     */
    data?: Array<QueryLambda>;
}
/**
 *
 * @export
 * @interface ListQueryPagesResponse
 */
export interface ListQueryPagesResponse {
    /**
     *
     * @type {QueryPageInfo}
     * @memberof ListQueryPagesResponse
     */
    data?: QueryPageInfo;
}
/**
 *
 * @export
 * @interface ListRolesResponse
 */
export interface ListRolesResponse {
    /**
     * List of all roles.
     * @type {Array<Role>}
     * @memberof ListRolesResponse
     */
    data?: Array<Role>;
}
/**
 *
 * @export
 * @interface ListUnsubscribePreferencesResponse
 */
export interface ListUnsubscribePreferencesResponse {
    /**
     * List of notification preferences
     * @type {Array<UnsubscribePreference>}
     * @memberof ListUnsubscribePreferencesResponse
     */
    data?: Array<UnsubscribePreference>;
}
/**
 *
 * @export
 * @interface ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     * list of users
     * @type {Array<User>}
     * @memberof ListUsersResponse
     */
    data?: Array<User>;
}
/**
 *
 * @export
 * @interface ListViewsResponse
 */
export interface ListViewsResponse {
    /**
     * list of all views
     * @type {Array<View>}
     * @memberof ListViewsResponse
     */
    data?: Array<View>;
}
/**
 *
 * @export
 * @interface ListVirtualInstancesResponse
 */
export interface ListVirtualInstancesResponse {
    /**
     * list of all virtual instances
     * @type {Array<VirtualInstance>}
     * @memberof ListVirtualInstancesResponse
     */
    data?: Array<VirtualInstance>;
}
/**
 *
 * @export
 * @interface ListWorkspacesResponse
 */
export interface ListWorkspacesResponse {
    /**
     * list of workspaces
     * @type {Array<Workspace>}
     * @memberof ListWorkspacesResponse
     */
    data?: Array<Workspace>;
}
/**
 *
 * @export
 * @interface MarketplaceSubscriptionRequest
 */
export interface MarketplaceSubscriptionRequest {
    /**
     *
     * @type {string}
     * @memberof MarketplaceSubscriptionRequest
     */
    aws_marketplace_token: string;
}
/**
 *
 * @export
 * @interface MediaType
 */
export interface MediaType {
    /**
     *
     * @type {string}
     * @memberof MediaType
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof MediaType
     */
    subtype?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MediaType
     */
    parameters?: {
        [key: string]: string;
    };
    /**
     *
     * @type {boolean}
     * @memberof MediaType
     */
    wildcardType?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MediaType
     */
    wildcardSubtype?: boolean;
}
/**
 *
 * @export
 * @interface MessageBodyWorkers
 */
export interface MessageBodyWorkers {
}
/**
 *
 * @export
 * @interface MongoDbIntegration
 */
export interface MongoDbIntegration {
    /**
     * MongoDB connection URI string
     * @type {string}
     * @memberof MongoDbIntegration
     */
    connection_uri: string;
}
/**
 *
 * @export
 * @interface MultiPart
 */
export interface MultiPart {
    /**
     *
     * @type {ContentDisposition}
     * @memberof MultiPart
     */
    contentDisposition?: ContentDisposition;
    /**
     *
     * @type {any}
     * @memberof MultiPart
     */
    entity?: any;
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof MultiPart
     */
    headers?: {
        [key: string]: Array<string>;
    };
    /**
     *
     * @type {MediaType}
     * @memberof MultiPart
     */
    mediaType?: MediaType;
    /**
     *
     * @type {MessageBodyWorkers}
     * @memberof MultiPart
     */
    messageBodyWorkers?: MessageBodyWorkers;
    /**
     *
     * @type {MultiPart}
     * @memberof MultiPart
     */
    parent?: MultiPart;
    /**
     *
     * @type {Providers}
     * @memberof MultiPart
     */
    providers?: Providers;
    /**
     *
     * @type {Array<BodyPart>}
     * @memberof MultiPart
     */
    bodyParts?: Array<BodyPart>;
    /**
     *
     * @type {{ [key: string]: Array<ParameterizedHeader>; }}
     * @memberof MultiPart
     */
    parameterizedHeaders?: {
        [key: string]: Array<ParameterizedHeader>;
    };
}
/**
 *
 * @export
 * @interface Offsets
 */
export interface Offsets {
    /**
     *
     * @type {string}
     * @memberof Offsets
     */
    commit?: string;
}
/**
 *
 * @export
 * @interface OperatorStats
 */
export interface OperatorStats {
    /**
     * The id of the worker this operator ran on
     * @type {string}
     * @memberof OperatorStats
     */
    worker?: string;
    /**
     * The id of the fragment this operator belonged to
     * @type {number}
     * @memberof OperatorStats
     */
    fragment?: number;
    /**
     * The id of the task this operator belonged to
     * @type {string}
     * @memberof OperatorStats
     */
    task?: string;
    /**
     * The id of this operator in the task
     * @type {number}
     * @memberof OperatorStats
     */
    operator_id?: number;
    /**
     * The class name of this operator
     * @type {string}
     * @memberof OperatorStats
     */
    operator_name?: string;
    /**
     * Microseconds since UNIX epoch of the first time data was received from any of this operator's inputs
     * @type {number}
     * @memberof OperatorStats
     */
    start_time_us?: number;
    /**
     * Microseconds since UNIX epoch of the last time data was sent to any of this operator's outputs
     * @type {number}
     * @memberof OperatorStats
     */
    end_time_us?: number;
    /**
     * Maximum memory used by this operator during execution
     * @type {number}
     * @memberof OperatorStats
     */
    max_memory?: number;
    /**
     * Total bytes received across all inputs
     * @type {number}
     * @memberof OperatorStats
     */
    input_bytes?: number;
    /**
     * Total rows received across all inputs
     * @type {number}
     * @memberof OperatorStats
     */
    input_rows?: number;
    /**
     * Total bytes sent across all outputs
     * @type {number}
     * @memberof OperatorStats
     */
    output_bytes?: number;
    /**
     * Total rows sent across all outputs
     * @type {number}
     * @memberof OperatorStats
     */
    output_rows?: number;
    /**
     * Total time in microseconds spent doing useful work
     * @type {number}
     * @memberof OperatorStats
     */
    processing_time_us?: number;
    /**
     * Number of times InvertedIndexLazyMergeOperator is invoked to perform lazy merge
     * @type {number}
     * @memberof OperatorStats
     */
    term_iterator_merge_count?: number;
    /**
     * Number of operands InvertedIndexLazyMergeOperator merged in total
     * @type {number}
     * @memberof OperatorStats
     */
    term_iterator_merge_operand_count?: number;
    /**
     * Time spent in the merge operation in InvertedIndexLazyMergeOperator
     * @type {number}
     * @memberof OperatorStats
     */
    term_iterator_merge_duration_secs?: number;
    /**
     * Max size of value merged by InvertedIndexLazyMergeOperator
     * @type {number}
     * @memberof OperatorStats
     */
    term_iterator_max_merged_value_size?: number;
}
/**
 *
 * @export
 * @interface OrgBillingPortalResponse
 */
export interface OrgBillingPortalResponse {
    /**
     *
     * @type {string}
     * @memberof OrgBillingPortalResponse
     */
    portal_url?: string;
}
/**
 *
 * @export
 * @interface OrgCompute
 */
export interface OrgCompute {
    /**
     *
     * @type {number}
     * @memberof OrgCompute
     */
    compute_cost: number;
    /**
     *
     * @type {Array<Instance>}
     * @memberof OrgCompute
     */
    instances: Array<Instance>;
}
/**
 *
 * @export
 * @interface OrgComputeResponse
 */
export interface OrgComputeResponse {
    /**
     * OrgCompute object
     * @type {OrgCompute}
     * @memberof OrgComputeResponse
     */
    data?: OrgCompute;
}
/**
 *
 * @export
 * @interface OrgIngestResponse
 */
export interface OrgIngestResponse {
    /**
     * OrgIngest object
     * @type {IngestUsage}
     * @memberof OrgIngestResponse
     */
    data?: IngestUsage;
}
/**
 * Invoice history for an organization.
 * @export
 * @interface OrgInvoices
 */
export interface OrgInvoices {
    /**
     * list of historical invoices
     * @type {Array<Invoice>}
     * @memberof OrgInvoices
     */
    invoices?: Array<Invoice>;
}
/**
 *
 * @export
 * @interface OrgInvoicesResponse
 */
export interface OrgInvoicesResponse {
    /**
     * OrgInvoices object
     * @type {OrgInvoices}
     * @memberof OrgInvoicesResponse
     */
    data?: OrgInvoices;
}
/**
 *
 * @export
 * @interface OrgMembership
 */
export interface OrgMembership {
    /**
     *
     * @type {Organization}
     * @memberof OrgMembership
     */
    organization: Organization;
    /**
     *
     * @type {Array<string>}
     * @memberof OrgMembership
     */
    roles: Array<string>;
    /**
     *
     * @type {string}
     * @memberof OrgMembership
     */
    invite_state: OrgMembership.InviteStateEnum;
    /**
     *
     * @type {string}
     * @memberof OrgMembership
     */
    invited_by: string;
    /**
     * email of the user
     * @type {string}
     * @memberof OrgMembership
     */
    email?: string;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof OrgMembership
     */
    expires_at: string;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof OrgMembership
     */
    created_at: string;
}
/**
 * @export
 * @namespace OrgMembership
 */
export declare namespace OrgMembership {
    /**
     * @export
     * @enum {string}
     */
    enum InviteStateEnum {
        PENDING,
        ACCEPTED,
        EXPIRED,
        CANCELLED
    }
}
/**
 * Information related to payment for an organization.
 * @export
 * @interface OrgPaymentMethod
 */
export interface OrgPaymentMethod {
    /**
     * stripe source ID associated with credit card
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    card_source_id?: string;
    /**
     * brand of credit card
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    card_brand?: string;
    /**
     * origin country of credit card
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    card_country?: string;
    /**
     * credit card expiration month
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    card_exp_month?: string;
    /**
     * credit card expiration year
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    card_exp_year?: string;
    /**
     * debit or credit
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    card_funding?: string;
    /**
     * last 4 digits of credit card
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    card_last4?: string;
    /**
     * status of credit card
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    card_status?: string;
    /**
     * stripe customer id. not a secret.
     * @type {string}
     * @memberof OrgPaymentMethod
     */
    customer_id?: string;
}
/**
 *
 * @export
 * @interface OrgPaymentMethodResponse
 */
export interface OrgPaymentMethodResponse {
    /**
     * OrgPaymentMethod object
     * @type {OrgPaymentMethod}
     * @memberof OrgPaymentMethodResponse
     */
    data?: OrgPaymentMethod;
}
/**
 * Settings for an organization.
 * @export
 * @interface OrgSettings
 */
export interface OrgSettings {
    /**
     * Max number of aggregators per query
     * @type {number}
     * @memberof OrgSettings
     */
    aggregator_parallelism?: number;
    /**
     * collection limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    collection_limit?: number;
    /**
     * alias limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    alias_limit?: number;
    /**
     * IP allowlist limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    ip_allowlist_limit?: number;
    /**
     * Console metrics days limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    console_metrics_days_limit?: number;
    /**
     * Custom roles limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    custom_role_limit?: number;
    /**
     * Query Lambda limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    query_lambda_count_limit?: number;
    /**
     * version limit per Query Lambda
     * @type {number}
     * @memberof OrgSettings
     */
    query_lambda_version_count_limit?: number;
    /**
     * Unique tag limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    unique_tag_count_limit?: number;
    /**
     * concurrent queries limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    concurrent_queries_limit?: number;
    /**
     * concurrent query execution limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    concurrent_query_execution_limit?: number;
    /**
     * identifier for encryption key for org
     * @type {string}
     * @memberof OrgSettings
     */
    encryption_key?: string;
    /**
     * number of file uploads allowed per collection
     * @type {number}
     * @memberof OrgSettings
     */
    file_upload_limit_per_collection?: number;
    /**
     * input rate limit in megabytes per second
     * @type {number}
     * @memberof OrgSettings
     */
    input_rate_limit_kbps?: number;
    /**
     * number of partitions in the log store for each collection
     * @type {number}
     * @memberof OrgSettings
     */
    log_partitions_per_collection?: number;
    /**
     * custom unit price for ingest
     * @type {number}
     * @memberof OrgSettings
     */
    custom_ingest_price?: number;
    /**
     * custom trial credit amount
     * @type {number}
     * @memberof OrgSettings
     */
    custom_trial_credit?: number;
    /**
     * hourly compute price
     * @type {number}
     * @memberof OrgSettings
     */
    hourly_compute_price?: number;
    /**
     * the minimum monthly bill for an organization
     * @type {number}
     * @memberof OrgSettings
     */
    min_monthly_bill?: number;
    /**
     * Pending invites limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    pending_invites_limit?: number;
    /**
     * Total users limit per organization
     * @type {number}
     * @memberof OrgSettings
     */
    total_users_limit?: number;
    /**
     * Max amount of memory allocated per query per worker node
     * @type {number}
     * @memberof OrgSettings
     */
    query_memory_limit_bytes?: number;
    /**
     * whether role-based access control is enabled
     * @type {number}
     * @memberof OrgSettings
     */
    replication_factor?: number;
    /**
     * min number of shards in Rockset for each collection
     * @type {number}
     * @memberof OrgSettings
     */
    min_shards_per_collection?: number;
    /**
     * max number of shards in Rockset for each collection
     * @type {number}
     * @memberof OrgSettings
     */
    max_shards_per_collection?: number;
    /**
     * storage size limit in bytes
     * @type {number}
     * @memberof OrgSettings
     */
    size_limit_bytes?: number;
    /**
     * whether Single Sign On is enabled
     * @type {boolean}
     * @memberof OrgSettings
     */
    sso_enabled?: boolean;
    /**
     * state of the org
     * @type {string}
     * @memberof OrgSettings
     */
    state?: OrgSettings.StateEnum;
    /**
     * edition of the org
     * @type {string}
     * @memberof OrgSettings
     */
    edition?: OrgSettings.EditionEnum;
    /**
     * data when trial ends
     * @type {number}
     * @memberof OrgSettings
     */
    trial_end?: number;
    /**
     * date when trial began
     * @type {number}
     * @memberof OrgSettings
     */
    trial_start?: number;
    /**
     * list of console feature flags that are on
     * @type {Array<string>}
     * @memberof OrgSettings
     */
    console_flags?: Array<string>;
    /**
     * whether users from specified domains can be auto-provisioned with accounts
     * @type {boolean}
     * @memberof OrgSettings
     */
    auto_provision?: boolean;
    /**
     * default role for autoprovisioned users
     * @type {string}
     * @memberof OrgSettings
     */
    auto_provision_role?: string;
    /**
     * domain for which accounts can be autoprovisioned
     * @type {string}
     * @memberof OrgSettings
     */
    auto_provision_domain?: string;
    /**
     * connection name of SSO connection
     * @type {string}
     * @memberof OrgSettings
     */
    sso_connection?: string;
    /**
     * whether or not SSO is the only permitted form of auth
     * @type {boolean}
     * @memberof OrgSettings
     */
    sso_only?: boolean;
    /**
     * organization is allowed to use MFA
     * @type {boolean}
     * @memberof OrgSettings
     */
    mfa_enabled?: boolean;
    /**
     * organization requires MFA
     * @type {boolean}
     * @memberof OrgSettings
     */
    mfa_restricted?: boolean;
    /**
     * whether or not instance-based pricing is enabled for this org
     * @type {boolean}
     * @memberof OrgSettings
     */
    instance_pricing?: boolean;
}
/**
 * @export
 * @namespace OrgSettings
 */
export declare namespace OrgSettings {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        FREE,
        PAID,
        TRIAL,
        TRIALEXPIRED,
        TRIALDEPLETED,
        INACTIVE,
        DELETED
    }
    /**
     * @export
     * @enum {string}
     */
    enum EditionEnum {
        STANDARD,
        PREMIUM
    }
}
/**
 *
 * @export
 * @interface OrgSettingsResponse
 */
export interface OrgSettingsResponse {
    /**
     * OrgSettings object
     * @type {OrgSettings}
     * @memberof OrgSettingsResponse
     */
    data?: OrgSettings;
}
/**
 *
 * @export
 * @interface OrgStorage
 */
export interface OrgStorage {
    /**
     *
     * @type {{ [key: string]: Usage; }}
     * @memberof OrgStorage
     */
    series: {
        [key: string]: Usage;
    };
    /**
     *
     * @type {number}
     * @memberof OrgStorage
     */
    cost: number;
}
/**
 *
 * @export
 * @interface OrgStorageResponse
 */
export interface OrgStorageResponse {
    /**
     * OrgUsage object
     * @type {OrgStorage}
     * @memberof OrgStorageResponse
     */
    data?: OrgStorage;
}
/**
 *
 * @export
 * @interface OrgTrialUsage
 */
export interface OrgTrialUsage {
    /**
     *
     * @type {number}
     * @memberof OrgTrialUsage
     */
    trial_credit_used: number;
    /**
     *
     * @type {number}
     * @memberof OrgTrialUsage
     */
    trial_credit_remaining: number;
    /**
     *
     * @type {number}
     * @memberof OrgTrialUsage
     */
    trial_start: number;
    /**
     *
     * @type {number}
     * @memberof OrgTrialUsage
     */
    trial_end: number;
    /**
     *
     * @type {number}
     * @memberof OrgTrialUsage
     */
    month_credit_used: number;
}
/**
 *
 * @export
 * @interface OrgTrialUsageResponse
 */
export interface OrgTrialUsageResponse {
    /**
     * OrgTrialUsage object
     * @type {OrgTrialUsage}
     * @memberof OrgTrialUsageResponse
     */
    data?: OrgTrialUsage;
}
/**
 * Usage statistics for an organization.
 * @export
 * @interface OrgUsage
 */
export interface OrgUsage {
    /**
     * number of active documents
     * @type {number}
     * @memberof OrgUsage
     */
    active_document_count?: number;
    /**
     * number of collections
     * @type {number}
     * @memberof OrgUsage
     */
    collection_count?: number;
    /**
     * number of users
     * @type {number}
     * @memberof OrgUsage
     */
    user_count?: number;
    /**
     * number of integrations
     * @type {number}
     * @memberof OrgUsage
     */
    integration_count?: number;
    /**
     * timestamp of last update
     * @type {string}
     * @memberof OrgUsage
     */
    last_updated_ms?: string;
    /**
     * timestamp of last query
     * @type {string}
     * @memberof OrgUsage
     */
    last_queried_ms?: string;
    /**
     * total size in bytes of all collections
     * @type {number}
     * @memberof OrgUsage
     */
    total_size_bytes?: number;
    /**
     *
     * @type {number}
     * @memberof OrgUsage
     */
    total_index_size?: number;
    /**
     * total queries performed in org
     * @type {number}
     * @memberof OrgUsage
     */
    total_queries?: number;
}
/**
 *
 * @export
 * @interface OrgUsageResponse
 */
export interface OrgUsageResponse {
    /**
     * OrgUsage object
     * @type {OrgUsage}
     * @memberof OrgUsageResponse
     */
    data?: OrgUsage;
}
/**
 * An organization in Rockset is a container for users and collections.
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * Rockset's global AWS user
     * @type {string}
     * @memberof Organization
     */
    rockset_user?: string;
    /**
     * organization's unique external ID within Rockset
     * @type {string}
     * @memberof Organization
     */
    external_id?: string;
    /**
     * name of the company
     * @type {string}
     * @memberof Organization
     */
    company_name?: string;
    /**
     * org state
     * @type {string}
     * @memberof Organization
     */
    state?: Organization.StateEnum;
    /**
     * org edition
     * @type {string}
     * @memberof Organization
     */
    edition?: Organization.EditionEnum;
    /**
     * AWS Marketplace Customer ID
     * @type {string}
     * @memberof Organization
     */
    aws_marketplace_customer_id?: string;
    /**
     * list of clusters associated with this org
     * @type {Array<Cluster>}
     * @memberof Organization
     */
    clusters?: Array<Cluster>;
    /**
     * Org is MFA restricted
     * @type {boolean}
     * @memberof Organization
     */
    mfa_restricted?: boolean;
    /**
     * unique identifier for the organization
     * @type {string}
     * @memberof Organization
     */
    id?: string;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof Organization
     */
    created_at?: string;
    /**
     * name of the organization
     * @type {string}
     * @memberof Organization
     */
    display_name?: string;
    /**
     * org deletion scheduled at
     * @type {string}
     * @memberof Organization
     */
    deletion_scheduled_at?: string;
}
/**
 * @export
 * @namespace Organization
 */
export declare namespace Organization {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        FREE,
        PAID,
        TRIAL,
        TRIALEXPIRED,
        TRIALDEPLETED,
        INACTIVE,
        DELETED
    }
    /**
     * @export
     * @enum {string}
     */
    enum EditionEnum {
        STANDARD,
        PREMIUM
    }
}
/**
 *
 * @export
 * @interface OrganizationResponse
 */
export interface OrganizationResponse {
    /**
     * Organization object
     * @type {Organization}
     * @memberof OrganizationResponse
     */
    data?: Organization;
}
/**
 *
 * @export
 * @interface OutputField
 */
export interface OutputField {
    /**
     * The name of a field, parsed as a SQL qualified name
     * @type {string}
     * @memberof OutputField
     */
    field_name?: string;
    /**
     * The name of a sql function
     * @type {SqlExpression}
     * @memberof OutputField
     */
    value?: SqlExpression;
    /**
     * Error in Mapping execution: 'skip' or 'fail'
     * @type {string}
     * @memberof OutputField
     */
    on_error?: OutputField.OnErrorEnum;
}
/**
 * @export
 * @namespace OutputField
 */
export declare namespace OutputField {
    /**
     * @export
     * @enum {string}
     */
    enum OnErrorEnum {
        SKIP,
        FAIL
    }
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * Cursor for the first doc in this query
     * @type {string}
     * @memberof Pagination
     */
    start_cursor?: string;
}
/**
 *
 * @export
 * @interface PaginationInfo
 */
export interface PaginationInfo {
    /**
     * Number of documents returned in this result set
     * @type {number}
     * @memberof PaginationInfo
     */
    current_page_doc_count?: number;
    /**
     * The doc offset that next_cursor starts at.
     * @type {number}
     * @memberof PaginationInfo
     */
    next_cursor_offset?: number;
    /**
     * Cursor used to retrieve the first set of documents.
     * @type {string}
     * @memberof PaginationInfo
     */
    start_cursor?: string;
    /**
     * Cursor to use to get the list of documents
     * @type {string}
     * @memberof PaginationInfo
     */
    next_cursor?: string;
}
/**
 *
 * @export
 * @interface ParameterizedHeader
 */
export interface ParameterizedHeader {
    /**
     *
     * @type {string}
     * @memberof ParameterizedHeader
     */
    value?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ParameterizedHeader
     */
    parameters?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface PatchDocument
 */
export interface PatchDocument {
    /**
     * Unique ID of the document to be patched.
     * @type {string}
     * @memberof PatchDocument
     */
    _id: string;
    /**
     * List of patch operations.
     * @type {Array<PatchOperation>}
     * @memberof PatchDocument
     */
    patch: Array<PatchOperation>;
}
/**
 *
 * @export
 * @interface PatchDocumentsRequest
 */
export interface PatchDocumentsRequest {
    /**
     * List of patches to be applied.
     * @type {Array<PatchDocument>}
     * @memberof PatchDocumentsRequest
     */
    data: Array<PatchDocument>;
}
/**
 *
 * @export
 * @interface PatchDocumentsResponse
 */
export interface PatchDocumentsResponse {
    /**
     *
     * @type {Array<DocumentStatus>}
     * @memberof PatchDocumentsResponse
     */
    data: Array<DocumentStatus>;
}
/**
 *
 * @export
 * @interface PatchOperation
 */
export interface PatchOperation {
    /**
     * [JSON Patch operation](https://datatracker.ietf.org/doc/html/rfc6902#page-4) to be performed in this patch. Case insensitive.
     * @type {string}
     * @memberof PatchOperation
     */
    op: PatchOperation.OpEnum;
    /**
     * [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901) referencing a location in the target document where the operation is performed
     * @type {string}
     * @memberof PatchOperation
     */
    path: string;
    /**
     * Value used in the patch operation. Required for `ADD`, `REPLACE`, `TEST`, and `INCREMENT` operations.
     * @type {any}
     * @memberof PatchOperation
     */
    value?: any;
    /**
     * [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901) referencing a location in the target document. Required for `COPY` and `MOVE` operations.
     * @type {string}
     * @memberof PatchOperation
     */
    from?: string;
}
/**
 * @export
 * @namespace PatchOperation
 */
export declare namespace PatchOperation {
    /**
     * @export
     * @enum {string}
     */
    enum OpEnum {
        ADD,
        REPLACE,
        REMOVE,
        COPY,
        MOVE,
        TEST,
        INCREMENT
    }
}
/**
 *
 * @export
 * @interface PreviewCollectionRequest
 */
export interface PreviewCollectionRequest {
    /**
     * list of sources from which to ingest data
     * @type {Array<Source>}
     * @memberof PreviewCollectionRequest
     */
    sources?: Array<Source>;
    /**
     * configuration for event data
     * @type {EventTimeInfo}
     * @memberof PreviewCollectionRequest
     */
    event_time_info?: EventTimeInfo;
    /**
     * list of mappings
     * @type {Array<FieldMappingV2>}
     * @memberof PreviewCollectionRequest
     */
    field_mappings?: Array<FieldMappingV2>;
}
/**
 *
 * @export
 * @interface PreviewCollectionResponse
 */
export interface PreviewCollectionResponse {
    /**
     * sample documents
     * @type {Array<Array<any>>}
     * @memberof PreviewCollectionResponse
     */
    sample_documents?: Array<Array<any>>;
    /**
     * mapped_fields
     * @type {Array<string>}
     * @memberof PreviewCollectionResponse
     */
    mapped_fields?: Array<string>;
}
/**
 *
 * @export
 * @interface PreviewSource
 */
export interface PreviewSource {
    /**
     * UUID unique to the source
     * @type {string}
     * @memberof PreviewSource
     */
    preview_source_id?: string;
    /**
     * integration used for this source
     * @type {string}
     * @memberof PreviewSource
     */
    integration_name?: string;
    /**
     * whether type is file upload
     * @type {boolean}
     * @memberof PreviewSource
     */
    file_upload?: boolean;
    /**
     * configuration for receiving data from kafka
     * @type {SourceKafka}
     * @memberof PreviewSource
     */
    kafka?: SourceKafka;
    /**
     * time at which this preview source expires (ISO-8601 format)
     * @type {string}
     * @memberof PreviewSource
     */
    expire_at?: string;
}
/**
 *
 * @export
 * @interface Privilege
 */
export interface Privilege {
    /**
     * The action allowed by this privilege.
     * @type {string}
     * @memberof Privilege
     */
    action?: Privilege.ActionEnum;
    /**
     * The resources on which the action is allowed. Defaults to '*All*' if not specified.
     * @type {string}
     * @memberof Privilege
     */
    resource_name?: string;
    /**
     * Cluster ID (`rs2` for us-west-2, `use1a1` for us-east-1) for which the action is allowed. Defaults to '*All*' if not specified.
     * @type {string}
     * @memberof Privilege
     */
    cluster?: string;
    /**
     * The Virtual Instances on which the action is allowed. Defaults to '*All*' if not specified.
     * @type {string}
     * @memberof Privilege
     */
    virtual_instance?: string;
}
/**
 * @export
 * @namespace Privilege
 */
export declare namespace Privilege {
    /**
     * @export
     * @enum {string}
     */
    enum ActionEnum {
        ALLGLOBALACTIONS,
        GETORGGLOBAL,
        GETCURRENTUSERGLOBAL,
        INVITEUSERGLOBAL,
        DELETEUSERGLOBAL,
        LISTUSERSGLOBAL,
        GETBILLINGGLOBAL,
        UPDATEBILLINGGLOBAL,
        UPDATESETTINGSGLOBAL,
        GETMETRICSGLOBAL,
        UPDATEVIGLOBAL,
        LISTVIGLOBAL,
        CREATEWSGLOBAL,
        LISTWSGLOBAL,
        CREATEINTEGRATIONGLOBAL,
        DELETEINTEGRATIONGLOBAL,
        LISTINTEGRATIONSGLOBAL,
        UPDATERESOURCEOWNERGLOBAL,
        CREATEAPIKEYGLOBAL,
        CREATEROLEGLOBAL,
        UPDATEROLEGLOBAL,
        DELETEROLEGLOBAL,
        LISTROLESGLOBAL,
        GRANTREVOKEROLEGLOBAL,
        ALLINTEGRATIONACTIONS,
        CREATECOLLECTIONINTEGRATION,
        ALLWORKSPACEACTIONS,
        DELETEWS,
        QUERYDATAWS,
        WRITEDATAWS,
        CREATECOLLECTIONWS,
        DELETECOLLECTIONWS,
        CREATEALIASWS,
        DELETEALIASWS,
        LISTRESOURCESWS,
        CREATEQUERYLAMBDAWS,
        DELETEQUERYLAMBDAWS,
        EXECUTEQUERYLAMBDAWS,
        CREATEVIEWWS,
        DELETEVIEWWS
    }
}
/**
 *
 * @export
 * @interface Providers
 */
export interface Providers {
}
/**
 *
 * @export
 * @interface QueryError
 */
export interface QueryError {
    /**
     * The type of error
     * @type {string}
     * @memberof QueryError
     */
    type?: string;
    /**
     * A message associated with the error, containing more information about it
     * @type {string}
     * @memberof QueryError
     */
    message?: string;
    /**
     * The HTTP status code associated with this error, had it been sent as the response status code
     * @type {number}
     * @memberof QueryError
     */
    status_code?: number;
}
/**
 *
 * @export
 * @interface QueryFieldType
 */
export interface QueryFieldType {
    /**
     * name of the field
     * @type {string}
     * @memberof QueryFieldType
     */
    name: string;
    /**
     * data type of the field
     * @type {string}
     * @memberof QueryFieldType
     */
    type: string;
}
/**
 *
 * @export
 * @interface QueryLambda
 */
export interface QueryLambda {
    /**
     * workspace of this Query Lambda
     * @type {string}
     * @memberof QueryLambda
     */
    workspace?: string;
    /**
     * user that created this Query Lambda
     * @type {string}
     * @memberof QueryLambda
     */
    last_updated_by?: string;
    /**
     * ISO-8601 date of when Query Lambda was last updated
     * @type {string}
     * @memberof QueryLambda
     */
    last_updated?: string;
    /**
     * Query Lambda name
     * @type {string}
     * @memberof QueryLambda
     */
    name?: string;
    /**
     * number of Query Lambda versions
     * @type {number}
     * @memberof QueryLambda
     */
    version_count?: number;
    /**
     * collections/aliases queried by underlying SQL query
     * @type {Array<string>}
     * @memberof QueryLambda
     */
    collections?: Array<string>;
    /**
     * Query Lambda version details for most recently created version
     * @type {QueryLambdaVersion}
     * @memberof QueryLambda
     */
    latest_version?: QueryLambdaVersion;
}
/**
 *
 * @export
 * @interface QueryLambdaMetric
 */
export interface QueryLambdaMetric {
    /**
     *
     * @type {string}
     * @memberof QueryLambdaMetric
     */
    query_lambda_name?: string;
    /**
     *
     * @type {number}
     * @memberof QueryLambdaMetric
     */
    avg_latency?: number;
    /**
     *
     * @type {number}
     * @memberof QueryLambdaMetric
     */
    avg_throttled_latency?: number;
    /**
     *
     * @type {number}
     * @memberof QueryLambdaMetric
     */
    query_count?: number;
    /**
     *
     * @type {number}
     * @memberof QueryLambdaMetric
     */
    err_count?: number;
    /**
     *
     * @type {number}
     * @memberof QueryLambdaMetric
     */
    err_count_5xx?: number;
    /**
     *
     * @type {number}
     * @memberof QueryLambdaMetric
     */
    err_count_4xx?: number;
    /**
     *
     * @type {number}
     * @memberof QueryLambdaMetric
     */
    time?: number;
}
/**
 *
 * @export
 * @interface QueryLambdaSql
 */
export interface QueryLambdaSql {
    /**
     * SQL text
     * @type {string}
     * @memberof QueryLambdaSql
     */
    query: string;
    /**
     * default parameters for this Query Lambda
     * @type {Array<QueryParameter>}
     * @memberof QueryLambdaSql
     */
    default_parameters?: Array<QueryParameter>;
}
/**
 *
 * @export
 * @interface QueryLambdaStats
 */
export interface QueryLambdaStats {
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof QueryLambdaStats
     */
    last_executed?: string;
    /**
     * user who last executed Query Lambda
     * @type {string}
     * @memberof QueryLambdaStats
     */
    last_executed_by?: string;
    /**
     * ISO-8601 date of last execution failure
     * @type {string}
     * @memberof QueryLambdaStats
     */
    last_execution_error?: string;
    /**
     * error message associated with last failed execution
     * @type {string}
     * @memberof QueryLambdaStats
     */
    last_execution_error_message?: string;
}
/**
 *
 * @export
 * @interface QueryLambdaTag
 */
export interface QueryLambdaTag {
    /**
     * name of Query Lambda tag
     * @type {string}
     * @memberof QueryLambdaTag
     */
    tag_name?: string;
    /**
     * query lambda version
     * @type {QueryLambdaVersion}
     * @memberof QueryLambdaTag
     */
    version?: QueryLambdaVersion;
}
/**
 *
 * @export
 * @interface QueryLambdaTagResponse
 */
export interface QueryLambdaTagResponse {
    /**
     * updated Query Lambda tag
     * @type {QueryLambdaTag}
     * @memberof QueryLambdaTagResponse
     */
    data?: QueryLambdaTag;
}
/**
 *
 * @export
 * @interface QueryLambdaVersion
 */
export interface QueryLambdaVersion {
    /**
     * workspace of this Query Lambda
     * @type {string}
     * @memberof QueryLambdaVersion
     */
    workspace?: string;
    /**
     * user that created this Query Lambda
     * @type {string}
     * @memberof QueryLambdaVersion
     */
    created_by?: string;
    /**
     * ISO-8601 date of when Query Lambda was created
     * @type {string}
     * @memberof QueryLambdaVersion
     */
    created_at?: string;
    /**
     * Query Lambda name
     * @type {string}
     * @memberof QueryLambdaVersion
     */
    name?: string;
    /**
     * Query Lambda version
     * @type {string}
     * @memberof QueryLambdaVersion
     */
    version?: string;
    /**
     * optional description
     * @type {string}
     * @memberof QueryLambdaVersion
     */
    description?: string;
    /**
     * Query Lambda SQL query
     * @type {QueryLambdaSql}
     * @memberof QueryLambdaVersion
     */
    sql?: QueryLambdaSql;
    /**
     * collections queried by underlying SQL query
     * @type {Array<string>}
     * @memberof QueryLambdaVersion
     */
    collections?: Array<string>;
    /**
     * status of this Query Lambda
     * @type {string}
     * @memberof QueryLambdaVersion
     */
    state?: QueryLambdaVersion.StateEnum;
    /**
     * stats related to this Query Lambda
     * @type {QueryLambdaStats}
     * @memberof QueryLambdaVersion
     */
    stats?: QueryLambdaStats;
}
/**
 * @export
 * @namespace QueryLambdaVersion
 */
export declare namespace QueryLambdaVersion {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        ACTIVE,
        INVALIDSQL
    }
}
/**
 *
 * @export
 * @interface QueryLambdaVersionResponse
 */
export interface QueryLambdaVersionResponse {
    /**
     * Query Lambda version details
     * @type {QueryLambdaVersion}
     * @memberof QueryLambdaVersionResponse
     */
    data?: QueryLambdaVersion;
}
/**
 *
 * @export
 * @interface QueryPageInfo
 */
export interface QueryPageInfo {
    /**
     * Query ID
     * @type {string}
     * @memberof QueryPageInfo
     */
    query_id?: string;
    /**
     * Either RUNNING or FINISHED.
     * @type {string}
     * @memberof QueryPageInfo
     */
    state?: QueryPageInfo.StateEnum;
    /**
     * User who ran the query
     * @type {string}
     * @memberof QueryPageInfo
     */
    run_by?: string;
    /**
     * Time the query results expire
     * @type {string}
     * @memberof QueryPageInfo
     */
    expires_at?: string;
    /**
     * Time the query was run
     * @type {string}
     * @memberof QueryPageInfo
     */
    run_at?: string;
    /**
     *
     * @type {Stats}
     * @memberof QueryPageInfo
     */
    stats?: Stats;
    /**
     *
     * @type {Pagination}
     * @memberof QueryPageInfo
     */
    pagination?: Pagination;
}
/**
 * @export
 * @namespace QueryPageInfo
 */
export declare namespace QueryPageInfo {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        RUNNING,
        FINISHED
    }
}
/**
 *
 * @export
 * @interface QueryPaginationResponse
 */
export interface QueryPaginationResponse {
    /**
     * List of documents returned by the query
     * @type {Array<any>}
     * @memberof QueryPaginationResponse
     */
    results?: Array<any>;
    /**
     * Total documents returned by the query
     * @type {number}
     * @memberof QueryPaginationResponse
     */
    results_total_doc_count?: number;
    /**
     * Pagination metadata
     * @type {PaginationInfo}
     * @memberof QueryPaginationResponse
     */
    pagination?: PaginationInfo;
}
/**
 *
 * @export
 * @interface QueryParameter
 */
export interface QueryParameter {
    /**
     * name of the field
     * @type {string}
     * @memberof QueryParameter
     */
    name: string;
    /**
     * data type of the field
     * @type {string}
     * @memberof QueryParameter
     */
    type: string;
    /**
     * literal value of the field
     * @type {string}
     * @memberof QueryParameter
     */
    value: string;
}
/**
 *
 * @export
 * @interface QueryRequest
 */
export interface QueryRequest {
    /**
     * Main query request body.
     * @type {QueryRequestSql}
     * @memberof QueryRequest
     */
    sql: QueryRequestSql;
}
/**
 *
 * @export
 * @interface QueryRequestSql
 */
export interface QueryRequestSql {
    /**
     * SQL query string.
     * @type {string}
     * @memberof QueryRequestSql
     */
    query: string;
    /**
     * Flag to enable warnings. Warnings can help debug query issues but negatively affect performance.
     * @type {boolean}
     * @memberof QueryRequestSql
     */
    generate_warnings?: boolean;
    /**
     * Flag to generate a performance profile for this query.
     * @type {boolean}
     * @memberof QueryRequestSql
     */
    profiling_enabled?: boolean;
    /**
     * List of named parameters.
     * @type {Array<QueryParameter>}
     * @memberof QueryRequestSql
     */
    parameters?: Array<QueryParameter>;
    /**
     * Row limit to use. Limits specified in the query text will override this default.
     * @type {number}
     * @memberof QueryRequestSql
     */
    default_row_limit?: number;
    /**
     * Flag to paginate and store the results of this query for later / sequential retrieval.
     * @type {boolean}
     * @memberof QueryRequestSql
     */
    paginate?: boolean;
    /**
     * Number of documents to return in addition to paginating for this query call. Only relevant if `paginate` flag is also set.
     * @type {number}
     * @memberof QueryRequestSql
     */
    initial_paginate_response_doc_count?: number;
    /**
     * If this query is being used for ingest transformations we add fixes to make it closer to what the rollup would actually do
     * @type {boolean}
     * @memberof QueryRequestSql
     */
    is_ingest_transformation_preview?: boolean;
}
/**
 *
 * @export
 * @interface QueryResponse
 */
export interface QueryResponse {
    /**
     * List of aliases referenced in the query.
     * @type {Array<QueryResponseAlias>}
     * @memberof QueryResponse
     */
    aliases?: Array<QueryResponseAlias>;
    /**
     * Unique ID for this query.
     * @type {string}
     * @memberof QueryResponse
     */
    query_id?: string;
    /**
     * List of collections referenced in the query.
     * @type {Array<string>}
     * @memberof QueryResponse
     */
    collections?: Array<string>;
    /**
     * Results from the query.
     * @type {Array<any>}
     * @memberof QueryResponse
     */
    results?: Array<any>;
    /**
     * Meta information about the query including execution latencies.
     * @type {QueryResponseStats}
     * @memberof QueryResponse
     */
    stats?: QueryResponseStats;
    /**
     * Warnings generated by the query. Only populated if `generate_warnings` is specified in the query request.
     * @type {Array<string>}
     * @memberof QueryResponse
     */
    warnings?: Array<string>;
    /**
     * Errors encountered while executing the query.
     * @type {Array<QueryError>}
     * @memberof QueryResponse
     */
    query_errors?: Array<QueryError>;
    /**
     * Meta information about each column in the result set. Not populated in `SELECT *` queries.
     * @type {Array<QueryFieldType>}
     * @memberof QueryResponse
     */
    column_fields?: Array<QueryFieldType>;
    /**
     * Number of results generated by the query
     * @type {number}
     * @memberof QueryResponse
     */
    results_total_doc_count?: number;
    /**
     * Pagination information. Only populated if `paginate` is specified in the query request.
     * @type {PaginationInfo}
     * @memberof QueryResponse
     */
    pagination?: PaginationInfo;
    /**
     * If this was a write query, this is the log offset the query was written to
     * @type {string}
     * @memberof QueryResponse
     */
    last_offset?: string;
}
/**
 *
 * @export
 * @interface QueryResponseAlias
 */
export interface QueryResponseAlias {
    /**
     * name of the alias
     * @type {string}
     * @memberof QueryResponseAlias
     */
    name: string;
    /**
     * list of fully qualified collection names referenced by the alias
     * @type {Array<string>}
     * @memberof QueryResponseAlias
     */
    collections: Array<string>;
}
/**
 *
 * @export
 * @interface QueryResponseStats
 */
export interface QueryResponseStats {
    /**
     * query time in milliseconds
     * @type {number}
     * @memberof QueryResponseStats
     */
    elapsed_time_ms?: number;
    /**
     * time query was throttled by admission control
     * @type {number}
     * @memberof QueryResponseStats
     */
    throttled_time_micros?: number;
}
/**
 *
 * @export
 * @interface QueryStats
 */
export interface QueryStats {
    /**
     * query time in milliseconds
     * @type {number}
     * @memberof QueryStats
     */
    elapsed_time_ms?: number;
    /**
     * rows scanned as part of query execution
     * @type {number}
     * @memberof QueryStats
     */
    rows_scanned?: number;
    /**
     * number of rows returned from the query
     * @type {number}
     * @memberof QueryStats
     */
    rows_returned?: number;
    /**
     * Statistics for each operator from query execution
     * @type {Array<OperatorStats>}
     * @memberof QueryStats
     */
    operators?: Array<OperatorStats>;
    /**
     * Statistics for each exchange source from query execution
     * @type {Array<RpcSourceStats>}
     * @memberof QueryStats
     */
    exchange_sources?: Array<RpcSourceStats>;
    /**
     * Statistics for each exchange sink from query execution
     * @type {Array<RpcSinkStats>}
     * @memberof QueryStats
     */
    exchange_sinks?: Array<RpcSinkStats>;
    /**
     * DOT graph representing the execution steps of this query
     * @type {string}
     * @memberof QueryStats
     */
    execution_graph?: string;
    /**
     * Execution plan (output of EXPLAIN) of this query
     * @type {string}
     * @memberof QueryStats
     */
    execution_plan?: string;
    /**
     * Information about each physical operator, like what fields it is fetching
     * @type {string}
     * @memberof QueryStats
     */
    operator_metadata?: string;
    /**
     * SQL text of Query that was executed
     * @type {string}
     * @memberof QueryStats
     */
    query_text?: string;
}
/**
 *
 * @export
 * @interface QueryStatsResponse
 */
export interface QueryStatsResponse {
    /**
     *
     * @type {QueryStats}
     * @memberof QueryStatsResponse
     */
    data?: QueryStats;
}
/**
 *
 * @export
 * @interface RateCard
 */
export interface RateCard {
    /**
     *
     * @type {boolean}
     * @memberof RateCard
     */
    active?: boolean;
    /**
     *
     * @type {number}
     * @memberof RateCard
     */
    small?: number;
    /**
     *
     * @type {number}
     * @memberof RateCard
     */
    medium?: number;
    /**
     *
     * @type {number}
     * @memberof RateCard
     */
    large?: number;
    /**
     *
     * @type {number}
     * @memberof RateCard
     */
    xlarge?: number;
    /**
     *
     * @type {number}
     * @memberof RateCard
     */
    xlarge2?: number;
    /**
     *
     * @type {number}
     * @memberof RateCard
     */
    xlarge4?: number;
    /**
     *
     * @type {number}
     * @memberof RateCard
     */
    xlarge8?: number;
    /**
     *
     * @type {number}
     * @memberof RateCard
     */
    xlarge16?: number;
}
/**
 *
 * @export
 * @interface RateCardResponse
 */
export interface RateCardResponse {
    /**
     *
     * @type {RateCard}
     * @memberof RateCardResponse
     */
    data?: RateCard;
}
/**
 *
 * @export
 * @interface RecordActivityRequest
 */
export interface RecordActivityRequest {
    /**
     * should this activity trigger a notification message
     * @type {boolean}
     * @memberof RecordActivityRequest
     */
    notify?: boolean;
    /**
     * message to be sent
     * @type {string}
     * @memberof RecordActivityRequest
     */
    message?: string;
    /**
     * details of the activity
     * @type {{ [key: string]: any; }}
     * @memberof RecordActivityRequest
     */
    details?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface RedshiftIntegration
 */
export interface RedshiftIntegration {
    /**
     * AWS access key credentials
     * @type {AwsAccessKey}
     * @memberof RedshiftIntegration
     */
    aws_access_key?: AwsAccessKey;
    /**
     * Username associated with Redshift cluster
     * @type {string}
     * @memberof RedshiftIntegration
     */
    username: string;
    /**
     * Password associated with Redshift cluster
     * @type {string}
     * @memberof RedshiftIntegration
     */
    password: string;
    /**
     * Redshift Cluster host
     * @type {string}
     * @memberof RedshiftIntegration
     */
    host: string;
    /**
     * Redshift Cluster port
     * @type {number}
     * @memberof RedshiftIntegration
     */
    port: number;
    /**
     * unload S3 bucket path
     * @type {string}
     * @memberof RedshiftIntegration
     */
    s3_bucket_path: string;
}
/**
 *
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * Unique identifier for the role.
     * @type {string}
     * @memberof Role
     */
    role_name?: string;
    /**
     * Description for the role.
     * @type {string}
     * @memberof Role
     */
    description?: string;
    /**
     * Email of the user who currently owns the role.
     * @type {string}
     * @memberof Role
     */
    owner_email?: string;
    /**
     * Email of the user who created the role.
     * @type {string}
     * @memberof Role
     */
    created_by?: string;
    /**
     * List of privileges associated with the role.
     * @type {Array<Privilege>}
     * @memberof Role
     */
    privileges?: Array<Privilege>;
    /**
     * ISO-8601 date of when the role was created.
     * @type {string}
     * @memberof Role
     */
    created_at?: string;
}
/**
 *
 * @export
 * @interface RoleResponse
 */
export interface RoleResponse {
    /**
     *
     * @type {Role}
     * @memberof RoleResponse
     */
    data?: Role;
}
/**
 *
 * @export
 * @interface RpcSinkStats
 */
export interface RpcSinkStats {
    /**
     * The id of the worker this operator ran on
     * @type {string}
     * @memberof RpcSinkStats
     */
    worker?: string;
    /**
     * The id of the fragment this operator belonged to
     * @type {number}
     * @memberof RpcSinkStats
     */
    fragment?: number;
    /**
     * The id of the task this operator belonged to
     * @type {string}
     * @memberof RpcSinkStats
     */
    task?: string;
    /**
     * The id of this operator in the task
     * @type {number}
     * @memberof RpcSinkStats
     */
    operator_id?: number;
    /**
     * The class name of upstream operator
     * @type {string}
     * @memberof RpcSinkStats
     */
    src_operator_name?: string;
    /**
     * Total bytes received from the input
     * @type {number}
     * @memberof RpcSinkStats
     */
    input_bytes?: number;
    /**
     * Maximum bytes received in one data chunk
     * @type {number}
     * @memberof RpcSinkStats
     */
    max_input_bytes?: number;
    /**
     * Total rows received from the input
     * @type {number}
     * @memberof RpcSinkStats
     */
    input_rows?: number;
    /**
     * Total data chunks received from the input
     * @type {number}
     * @memberof RpcSinkStats
     */
    input_data_chunks?: number;
    /**
     * Total data chunks sent to the output
     * @type {number}
     * @memberof RpcSinkStats
     */
    output_data_chunks?: number;
    /**
     * Total messages sent to the output
     * @type {number}
     * @memberof RpcSinkStats
     */
    output_messages?: number;
    /**
     * Total time in microseconds spent doing useful work
     * @type {number}
     * @memberof RpcSinkStats
     */
    processing_time_us?: number;
}
/**
 *
 * @export
 * @interface RpcSourceStats
 */
export interface RpcSourceStats {
    /**
     * The id of the worker this operator ran on
     * @type {string}
     * @memberof RpcSourceStats
     */
    worker?: string;
    /**
     * The id of the fragment this operator belonged to
     * @type {number}
     * @memberof RpcSourceStats
     */
    fragment?: number;
    /**
     * The id of the task this operator belonged to
     * @type {string}
     * @memberof RpcSourceStats
     */
    task?: string;
    /**
     * The id of this operator in the task
     * @type {number}
     * @memberof RpcSourceStats
     */
    operator_id?: number;
    /**
     * The class name of downstream operator
     * @type {string}
     * @memberof RpcSourceStats
     */
    dest_operator_name?: string;
    /**
     * Total bytes received from the input
     * @type {number}
     * @memberof RpcSourceStats
     */
    input_bytes?: number;
    /**
     * Maximum bytes received in one data chunk
     * @type {number}
     * @memberof RpcSourceStats
     */
    max_input_bytes?: number;
    /**
     * Total rows received from the input
     * @type {number}
     * @memberof RpcSourceStats
     */
    input_rows?: number;
    /**
     * Total data chunks received from the input
     * @type {number}
     * @memberof RpcSourceStats
     */
    input_data_chunks?: number;
    /**
     * Total messages received from the input
     * @type {number}
     * @memberof RpcSourceStats
     */
    input_messages?: number;
    /**
     * Total time in microseconds spent doing useful work
     * @type {number}
     * @memberof RpcSourceStats
     */
    processing_time_us?: number;
}
/**
 *
 * @export
 * @interface S3Integration
 */
export interface S3Integration {
    /**
     * credentials for an AWS access key integration
     * @type {AwsAccessKey}
     * @memberof S3Integration
     */
    aws_access_key?: AwsAccessKey;
    /**
     * details of an AWS cross-account role integration
     * @type {AwsRole}
     * @memberof S3Integration
     */
    aws_role?: AwsRole;
}
/**
 *
 * @export
 * @interface SegmentIntegration
 */
export interface SegmentIntegration {
    /**
     * segment connection string
     * @type {string}
     * @memberof SegmentIntegration
     */
    connection_string?: string;
}
/**
 *
 * @export
 * @interface SlowQuery
 */
export interface SlowQuery {
    /**
     *
     * @type {string}
     * @memberof SlowQuery
     */
    user?: string;
    /**
     *
     * @type {string}
     * @memberof SlowQuery
     */
    query_lambda_name?: string;
    /**
     *
     * @type {number}
     * @memberof SlowQuery
     */
    latency_millis?: number;
    /**
     *
     * @type {number}
     * @memberof SlowQuery
     */
    throttled_latency_micros?: number;
    /**
     *
     * @type {string}
     * @memberof SlowQuery
     */
    agent?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof SlowQuery
     */
    collections?: Array<string>;
    /**
     *
     * @type {Array<QueryResponseAlias>}
     * @memberof SlowQuery
     */
    aliases?: Array<QueryResponseAlias>;
    /**
     *
     * @type {string}
     * @memberof SlowQuery
     */
    query?: string;
    /**
     *
     * @type {string}
     * @memberof SlowQuery
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof SlowQuery
     */
    time?: number;
}
/**
 *
 * @export
 * @interface SlowQueryCount
 */
export interface SlowQueryCount {
    /**
     *
     * @type {number}
     * @memberof SlowQueryCount
     */
    count?: number;
    /**
     *
     * @type {number}
     * @memberof SlowQueryCount
     */
    time?: number;
}
/**
 * Details about the data source for the given collection. Only one of the following fields are allowed to be defined. Only collections can act as data sources for views.
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * name of integration to use
     * @type {string}
     * @memberof Source
     */
    integration_name: string;
    /**
     * configuration for ingestion from S3
     * @type {SourceS3}
     * @memberof Source
     */
    s3?: SourceS3;
    /**
     * configuration for ingestion from kinesis stream
     * @type {SourceKinesis}
     * @memberof Source
     */
    kinesis?: SourceKinesis;
    /**
     * configuration for ingestion from GCS
     * @type {SourceGcs}
     * @memberof Source
     */
    gcs?: SourceGcs;
    /**
     * configuration for ingestion from Redshift
     * @type {SourceRedshift}
     * @memberof Source
     */
    redshift?: SourceRedshift;
    /**
     * configuration for ingestion from  a dynamodb table
     * @type {SourceDynamoDb}
     * @memberof Source
     */
    dynamodb?: SourceDynamoDb;
    /**
     * file upload details
     * @type {SourceFileUpload}
     * @memberof Source
     */
    file_upload?: SourceFileUpload;
    /**
     * kafka collection identifier
     * @type {SourceKafka}
     * @memberof Source
     */
    kafka?: SourceKafka;
    /**
     * MongoDB collection details
     * @type {SourceMongoDb}
     * @memberof Source
     */
    mongodb?: SourceMongoDb;
    /**
     * the ingest status of this source
     * @type {Status}
     * @memberof Source
     */
    status?: Status;
    /**
     * format parameters for data from this source
     * @type {FormatParams}
     * @memberof Source
     */
    format_params?: FormatParams;
}
/**
 *
 * @export
 * @interface SourceConfig
 */
export interface SourceConfig {
    /**
     * dynamo source information
     * @type {SourceConfigDynamo}
     * @memberof SourceConfig
     */
    dynamo_config?: SourceConfigDynamo;
    /**
     * mongo source information
     * @type {SourceConfigMongo}
     * @memberof SourceConfig
     */
    mongo_config?: SourceConfigMongo;
}
/**
 *
 * @export
 * @interface SourceConfigDynamo
 */
export interface SourceConfigDynamo {
    /**
     * RCUs configured on source DynamoDb Table
     * @type {number}
     * @memberof SourceConfigDynamo
     */
    rcu?: number;
    /**
     * estimated time in seconds to scan DynamoDb Table
     * @type {number}
     * @memberof SourceConfigDynamo
     */
    estimated_time_seconds?: number;
    /**
     * size of DynamoDb Table in Bytes
     * @type {number}
     * @memberof SourceConfigDynamo
     */
    table_size_bytes?: number;
    /**
     * number of records in DynamoDb Table
     * @type {number}
     * @memberof SourceConfigDynamo
     */
    num_records?: number;
    /**
     * Whether point-in-time-recovery is enabled at the time of collection creation
     * @type {boolean}
     * @memberof SourceConfigDynamo
     */
    is_pitr_enabled?: boolean;
}
/**
 *
 * @export
 * @interface SourceConfigMongo
 */
export interface SourceConfigMongo {
    /**
     * size of MongoDB Collection in Bytes
     * @type {number}
     * @memberof SourceConfigMongo
     */
    table_size_bytes?: number;
    /**
     * number of documents in MongoDB Collection
     * @type {number}
     * @memberof SourceConfigMongo
     */
    num_records?: number;
}
/**
 *
 * @export
 * @interface SourceConfigRequest
 */
export interface SourceConfigRequest {
    /**
     * name of integration to use
     * @type {string}
     * @memberof SourceConfigRequest
     */
    integration_name: string;
    /**
     * configuration for ingestion from a DynamoDB table
     * @type {SourceDynamoDb}
     * @memberof SourceConfigRequest
     */
    dynamodb?: SourceDynamoDb;
    /**
     * configuration for ingestion from a MongoDB collection
     * @type {SourceMongoDb}
     * @memberof SourceConfigRequest
     */
    mongodb?: SourceMongoDb;
}
/**
 *
 * @export
 * @interface SourceConfigResponse
 */
export interface SourceConfigResponse {
    /**
     * source information that was requested
     * @type {SourceConfig}
     * @memberof SourceConfigResponse
     */
    data?: SourceConfig;
}
/**
 *
 * @export
 * @interface SourceDynamoDb
 */
export interface SourceDynamoDb {
    /**
     * AWS region name of DynamoDB table, by default us-west-2 is used
     * @type {string}
     * @memberof SourceDynamoDb
     */
    aws_region?: string;
    /**
     * name of DynamoDB table containing data
     * @type {string}
     * @memberof SourceDynamoDb
     */
    table_name: string;
    /**
     * DynamoDB source status v2
     * @type {StatusDynamoDbV2}
     * @memberof SourceDynamoDb
     */
    current_status?: StatusDynamoDbV2;
    /**
     * Max RCU usage for scan
     * @type {number}
     * @memberof SourceDynamoDb
     */
    rcu?: number;
    /**
     * DynamoDB source status
     * @type {StatusDynamoDb}
     * @memberof SourceDynamoDb
     */
    status?: StatusDynamoDb;
    /**
     * Whether to use DynamoDB Scan API for the initial scan
     * @type {boolean}
     * @memberof SourceDynamoDb
     */
    use_scan_api?: boolean;
}
/**
 *
 * @export
 * @interface SourceFileUpload
 */
export interface SourceFileUpload {
    /**
     * name of the file
     * @type {string}
     * @memberof SourceFileUpload
     */
    file_name: string;
    /**
     * size of the file in bytes
     * @type {number}
     * @memberof SourceFileUpload
     */
    file_size: number;
    /**
     * time of file upload
     * @type {string}
     * @memberof SourceFileUpload
     */
    file_upload_time: string;
}
/**
 *
 * @export
 * @interface SourceGcs
 */
export interface SourceGcs {
    /**
     * name of GCS bucket you want to ingest from
     * @type {string}
     * @memberof SourceGcs
     */
    bucket?: string;
    /**
     * Prefix that selects keys to ingest.
     * @type {string}
     * @memberof SourceGcs
     */
    prefix?: string;
    /**
     *
     * @type {number}
     * @memberof SourceGcs
     */
    object_count_downloaded?: number;
    /**
     *
     * @type {number}
     * @memberof SourceGcs
     */
    object_count_total?: number;
    /**
     *
     * @type {number}
     * @memberof SourceGcs
     */
    object_bytes_total?: number;
}
/**
 *
 * @export
 * @interface SourceKafka
 */
export interface SourceKafka {
    /**
     * The Kafka topic to be tailed
     * @type {string}
     * @memberof SourceKafka
     */
    kafka_topic_name: string;
    /**
     * Kafka source status
     * @type {StatusKafka}
     * @memberof SourceKafka
     */
    status?: StatusKafka;
    /**
     * Whether to use v3 integration
     * @type {boolean}
     * @memberof SourceKafka
     */
    use_v3?: boolean;
    /**
     * The offset reset policy. Required only for V3 collection.
     * @type {string}
     * @memberof SourceKafka
     */
    offset_reset_policy?: SourceKafka.OffsetResetPolicyEnum;
}
/**
 * @export
 * @namespace SourceKafka
 */
export declare namespace SourceKafka {
    /**
     * @export
     * @enum {string}
     */
    enum OffsetResetPolicyEnum {
        LATEST,
        EARLIEST
    }
}
/**
 *
 * @export
 * @interface SourceKinesis
 */
export interface SourceKinesis {
    /**
     * AWS region name of Kinesis stream, by default us-west-2 is used
     * @type {string}
     * @memberof SourceKinesis
     */
    aws_region?: string;
    /**
     * name of kinesis stream
     * @type {string}
     * @memberof SourceKinesis
     */
    stream_name: string;
    /**
     * set of fields that correspond to a DMS primary key
     * @type {Array<string>}
     * @memberof SourceKinesis
     */
    dms_primary_key?: Array<string>;
}
/**
 *
 * @export
 * @interface SourceMongoDb
 */
export interface SourceMongoDb {
    /**
     * MongoDB database name containing this collection
     * @type {string}
     * @memberof SourceMongoDb
     */
    database_name: string;
    /**
     * MongoDB collection name
     * @type {string}
     * @memberof SourceMongoDb
     */
    collection_name: string;
    /**
     * MongoDB source status
     * @type {StatusMongoDb}
     * @memberof SourceMongoDb
     */
    status?: StatusMongoDb;
}
/**
 *
 * @export
 * @interface SourceRedshift
 */
export interface SourceRedshift {
    /**
     * name of the database in Redshift Cluster
     * @type {string}
     * @memberof SourceRedshift
     */
    database: string;
    /**
     * schema which contains the Redshift table
     * @type {string}
     * @memberof SourceRedshift
     */
    schema: string;
    /**
     * name of Redshift table containing data
     * @type {string}
     * @memberof SourceRedshift
     */
    table_name: string;
    /**
     * field in Redshift source table to monitor for updates
     * @type {string}
     * @memberof SourceRedshift
     */
    incremental_field?: string;
}
/**
 *
 * @export
 * @interface SourceS3
 */
export interface SourceS3 {
    /**
     * AWS credential with ListObjects and GetObject access
     * @type {string}
     * @memberof SourceS3
     */
    access_key?: string;
    /**
     * AWS credential with ListObjects and GetObject access
     * @type {string}
     * @memberof SourceS3
     */
    secret_access?: string;
    /**
     * Prefix that selects keys to ingest.
     * @type {string}
     * @memberof SourceS3
     */
    prefix?: string;
    /**
     * Pattern that selects keys to ingest.
     * @type {string}
     * @memberof SourceS3
     */
    pattern?: string;
    /**
     * AWS region containing source bucket
     * @type {string}
     * @memberof SourceS3
     */
    region?: string;
    /**
     * address of S3 bucket containing data
     * @type {string}
     * @memberof SourceS3
     */
    bucket: string;
    /**
     * list of prefixes to paths from which data should be ingested
     * @type {Array<string>}
     * @memberof SourceS3
     */
    prefixes: Array<string>;
    /**
     * do not use
     * @type {string}
     * @memberof SourceS3
     */
    format?: SourceS3.FormatEnum;
    /**
     * custom transformation on data field
     * @type {Array<FieldMask>}
     * @memberof SourceS3
     */
    mappings?: Array<FieldMask>;
    /**
     *
     * @type {number}
     * @memberof SourceS3
     */
    object_count_downloaded?: number;
    /**
     *
     * @type {number}
     * @memberof SourceS3
     */
    object_count_total?: number;
    /**
     *
     * @type {number}
     * @memberof SourceS3
     */
    object_bytes_total?: number;
}
/**
 * @export
 * @namespace SourceS3
 */
export declare namespace SourceS3 {
    /**
     * @export
     * @enum {string}
     */
    enum FormatEnum {
        JSON
    }
}
/**
 *
 * @export
 * @interface SqlExpression
 */
export interface SqlExpression {
    /**
     * The name of a sql function
     * @type {string}
     * @memberof SqlExpression
     */
    sql?: string;
}
/**
 *
 * @export
 * @interface Stats
 */
export interface Stats {
    /**
     * Time taken for query to run in milliseconds.
     * @type {number}
     * @memberof Stats
     */
    elapsed_time_ms?: number;
    /**
     * Throttled time for query to run in milliseconds.
     * @type {number}
     * @memberof Stats
     */
    throttled_time_ms?: number;
    /**
     * Number of docs returned by this query.
     * @type {number}
     * @memberof Stats
     */
    doc_count?: number;
    /**
     * Number of bytes in the query result set.
     * @type {number}
     * @memberof Stats
     */
    size_bytes?: number;
}
/**
 *
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * Status of the Source's ingestion, one of: INITIALIZING, WATCHING, PROCESSING, COMPLETED, ERROR
     * @type {string}
     * @memberof Status
     */
    state?: Status.StateEnum;
    /**
     * state message
     * @type {string}
     * @memberof Status
     */
    message?: string;
    /**
     * ISO-8601 date when source was last processed
     * @type {string}
     * @memberof Status
     */
    last_processed_at?: string;
    /**
     * last source item processed by ingester
     * @type {string}
     * @memberof Status
     */
    last_processed_item?: string;
    /**
     * Total items processed of source
     * @type {number}
     * @memberof Status
     */
    total_processed_items?: number;
}
/**
 * @export
 * @namespace Status
 */
export declare namespace Status {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        INITIALIZING,
        WATCHING,
        PROCESSING,
        COMPLETED,
        ERROR
    }
}
/**
 *
 * @export
 * @interface StatusDynamoDb
 */
export interface StatusDynamoDb {
    /**
     * DynamoDB scan start time
     * @type {string}
     * @memberof StatusDynamoDb
     */
    scan_start_time?: string;
    /**
     * DynamoDb scan end time
     * @type {string}
     * @memberof StatusDynamoDb
     */
    scan_end_time?: string;
    /**
     * Number of records inserted using scan
     * @type {number}
     * @memberof StatusDynamoDb
     */
    scan_records_processed?: number;
    /**
     * Number of records in DynamoDB table at time of scan
     * @type {number}
     * @memberof StatusDynamoDb
     */
    scan_total_records?: number;
    /**
     * state of current ingest for this table
     * @type {string}
     * @memberof StatusDynamoDb
     */
    state?: StatusDynamoDb.StateEnum;
    /**
     * ISO-8601 date when source was last processed
     * @type {string}
     * @memberof StatusDynamoDb
     */
    stream_last_processed_at?: string;
}
/**
 * @export
 * @namespace StatusDynamoDb
 */
export declare namespace StatusDynamoDb {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        INITIALIZING,
        SCANNINGTABLE,
        PROCESSINGSTREAM
    }
}
/**
 *
 * @export
 * @interface StatusDynamoDbV2
 */
export interface StatusDynamoDbV2 {
    /**
     *
     * @type {number}
     * @memberof StatusDynamoDbV2
     */
    initial_dump_completion_percentage?: number;
    /**
     * state of current ingest for this table
     * @type {string}
     * @memberof StatusDynamoDbV2
     */
    state?: StatusDynamoDbV2.StateEnum;
    /**
     * ISO-8601 date when source was last processed
     * @type {string}
     * @memberof StatusDynamoDbV2
     */
    stream_last_processed_at?: string;
}
/**
 * @export
 * @namespace StatusDynamoDbV2
 */
export declare namespace StatusDynamoDbV2 {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        INITIALIZING,
        SCANNING,
        EXPORTINGTOS3,
        DOWNLOADINGFROMS3,
        PROCESSINGSTREAM
    }
}
/**
 *
 * @export
 * @interface StatusKafka
 */
export interface StatusKafka {
    /**
     * State of the Kafka source
     * @type {string}
     * @memberof StatusKafka
     */
    state?: StatusKafka.StateEnum;
    /**
     * Time at which the last document was consumed from Kafka
     * @type {string}
     * @memberof StatusKafka
     */
    last_consumed_time?: string;
    /**
     * Number of documents consumed by this Kafka topic
     * @type {number}
     * @memberof StatusKafka
     */
    num_documents_processed?: number;
    /**
     * Status info per partition
     * @type {Array<StatusKafkaPartition>}
     * @memberof StatusKafka
     */
    kafka_partitions?: Array<StatusKafkaPartition>;
}
/**
 * @export
 * @namespace StatusKafka
 */
export declare namespace StatusKafka {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        NODOCSYET,
        ACTIVE,
        DORMANT
    }
}
/**
 *
 * @export
 * @interface StatusKafkaPartition
 */
export interface StatusKafkaPartition {
    /**
     * The number of this partition
     * @type {number}
     * @memberof StatusKafkaPartition
     */
    partition_number?: number;
    /**
     * Latest offset of partition
     * @type {number}
     * @memberof StatusKafkaPartition
     */
    partition_offset?: number;
}
/**
 *
 * @export
 * @interface StatusMongoDb
 */
export interface StatusMongoDb {
    /**
     * MongoDB scan start time
     * @type {string}
     * @memberof StatusMongoDb
     */
    scan_start_time?: string;
    /**
     * MongoDB scan end time
     * @type {string}
     * @memberof StatusMongoDb
     */
    scan_end_time?: string;
    /**
     * Number of records inserted using scan
     * @type {number}
     * @memberof StatusMongoDb
     */
    scan_records_processed?: number;
    /**
     * Number of records in MongoDB table at time of scan
     * @type {number}
     * @memberof StatusMongoDb
     */
    scan_total_records?: number;
    /**
     * state of current ingest for this table
     * @type {string}
     * @memberof StatusMongoDb
     */
    state?: StatusMongoDb.StateEnum;
    /**
     * ISO-8601 date when new insert from source was last processed
     * @type {string}
     * @memberof StatusMongoDb
     */
    stream_last_insert_processed_at?: string;
    /**
     * ISO-8601 date when update from source was last processed
     * @type {string}
     * @memberof StatusMongoDb
     */
    stream_last_update_processed_at?: string;
    /**
     * ISO-8601 date when delete from source was last processed
     * @type {string}
     * @memberof StatusMongoDb
     */
    stream_last_delete_processed_at?: string;
    /**
     * Number of new records inserted using stream
     * @type {number}
     * @memberof StatusMongoDb
     */
    stream_records_inserted?: number;
    /**
     * Number of new records updated using stream
     * @type {number}
     * @memberof StatusMongoDb
     */
    stream_records_updated?: number;
    /**
     * Number of new records deleted using stream
     * @type {number}
     * @memberof StatusMongoDb
     */
    stream_records_deleted?: number;
}
/**
 * @export
 * @namespace StatusMongoDb
 */
export declare namespace StatusMongoDb {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        INITIALIZING,
        SCANNINGTABLE,
        PROCESSINGSTREAM
    }
}
/**
 *
 * @export
 * @interface StatusResponse
 */
export interface StatusResponse {
    /**
     *
     * @type {string}
     * @memberof StatusResponse
     */
    message?: string;
}
/**
 *
 * @export
 * @interface TelemetryRequest
 */
export interface TelemetryRequest {
    /**
     * event details
     * @type {{ [key: string]: any; }}
     * @memberof TelemetryRequest
     */
    event?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface TimeSeriesMetrics
 */
export interface TimeSeriesMetrics {
    /**
     *
     * @type {string}
     * @memberof TimeSeriesMetrics
     */
    type?: TimeSeriesMetrics.TypeEnum;
    /**
     *
     * @type {{ [key: string]: VirtualInstanceMetric; }}
     * @memberof TimeSeriesMetrics
     */
    virtual_instance_metrics?: {
        [key: string]: VirtualInstanceMetric;
    };
    /**
     *
     * @type {{ [key: string]: VirtualInstanceStorageMetric; }}
     * @memberof TimeSeriesMetrics
     */
    virtual_instance_storage_metrics?: {
        [key: string]: VirtualInstanceStorageMetric;
    };
    /**
     *
     * @type {{ [key: string]: VirtualInstanceQueryMetric; }}
     * @memberof TimeSeriesMetrics
     */
    virtual_instance_query_metrics?: {
        [key: string]: VirtualInstanceQueryMetric;
    };
    /**
     *
     * @type {{ [key: string]: Array<QueryLambdaMetric>; }}
     * @memberof TimeSeriesMetrics
     */
    query_lambda_metrics?: {
        [key: string]: Array<QueryLambdaMetric>;
    };
    /**
     *
     * @type {{ [key: string]: Array<CollectionMetric>; }}
     * @memberof TimeSeriesMetrics
     */
    collection_metrics?: {
        [key: string]: Array<CollectionMetric>;
    };
    /**
     *
     * @type {{ [key: string]: SlowQueryCount; }}
     * @memberof TimeSeriesMetrics
     */
    slow_query_counts?: {
        [key: string]: SlowQueryCount;
    };
    /**
     *
     * @type {Array<SlowQuery>}
     * @memberof TimeSeriesMetrics
     */
    slow_queries?: Array<SlowQuery>;
    /**
     *
     * @type {number}
     * @memberof TimeSeriesMetrics
     */
    query_count?: number;
    /**
     *
     * @type {number}
     * @memberof TimeSeriesMetrics
     */
    percentile_query_latency?: number;
    /**
     *
     * @type {number}
     * @memberof TimeSeriesMetrics
     */
    collection_bulk_ingest_cpu?: number;
}
/**
 * @export
 * @namespace TimeSeriesMetrics
 */
export declare namespace TimeSeriesMetrics {
    /**
     * @export
     * @enum {string}
     */
    enum TypeEnum {
        COLLECTION,
        QUERYLAMBDA,
        VIRTUALINSTANCE,
        VIRTUALINSTANCEQUERY,
        VIRTUALINSTANCESTORAGE,
        SLOWQUERYCOUNT,
        SLOWQUERIES,
        PERCENTILEQUERYLATENCY,
        QUERYCOUNT,
        COLLECTIONBULKINGESTCPU
    }
}
/**
 *
 * @export
 * @interface TimeSeriesMetricsResponse
 */
export interface TimeSeriesMetricsResponse {
    /**
     *
     * @type {TimeSeriesMetrics}
     * @memberof TimeSeriesMetricsResponse
     */
    data?: TimeSeriesMetrics;
}
/**
 *
 * @export
 * @interface TransferOwnershipRequest
 */
export interface TransferOwnershipRequest {
    /**
     * email of new owner
     * @type {string}
     * @memberof TransferOwnershipRequest
     */
    new_owner?: string;
}
/**
 * Notification preferences for the user.
 * @export
 * @interface UnsubscribePreference
 */
export interface UnsubscribePreference {
    /**
     * The type of notification to be unsubscribed from.
     * @type {string}
     * @memberof UnsubscribePreference
     */
    notificationType: string;
}
/**
 *
 * @export
 * @interface UpdateAliasRequest
 */
export interface UpdateAliasRequest {
    /**
     * optional description
     * @type {string}
     * @memberof UpdateAliasRequest
     */
    description?: string;
    /**
     * list of fully qualified collection names referenced by alias
     * @type {Array<string>}
     * @memberof UpdateAliasRequest
     */
    collections: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateApiKeyRequest
 */
export interface UpdateApiKeyRequest {
    /**
     * State that the api key should be set to.
     * @type {string}
     * @memberof UpdateApiKeyRequest
     */
    state?: UpdateApiKeyRequest.StateEnum;
}
/**
 * @export
 * @namespace UpdateApiKeyRequest
 */
export declare namespace UpdateApiKeyRequest {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        ACTIVE,
        SUSPENDED
    }
}
/**
 *
 * @export
 * @interface UpdateApiKeyResponse
 */
export interface UpdateApiKeyResponse {
    /**
     * The API key that was updated.
     * @type {ApiKey}
     * @memberof UpdateApiKeyResponse
     */
    data?: ApiKey;
}
/**
 *
 * @export
 * @interface UpdateOrgMfaSettingsRequest
 */
export interface UpdateOrgMfaSettingsRequest {
    /**
     * org is MFA restricted
     * @type {boolean}
     * @memberof UpdateOrgMfaSettingsRequest
     */
    mfa_restricted?: boolean;
}
/**
 *
 * @export
 * @interface UpdateOrgPaymentMethodRequest
 */
export interface UpdateOrgPaymentMethodRequest {
    /**
     * Stripe source
     * @type {string}
     * @memberof UpdateOrgPaymentMethodRequest
     */
    source?: string;
}
/**
 *
 * @export
 * @interface UpdateQueryLambdaRequest
 */
export interface UpdateQueryLambdaRequest {
    /**
     * optional description
     * @type {string}
     * @memberof UpdateQueryLambdaRequest
     */
    description?: string;
    /**
     * Query Lambda SQL query
     * @type {QueryLambdaSql}
     * @memberof UpdateQueryLambdaRequest
     */
    sql?: QueryLambdaSql;
}
/**
 *
 * @export
 * @interface UpdateRoleRequest
 */
export interface UpdateRoleRequest {
    /**
     * Description for the role.
     * @type {string}
     * @memberof UpdateRoleRequest
     */
    description?: string;
    /**
     * List of privileges that will be associated with the role.
     * @type {Array<Privilege>}
     * @memberof UpdateRoleRequest
     */
    privileges?: Array<Privilege>;
}
/**
 *
 * @export
 * @interface UpdateSsoRequest
 */
export interface UpdateSsoRequest {
    /**
     * x09 SAML certificate
     * @type {string}
     * @memberof UpdateSsoRequest
     */
    cert?: string;
    /**
     * SSO provided endpoint to trigger login
     * @type {string}
     * @memberof UpdateSsoRequest
     */
    sign_in_endpoint?: string;
    /**
     * auto provision accounts for users in domain
     * @type {boolean}
     * @memberof UpdateSsoRequest
     */
    auto_provision?: boolean;
    /**
     * auto provision accounts with this role
     * @type {string}
     * @memberof UpdateSsoRequest
     */
    auto_provision_role?: string;
    /**
     * force sso as only auth mechanism for org
     * @type {boolean}
     * @memberof UpdateSsoRequest
     */
    sso_only?: boolean;
}
/**
 *
 * @export
 * @interface UpdateUnsubscribePreferencesRequest
 */
export interface UpdateUnsubscribePreferencesRequest {
    /**
     * List of notification preferences
     * @type {Array<UnsubscribePreference>}
     * @memberof UpdateUnsubscribePreferencesRequest
     */
    data?: Array<UnsubscribePreference>;
}
/**
 *
 * @export
 * @interface UpdateUnsubscribePreferencesResponse
 */
export interface UpdateUnsubscribePreferencesResponse {
    /**
     * List of notification preferences
     * @type {Array<UnsubscribePreference>}
     * @memberof UpdateUnsubscribePreferencesResponse
     */
    data?: Array<UnsubscribePreference>;
}
/**
 *
 * @export
 * @interface UpdateUserNuxRequest
 */
export interface UpdateUserNuxRequest {
    /**
     * data integration for this user's nux
     * @type {string}
     * @memberof UpdateUserNuxRequest
     */
    data_integration?: UpdateUserNuxRequest.DataIntegrationEnum;
    /**
     * way in which user wants to export query in nux
     * @type {string}
     * @memberof UpdateUserNuxRequest
     */
    query_integration_type?: UpdateUserNuxRequest.QueryIntegrationTypeEnum;
    /**
     * specific query integration for this user's nux
     * @type {string}
     * @memberof UpdateUserNuxRequest
     */
    query_integration?: UpdateUserNuxRequest.QueryIntegrationEnum;
    /**
     * boolean for if user has dismissed nux
     * @type {boolean}
     * @memberof UpdateUserNuxRequest
     */
    dismissed_nux?: boolean;
}
/**
 * @export
 * @namespace UpdateUserNuxRequest
 */
export declare namespace UpdateUserNuxRequest {
    /**
     * @export
     * @enum {string}
     */
    enum DataIntegrationEnum {
        S3,
        KINESIS,
        DYNAMODB,
        GCS,
        REDSHIFT,
        KAFKA,
        FILE,
        WRITE,
        PUBLIC,
        MONGODB,
        RDSMYSQL,
        RDSORACLE,
        RDSPOSTGRES,
        UNKNOWN
    }
    /**
     * @export
     * @enum {string}
     */
    enum QueryIntegrationTypeEnum {
        VIZ,
        CODE,
        UNKNOWN
    }
    /**
     * @export
     * @enum {string}
     */
    enum QueryIntegrationEnum {
        GRAFANA,
        REDASH,
        SUPERSET,
        TABLEAU,
        GOLANG,
        JAVA,
        NODEJS,
        PYTHON,
        RLANG,
        REST,
        RETOOL,
        UNKNOWN
    }
}
/**
 *
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * user first name
     * @type {string}
     * @memberof UpdateUserRequest
     */
    first_name?: string;
    /**
     * user last name
     * @type {string}
     * @memberof UpdateUserRequest
     */
    last_name?: string;
    /**
     * user phone number
     * @type {string}
     * @memberof UpdateUserRequest
     */
    phone_number?: string;
    /**
     * number of times to prompt user for demo
     * @type {number}
     * @memberof UpdateUserRequest
     */
    demo_remaining_prompts?: number;
    /**
     * New list of roles for a given user
     * @type {Array<string>}
     * @memberof UpdateUserRequest
     */
    roles?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateViewRequest
 */
export interface UpdateViewRequest {
    /**
     * optional description
     * @type {string}
     * @memberof UpdateViewRequest
     */
    description?: string;
    /**
     * SQL for this view
     * @type {string}
     * @memberof UpdateViewRequest
     */
    query: string;
}
/**
 *
 * @export
 * @interface UpdateViewResponse
 */
export interface UpdateViewResponse {
    /**
     * view that was updated
     * @type {View}
     * @memberof UpdateViewResponse
     */
    data?: View;
}
/**
 *
 * @export
 * @interface UpdateVirtualInstanceRequest
 */
export interface UpdateVirtualInstanceRequest {
    /**
     * requested virtual instance size
     * @type {string}
     * @memberof UpdateVirtualInstanceRequest
     */
    new_size?: UpdateVirtualInstanceRequest.NewSizeEnum;
    /**
     * requested virtual instance type
     * @type {string}
     * @memberof UpdateVirtualInstanceRequest
     */
    new_type?: UpdateVirtualInstanceRequest.NewTypeEnum;
    /**
     * whether monitoring should be enabled for this virtual instance
     * @type {boolean}
     * @memberof UpdateVirtualInstanceRequest
     */
    monitoring_enabled?: boolean;
}
/**
 * @export
 * @namespace UpdateVirtualInstanceRequest
 */
export declare namespace UpdateVirtualInstanceRequest {
    /**
     * @export
     * @enum {string}
     */
    enum NewSizeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
    /**
     * @export
     * @enum {string}
     */
    enum NewTypeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
}
/**
 *
 * @export
 * @interface UpdateVirtualInstanceResponse
 */
export interface UpdateVirtualInstanceResponse {
    /**
     * virtual instance that was switched
     * @type {VirtualInstance}
     * @memberof UpdateVirtualInstanceResponse
     */
    data?: VirtualInstance;
}
/**
 *
 * @export
 * @interface UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     * information about the file uploaded
     * @type {FileUploadStatus}
     * @memberof UploadFileResponse
     */
    data?: FileUploadStatus;
}
/**
 *
 * @export
 * @interface Usage
 */
export interface Usage {
    /**
     *
     * @type {number}
     * @memberof Usage
     */
    byte_minutes?: number;
    /**
     *
     * @type {number}
     * @memberof Usage
     */
    price?: number;
    /**
     *
     * @type {number}
     * @memberof Usage
     */
    gb_hours?: number;
    /**
     *
     * @type {number}
     * @memberof Usage
     */
    gb_months: number;
    /**
     *
     * @type {number}
     * @memberof Usage
     */
    total_cost: number;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof User
     */
    created_at?: string;
    /**
     * user email
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * user first name
     * @type {string}
     * @memberof User
     */
    first_name?: string;
    /**
     * user last name
     * @type {string}
     * @memberof User
     */
    last_name?: string;
    /**
     * user phone number
     * @type {string}
     * @memberof User
     */
    phone_number?: string;
    /**
     * List of roles for a given user
     * @type {Array<string>}
     * @memberof User
     */
    roles?: Array<string>;
    /**
     * state of user - NEW / ACTIVE
     * @type {string}
     * @memberof User
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    org?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    invite_state?: User.InviteStateEnum;
    /**
     *
     * @type {Array<Organization>}
     * @memberof User
     */
    orgs?: Array<Organization>;
    /**
     *
     * @type {Array<OrgMembership>}
     * @memberof User
     */
    org_memberships?: Array<OrgMembership>;
}
/**
 * @export
 * @namespace User
 */
export declare namespace User {
    /**
     * @export
     * @enum {string}
     */
    enum InviteStateEnum {
        PENDING,
        ACCEPTED,
        EXPIRED,
        CANCELLED
    }
}
/**
 *
 * @export
 * @interface UserNux
 */
export interface UserNux {
    /**
     * user email
     * @type {string}
     * @memberof UserNux
     */
    email: string;
    /**
     * data integration for this user's nux
     * @type {string}
     * @memberof UserNux
     */
    data_integration?: UserNux.DataIntegrationEnum;
    /**
     * way in which user wants to export query in nux
     * @type {string}
     * @memberof UserNux
     */
    query_integration_type?: UserNux.QueryIntegrationTypeEnum;
    /**
     * specific query integration for this user's nux
     * @type {string}
     * @memberof UserNux
     */
    query_integration?: UserNux.QueryIntegrationEnum;
    /**
     * boolean for if user has dismissed nux
     * @type {boolean}
     * @memberof UserNux
     */
    dismissed_nux?: boolean;
}
/**
 * @export
 * @namespace UserNux
 */
export declare namespace UserNux {
    /**
     * @export
     * @enum {string}
     */
    enum DataIntegrationEnum {
        S3,
        KINESIS,
        DYNAMODB,
        GCS,
        REDSHIFT,
        KAFKA,
        FILE,
        WRITE,
        PUBLIC,
        MONGODB,
        RDSMYSQL,
        RDSORACLE,
        RDSPOSTGRES,
        UNKNOWN
    }
    /**
     * @export
     * @enum {string}
     */
    enum QueryIntegrationTypeEnum {
        VIZ,
        CODE,
        UNKNOWN
    }
    /**
     * @export
     * @enum {string}
     */
    enum QueryIntegrationEnum {
        GRAFANA,
        REDASH,
        SUPERSET,
        TABLEAU,
        GOLANG,
        JAVA,
        NODEJS,
        PYTHON,
        RLANG,
        REST,
        RETOOL,
        UNKNOWN
    }
}
/**
 *
 * @export
 * @interface UserQuery
 */
export interface UserQuery {
    /**
     * success/invalid status of query
     * @type {string}
     * @memberof UserQuery
     */
    label?: string;
    /**
     * query that user executed
     * @type {string}
     * @memberof UserQuery
     */
    query_sql?: string;
    /**
     * ISO 8601 time at which the query was executed
     * @type {string}
     * @memberof UserQuery
     */
    query_time?: string;
}
/**
 *
 * @export
 * @interface UserQueryHistoryResponse
 */
export interface UserQueryHistoryResponse {
    /**
     * query history of this user
     * @type {Array<UserQuery>}
     * @memberof UserQueryHistoryResponse
     */
    data?: Array<UserQuery>;
}
/**
 *
 * @export
 * @interface UserState
 */
export interface UserState {
    /**
     * state of user
     * @type {string}
     * @memberof UserState
     */
    data?: UserState.DataEnum;
    /**
     * number of prompts left for user
     * @type {number}
     * @memberof UserState
     */
    demo_remaining_prompts?: number;
}
/**
 * @export
 * @namespace UserState
 */
export declare namespace UserState {
    /**
     * @export
     * @enum {string}
     */
    enum DataEnum {
        NEW,
        ACTIVE
    }
}
/**
 *
 * @export
 * @interface ValidateExpressionRequest
 */
export interface ValidateExpressionRequest {
    /**
     * SQL expression to be validated
     * @type {string}
     * @memberof ValidateExpressionRequest
     */
    sql_expression?: string;
}
/**
 *
 * @export
 * @interface ValidateExpressionResponse
 */
export interface ValidateExpressionResponse {
    /**
     * input parameters of validated SQL expression
     * @type {Array<string>}
     * @memberof ValidateExpressionResponse
     */
    parameters?: Array<string>;
}
/**
 *
 * @export
 * @interface ValidateFieldMappingQueryRequest
 */
export interface ValidateFieldMappingQueryRequest {
    /**
     * Field mapping query to be validated
     * @type {string}
     * @memberof ValidateFieldMappingQueryRequest
     */
    sql?: string;
    /**
     * is field mapping for an insert only collection
     * @type {boolean}
     * @memberof ValidateFieldMappingQueryRequest
     */
    insert_only?: boolean;
}
/**
 *
 * @export
 * @interface ValidateFieldMappingQueryResponse
 */
export interface ValidateFieldMappingQueryResponse {
    /**
     * Whether the field mapping query is valid
     * @type {boolean}
     * @memberof ValidateFieldMappingQueryResponse
     */
    valid?: boolean;
    /**
     * The reason if field mapping query is invalid
     * @type {string}
     * @memberof ValidateFieldMappingQueryResponse
     */
    reason?: string;
    /**
     *
     * @type {boolean}
     * @memberof ValidateFieldMappingQueryResponse
     */
    is_rollup?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ValidateFieldMappingQueryResponse
     */
    has_id_mapping?: boolean;
}
/**
 *
 * @export
 * @interface ValidateQueryResponse
 */
export interface ValidateQueryResponse {
    /**
     * list of aliases specifiedQueryRunner and referenced collections in query
     * @type {Array<QueryResponseAlias>}
     * @memberof ValidateQueryResponse
     */
    aliases?: Array<QueryResponseAlias>;
    /**
     * list of views specified in query
     * @type {Array<string>}
     * @memberof ValidateQueryResponse
     */
    views?: Array<string>;
    /**
     * list of collection specified in query
     * @type {Array<string>}
     * @memberof ValidateQueryResponse
     */
    name: Array<string>;
    /**
     * list of collection specified in query
     * @type {Array<string>}
     * @memberof ValidateQueryResponse
     */
    collections: Array<string>;
    /**
     * list of parameters specified in query
     * @type {Array<string>}
     * @memberof ValidateQueryResponse
     */
    parameters: Array<string>;
}
/**
 *
 * @export
 * @interface View
 */
export interface View {
    /**
     *
     * @type {string}
     * @memberof View
     */
    path?: string;
    /**
     * name of the view
     * @type {string}
     * @memberof View
     */
    name?: string;
    /**
     * view description
     * @type {string}
     * @memberof View
     */
    description?: string;
    /**
     * name of the workspace
     * @type {string}
     * @memberof View
     */
    workspace?: string;
    /**
     * email of the creator
     * @type {string}
     * @memberof View
     */
    creator_email?: string;
    /**
     * email of the owner
     * @type {string}
     * @memberof View
     */
    owner_email?: string;
    /**
     * SQL query of the view
     * @type {string}
     * @memberof View
     */
    query_sql?: string;
    /**
     * list of entities referenced by view. An entity can be a view, alias or collection
     * @type {Array<string>}
     * @memberof View
     */
    entities?: Array<string>;
    /**
     * state of the view
     * @type {string}
     * @memberof View
     */
    state?: View.StateEnum;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof View
     */
    created_at?: string;
    /**
     * ISO-8601 date
     * @type {string}
     * @memberof View
     */
    modified_at?: string;
}
/**
 * @export
 * @namespace View
 */
export declare namespace View {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        CREATED,
        SYNCING,
        DELETED
    }
}
/**
 *
 * @export
 * @interface VirtualInstance
 */
export interface VirtualInstance {
    /**
     * virtual instance state
     * @type {string}
     * @memberof VirtualInstance
     */
    state?: VirtualInstance.StateEnum;
    /**
     * virtual instance current type
     * @type {string}
     * @memberof VirtualInstance
     */
    current_type?: VirtualInstance.CurrentTypeEnum;
    /**
     * virtual instance desired type
     * @type {string}
     * @memberof VirtualInstance
     */
    desired_type?: VirtualInstance.DesiredTypeEnum;
    /**
     * virtual instance current size
     * @type {string}
     * @memberof VirtualInstance
     */
    current_size?: VirtualInstance.CurrentSizeEnum;
    /**
     * virtual instance desired size
     * @type {string}
     * @memberof VirtualInstance
     */
    desired_size?: VirtualInstance.DesiredSizeEnum;
    /**
     * ISO-8601 date of when virtual instance size was last updated
     * @type {string}
     * @memberof VirtualInstance
     */
    last_updated?: string;
    /**
     * estimated duration in minutes of last virtual instance size update
     * @type {number}
     * @memberof VirtualInstance
     */
    estimated_switch_duration_minutes?: number;
    /**
     * whether monitoring should be enabled for this virtual instance
     * @type {boolean}
     * @memberof VirtualInstance
     */
    monitoring_enabled?: boolean;
    /**
     * virtual instance default pod count
     * @type {number}
     * @memberof VirtualInstance
     */
    default_pod_count?: number;
    /**
     * virtual instance scaled pod count
     * @type {number}
     * @memberof VirtualInstance
     */
    scaled_pod_count?: number;
    /**
     * unique identifier for virtual instance
     * @type {string}
     * @memberof VirtualInstance
     */
    id?: string;
}
/**
 * @export
 * @namespace VirtualInstance
 */
export declare namespace VirtualInstance {
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        PROVISIONINGRESOURCES,
        REBALANCINGCOLLECTIONS,
        ACTIVE,
        DELETED
    }
    /**
     * @export
     * @enum {string}
     */
    enum CurrentTypeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
    /**
     * @export
     * @enum {string}
     */
    enum DesiredTypeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
    /**
     * @export
     * @enum {string}
     */
    enum CurrentSizeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
    /**
     * @export
     * @enum {string}
     */
    enum DesiredSizeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
}
/**
 *
 * @export
 * @interface VirtualInstanceMetric
 */
export interface VirtualInstanceMetric {
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    leaf_cpu_load?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    leaf_cpu_utilization?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    leaf_cpu_allocated?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    leaf_memory_used?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    leaf_memory_allocated?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    aggregator_cpu_load?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    aggregator_cpu_utilization?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    aggregator_cpu_allocated?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    aggregator_memory_used?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    aggregator_memory_allocated?: number;
    /**
     *
     * @type {boolean}
     * @memberof VirtualInstanceMetric
     */
    switch_in_progress?: boolean;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceMetric
     */
    time?: number;
}
/**
 *
 * @export
 * @interface VirtualInstanceMetrics
 */
export interface VirtualInstanceMetrics {
    /**
     * virtual instance current type
     * @type {string}
     * @memberof VirtualInstanceMetrics
     */
    current_type?: VirtualInstanceMetrics.CurrentTypeEnum;
    /**
     * virtual instance desired type
     * @type {string}
     * @memberof VirtualInstanceMetrics
     */
    desired_type?: VirtualInstanceMetrics.DesiredTypeEnum;
    /**
     * virtual instance state
     * @type {string}
     * @memberof VirtualInstanceMetrics
     */
    state?: VirtualInstanceMetrics.StateEnum;
    /**
     * virtual instance leaf cpu load
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    leaf_cpu_load?: number;
    /**
     * virtual instance leaf cpu utilization
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    leaf_cpu_utilization?: number;
    /**
     * virtual instance leaf cpu allocated
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    leaf_cpu_allocated?: number;
    /**
     * virtual instance leaf memory used
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    leaf_memory_used?: number;
    /**
     * virtual instance leaf memory allocated
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    leaf_memory_allocated?: number;
    /**
     * virtual instance aggregator cpu load
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    aggregator_cpu_load?: number;
    /**
     * virtual instance aggregator cpu utilization
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    aggregator_cpu_utilization?: number;
    /**
     * virtual instance aggregator cpu allocated
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    aggregator_cpu_allocated?: number;
    /**
     * virtual instance aggregator memory used
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    aggregator_memory_used?: number;
    /**
     * virtual instance aggregator memory allocated
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    aggregator_memory_allocated?: number;
    /**
     * virtual instance queries in flight
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    queries_in_flight?: number;
    /**
     * metrics timestamp millis
     * @type {number}
     * @memberof VirtualInstanceMetrics
     */
    time_millis?: number;
}
/**
 * @export
 * @namespace VirtualInstanceMetrics
 */
export declare namespace VirtualInstanceMetrics {
    /**
     * @export
     * @enum {string}
     */
    enum CurrentTypeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
    /**
     * @export
     * @enum {string}
     */
    enum DesiredTypeEnum {
        FREE,
        SHARED,
        SMALL,
        MEDIUM,
        LARGE,
        XLARGE,
        XLARGE2,
        XLARGE4,
        XLARGE8,
        XLARGE16
    }
    /**
     * @export
     * @enum {string}
     */
    enum StateEnum {
        PROVISIONINGRESOURCES,
        REBALANCINGCOLLECTIONS,
        ACTIVE,
        DELETED
    }
}
/**
 *
 * @export
 * @interface VirtualInstanceQueryMetric
 */
export interface VirtualInstanceQueryMetric {
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceQueryMetric
     */
    avg_latency?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceQueryMetric
     */
    avg_throttled_latency?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceQueryMetric
     */
    query_count?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceQueryMetric
     */
    err_count?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceQueryMetric
     */
    err_count_5xx?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceQueryMetric
     */
    err_count_4xx?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceQueryMetric
     */
    time?: number;
}
/**
 *
 * @export
 * @interface VirtualInstanceStorageMetric
 */
export interface VirtualInstanceStorageMetric {
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceStorageMetric
     */
    total_index_size?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceStorageMetric
     */
    total_index_size_bulk?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceStorageMetric
     */
    total_index_size_streaming?: number;
    /**
     *
     * @type {number}
     * @memberof VirtualInstanceStorageMetric
     */
    time?: number;
}
/**
 * Workspaces are organizational containers for collections.
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     * ISO-8601 date of when workspace was created
     * @type {string}
     * @memberof Workspace
     */
    created_at?: string;
    /**
     * email of user who created the workspace
     * @type {string}
     * @memberof Workspace
     */
    created_by?: string;
    /**
     * descriptive label and unique identifier
     * @type {string}
     * @memberof Workspace
     */
    name?: string;
    /**
     * longer explanation for the workspace
     * @type {string}
     * @memberof Workspace
     */
    description?: string;
    /**
     * number of collections that are immediate children of workspace
     * @type {number}
     * @memberof Workspace
     */
    collection_count?: number;
}
/**
 *
 * @export
 * @interface XmlParams
 */
export interface XmlParams {
    /**
     * tag until which xml is ignored
     * @type {string}
     * @memberof XmlParams
     */
    root_tag?: string;
    /**
     * encoding in which data source is encoded
     * @type {string}
     * @memberof XmlParams
     */
    encoding?: string;
    /**
     * tags with which documents are identified
     * @type {string}
     * @memberof XmlParams
     */
    doc_tag?: string;
    /**
     * tag used for the value when there are attributes in the element having no child
     * @type {string}
     * @memberof XmlParams
     */
    value_tag?: string;
    /**
     * tag to differentiate between attributes and elements
     * @type {string}
     * @memberof XmlParams
     */
    attribute_prefix?: string;
}
/**
 * APIKeysApi - fetch parameter creator
 * @export
 */
export declare const APIKeysApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a new API key for the authenticated user.
     * @summary Create API Key
     * @param {CreateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(body: CreateApiKeyRequest, options?: any): FetchArgs;
    /**
     * Delete an API key for any user in your organization.
     * @summary Delete API Key
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(name: string, user: string, options?: any): FetchArgs;
    /**
     *
     * @summary Delete API Key
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeySelf(name: string, options?: any): FetchArgs;
    /**
     * Retrieve a particular API key for any user in your organization.
     * @summary Retrieve API Key
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {string} name Name of the API key.
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(user: string, name: string, reveal?: boolean | undefined, options?: any): FetchArgs;
    /**
     *
     * @summary Retrieve API key
     * @param {string} name
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeySelf(name: string, reveal?: boolean | undefined, options?: any): FetchArgs;
    /**
     * List API key metadata for any user in your organization.
     * @summary List API Keys.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys(user: string, options?: any): FetchArgs;
    /**
     *
     * @summary List API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysSelf(options?: any): FetchArgs;
    /**
     * Update the state of an API key for any user in your organization.
     * @summary Update an API key's state
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKey(name: string, user: string, body: UpdateApiKeyRequest, options?: any): FetchArgs;
    /**
     *
     * @summary Update API key
     * @param {string} name
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKeySelf(name: string, body: UpdateApiKeyRequest, options?: any): FetchArgs;
};
/**
 * APIKeysApi - functional programming interface
 * @export
 */
export declare const APIKeysApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a new API key for the authenticated user.
     * @summary Create API Key
     * @param {CreateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(body: CreateApiKeyRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateApiKeyResponse>;
    /**
     * Delete an API key for any user in your organization.
     * @summary Delete API Key
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(name: string, user: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteApiKeyResponse>;
    /**
     *
     * @summary Delete API Key
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeySelf(name: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Retrieve a particular API key for any user in your organization.
     * @summary Retrieve API Key
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {string} name Name of the API key.
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(user: string, name: string, reveal?: boolean | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetApiKeyResponse>;
    /**
     *
     * @summary Retrieve API key
     * @param {string} name
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeySelf(name: string, reveal?: boolean | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * List API key metadata for any user in your organization.
     * @summary List API Keys.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys(user: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListApiKeysResponse>;
    /**
     *
     * @summary List API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysSelf(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Update the state of an API key for any user in your organization.
     * @summary Update an API key's state
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKey(name: string, user: string, body: UpdateApiKeyRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UpdateApiKeyResponse>;
    /**
     *
     * @summary Update API key
     * @param {string} name
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKeySelf(name: string, body: UpdateApiKeyRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
};
/**
 * APIKeysApi - factory interface
 * @export
 */
export declare const APIKeysApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create a new API key for the authenticated user.
     * @summary Create API Key
     * @param {CreateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(body: CreateApiKeyRequest, options?: any): Promise<CreateApiKeyResponse>;
    /**
     * Delete an API key for any user in your organization.
     * @summary Delete API Key
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(name: string, user: string, options?: any): Promise<DeleteApiKeyResponse>;
    /**
     *
     * @summary Delete API Key
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeySelf(name: string, options?: any): Promise<Response>;
    /**
     * Retrieve a particular API key for any user in your organization.
     * @summary Retrieve API Key
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {string} name Name of the API key.
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(user: string, name: string, reveal?: boolean | undefined, options?: any): Promise<GetApiKeyResponse>;
    /**
     *
     * @summary Retrieve API key
     * @param {string} name
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKeySelf(name: string, reveal?: boolean | undefined, options?: any): Promise<Response>;
    /**
     * List API key metadata for any user in your organization.
     * @summary List API Keys.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys(user: string, options?: any): Promise<ListApiKeysResponse>;
    /**
     *
     * @summary List API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysSelf(options?: any): Promise<Response>;
    /**
     * Update the state of an API key for any user in your organization.
     * @summary Update an API key's state
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKey(name: string, user: string, body: UpdateApiKeyRequest, options?: any): Promise<UpdateApiKeyResponse>;
    /**
     *
     * @summary Update API key
     * @param {string} name
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApiKeySelf(name: string, body: UpdateApiKeyRequest, options?: any): Promise<Response>;
};
/**
 * APIKeysApi - object-oriented interface
 * @export
 * @class APIKeysApi
 * @extends {BaseAPI}
 */
export declare class APIKeysApi extends BaseAPI {
    /**
     * Create a new API key for the authenticated user.
     * @summary Create API Key
     * @param {CreateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    createApiKey(body: CreateApiKeyRequest, options?: any): Promise<CreateApiKeyResponse>;
    /**
     * Delete an API key for any user in your organization.
     * @summary Delete API Key
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    deleteApiKey(name: string, user: string, options?: any): Promise<DeleteApiKeyResponse>;
    /**
     *
     * @summary Delete API Key
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    deleteApiKeySelf(name: string, options?: any): Promise<Response>;
    /**
     * Retrieve a particular API key for any user in your organization.
     * @summary Retrieve API Key
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {string} name Name of the API key.
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    getApiKey(user: string, name: string, reveal?: boolean, options?: any): Promise<GetApiKeyResponse>;
    /**
     *
     * @summary Retrieve API key
     * @param {string} name
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    getApiKeySelf(name: string, reveal?: boolean, options?: any): Promise<Response>;
    /**
     * List API key metadata for any user in your organization.
     * @summary List API Keys.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    listApiKeys(user: string, options?: any): Promise<ListApiKeysResponse>;
    /**
     *
     * @summary List API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    listApiKeysSelf(options?: any): Promise<Response>;
    /**
     * Update the state of an API key for any user in your organization.
     * @summary Update an API key's state
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    updateApiKey(name: string, user: string, body: UpdateApiKeyRequest, options?: any): Promise<UpdateApiKeyResponse>;
    /**
     *
     * @summary Update API key
     * @param {string} name
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    updateApiKeySelf(name: string, body: UpdateApiKeyRequest, options?: any): Promise<Response>;
}
/**
 * AliasesApi - fetch parameter creator
 * @export
 */
export declare const AliasesApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create new alias in a workspace.
     * @summary Create Alias
     * @param {string} workspace name of the workspace
     * @param {CreateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAlias(workspace: string, body: CreateAliasRequest, options?: any): FetchArgs;
    /**
     * Delete an alias.
     * @summary Delete Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAlias(workspace: string, alias: string, options?: any): FetchArgs;
    /**
     * Get details about an alias
     * @summary Retrieve Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAlias(workspace: string, alias: string, options?: any): FetchArgs;
    /**
     * Retrieve all aliases in an organization
     * @summary List Aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAliases(options?: any): FetchArgs;
    /**
     * Get all Query Lambdas that hit a specific Rockset Alias.
     * @summary Get Query Lambdas with Alias
     * @param {string} workspace
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasWithAlias(workspace: string, alias: string, options?: any): FetchArgs;
    /**
     * Transfer ownership of an alias to a new user.
     * @summary Transfer Ownership of an Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {TransferOwnershipRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, alias: string, body: TransferOwnershipRequest, options?: any): FetchArgs;
    /**
     * Update alias in a workspace.
     * @summary Update Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {UpdateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAlias(workspace: string, alias: string, body: UpdateAliasRequest, options?: any): FetchArgs;
    /**
     * Retrieve all aliases in a workspace.
     * @summary List Aliases in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceAliases(workspace: string, options?: any): FetchArgs;
};
/**
 * AliasesApi - functional programming interface
 * @export
 */
export declare const AliasesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create new alias in a workspace.
     * @summary Create Alias
     * @param {string} workspace name of the workspace
     * @param {CreateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAlias(workspace: string, body: CreateAliasRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateAliasResponse>;
    /**
     * Delete an alias.
     * @summary Delete Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAlias(workspace: string, alias: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteAliasResponse>;
    /**
     * Get details about an alias
     * @summary Retrieve Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAlias(workspace: string, alias: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetAliasResponse>;
    /**
     * Retrieve all aliases in an organization
     * @summary List Aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAliases(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListAliasesResponse>;
    /**
     * Get all Query Lambdas that hit a specific Rockset Alias.
     * @summary Get Query Lambdas with Alias
     * @param {string} workspace
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasWithAlias(workspace: string, alias: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryLambdasResponse>;
    /**
     * Transfer ownership of an alias to a new user.
     * @summary Transfer Ownership of an Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {TransferOwnershipRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, alias: string, body: TransferOwnershipRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Update alias in a workspace.
     * @summary Update Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {UpdateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAlias(workspace: string, alias: string, body: UpdateAliasRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetAliasResponse>;
    /**
     * Retrieve all aliases in a workspace.
     * @summary List Aliases in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceAliases(workspace: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListAliasesResponse>;
};
/**
 * AliasesApi - factory interface
 * @export
 */
export declare const AliasesApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create new alias in a workspace.
     * @summary Create Alias
     * @param {string} workspace name of the workspace
     * @param {CreateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAlias(workspace: string, body: CreateAliasRequest, options?: any): Promise<CreateAliasResponse>;
    /**
     * Delete an alias.
     * @summary Delete Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAlias(workspace: string, alias: string, options?: any): Promise<DeleteAliasResponse>;
    /**
     * Get details about an alias
     * @summary Retrieve Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAlias(workspace: string, alias: string, options?: any): Promise<GetAliasResponse>;
    /**
     * Retrieve all aliases in an organization
     * @summary List Aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAliases(options?: any): Promise<ListAliasesResponse>;
    /**
     * Get all Query Lambdas that hit a specific Rockset Alias.
     * @summary Get Query Lambdas with Alias
     * @param {string} workspace
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasWithAlias(workspace: string, alias: string, options?: any): Promise<ListQueryLambdasResponse>;
    /**
     * Transfer ownership of an alias to a new user.
     * @summary Transfer Ownership of an Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {TransferOwnershipRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, alias: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
    /**
     * Update alias in a workspace.
     * @summary Update Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {UpdateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAlias(workspace: string, alias: string, body: UpdateAliasRequest, options?: any): Promise<GetAliasResponse>;
    /**
     * Retrieve all aliases in a workspace.
     * @summary List Aliases in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceAliases(workspace: string, options?: any): Promise<ListAliasesResponse>;
};
/**
 * AliasesApi - object-oriented interface
 * @export
 * @class AliasesApi
 * @extends {BaseAPI}
 */
export declare class AliasesApi extends BaseAPI {
    /**
     * Create new alias in a workspace.
     * @summary Create Alias
     * @param {string} workspace name of the workspace
     * @param {CreateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    createAlias(workspace: string, body: CreateAliasRequest, options?: any): Promise<CreateAliasResponse>;
    /**
     * Delete an alias.
     * @summary Delete Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    deleteAlias(workspace: string, alias: string, options?: any): Promise<DeleteAliasResponse>;
    /**
     * Get details about an alias
     * @summary Retrieve Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    getAlias(workspace: string, alias: string, options?: any): Promise<GetAliasResponse>;
    /**
     * Retrieve all aliases in an organization
     * @summary List Aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    listAliases(options?: any): Promise<ListAliasesResponse>;
    /**
     * Get all Query Lambdas that hit a specific Rockset Alias.
     * @summary Get Query Lambdas with Alias
     * @param {string} workspace
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    listQueryLambdasWithAlias(workspace: string, alias: string, options?: any): Promise<ListQueryLambdasResponse>;
    /**
     * Transfer ownership of an alias to a new user.
     * @summary Transfer Ownership of an Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {TransferOwnershipRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    transferOwnership(workspace: string, alias: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
    /**
     * Update alias in a workspace.
     * @summary Update Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {UpdateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    updateAlias(workspace: string, alias: string, body: UpdateAliasRequest, options?: any): Promise<GetAliasResponse>;
    /**
     * Retrieve all aliases in a workspace.
     * @summary List Aliases in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    workspaceAliases(workspace: string, options?: any): Promise<ListAliasesResponse>;
}
/**
 * CollectionsApi - fetch parameter creator
 * @export
 */
export declare const CollectionsApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create new collection in a workspace.
     * @summary Create Collection
     * @param {string} workspace name of the workspace
     * @param {CreateCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(workspace: string, body: CreateCollectionRequest, options?: any): FetchArgs;
    /**
     * Create an ephemeral source (expires after 24h) to perform preview on.
     * @summary Create Preview Source
     * @param {CreatePreviewSourceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPreviewSource(body: CreatePreviewSourceRequest, options?: any): FetchArgs;
    /**
     * Delete a collection and all its documents from Rockset.
     * @summary Delete Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(workspace: string, collection: string, options?: any): FetchArgs;
    /**
     * Get details about a collection.
     * @summary Retrieve Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(workspace: string, collection: string, options?: any): FetchArgs;
    /**
     *
     * @summary Determines if the collection includes data at or after the specified fence
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {string} [fence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionOffsets(workspace: string, collection: string, fence?: string | undefined, options?: any): FetchArgs;
    /**
     * Get schema for a collection in Rockset.
     * @summary Get Collection Schema
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {number} [depth] max nested depth level to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(workspace: string, collection: string, depth?: number | undefined, options?: any): FetchArgs;
    /**
     * Retrieve information about source.
     * @summary Get Source config
     * @param {SourceConfigRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConfigs(body: SourceConfigRequest, options?: any): FetchArgs;
    /**
     * Get all Aliases for a specific Rockset Collection.
     * @summary Get Aliases for Collection
     * @param {string} workspace
     * @param {string} collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAliasesForCollection(workspace: string, collection: string, options?: any): FetchArgs;
    /**
     * Retrieve all collections in an organization.
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(options?: any): FetchArgs;
    /**
     * Get all Query Lambdas that hit a specific Rockset Collection.
     * @summary Get Query Lambdas for Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasInCollection(workspace: string, collection: string, options?: any): FetchArgs;
    /**
     * Get sample documents given collection configuration.
     * @summary Preview Collection
     * @param {PreviewCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    previewCollection(body: PreviewCollectionRequest, options?: any): FetchArgs;
    /**
     * Update state of a collection.
     * @summary Update state of Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {'READY' | 'PAUSED'} state new state of this collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCollectionState(workspace: string, collection: string, state: 'READY' | 'PAUSED', options?: any): FetchArgs;
    /**
     * Transfer ownership of a collection to a new user.
     * @summary Transfer Ownership of a Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, collection: string, body: TransferOwnershipRequest, options?: any): FetchArgs;
    /**
     * Upload a file to a collection in Rockset.
     * @summary Upload a file
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {FormDataBodyPart} [body3] file format params
     * @param {string} [body4] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(workspace: string, collection: string, body: InputStream, body2: FormDataContentDisposition, body3?: FormDataBodyPart | undefined, body4?: string | undefined, options?: any): FetchArgs;
    /**
     * Upload a file to a preview source that can be used to generate preview docs
     * @summary Upload File to Preview Source
     * @param {string} preview_source_id preview source identifier
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {string} [body3] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilePreviewSource(preview_source_id: string, body: InputStream, body2: FormDataContentDisposition, body3?: string | undefined, options?: any): FetchArgs;
    /**
     * Retrieve all collections in a workspace.
     * @summary List Collections in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCollections(workspace: string, options?: any): FetchArgs;
};
/**
 * CollectionsApi - functional programming interface
 * @export
 */
export declare const CollectionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create new collection in a workspace.
     * @summary Create Collection
     * @param {string} workspace name of the workspace
     * @param {CreateCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(workspace: string, body: CreateCollectionRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateCollectionResponse>;
    /**
     * Create an ephemeral source (expires after 24h) to perform preview on.
     * @summary Create Preview Source
     * @param {CreatePreviewSourceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPreviewSource(body: CreatePreviewSourceRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreatePreviewSourceResponse>;
    /**
     * Delete a collection and all its documents from Rockset.
     * @summary Delete Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(workspace: string, collection: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteCollectionResponse>;
    /**
     * Get details about a collection.
     * @summary Retrieve Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(workspace: string, collection: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetCollectionResponse>;
    /**
     *
     * @summary Determines if the collection includes data at or after the specified fence
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {string} [fence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionOffsets(workspace: string, collection: string, fence?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetCollectionCommit>;
    /**
     * Get schema for a collection in Rockset.
     * @summary Get Collection Schema
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {number} [depth] max nested depth level to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(workspace: string, collection: string, depth?: number | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryResponse>;
    /**
     * Retrieve information about source.
     * @summary Get Source config
     * @param {SourceConfigRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConfigs(body: SourceConfigRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SourceConfigResponse>;
    /**
     * Get all Aliases for a specific Rockset Collection.
     * @summary Get Aliases for Collection
     * @param {string} workspace
     * @param {string} collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAliasesForCollection(workspace: string, collection: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListAliasesResponse>;
    /**
     * Retrieve all collections in an organization.
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListCollectionsResponse>;
    /**
     * Get all Query Lambdas that hit a specific Rockset Collection.
     * @summary Get Query Lambdas for Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasInCollection(workspace: string, collection: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryLambdaVersionsResponse>;
    /**
     * Get sample documents given collection configuration.
     * @summary Preview Collection
     * @param {PreviewCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    previewCollection(body: PreviewCollectionRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<PreviewCollectionResponse>;
    /**
     * Update state of a collection.
     * @summary Update state of Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {'READY' | 'PAUSED'} state new state of this collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCollectionState(workspace: string, collection: string, state: 'READY' | 'PAUSED', options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetCollectionResponse>;
    /**
     * Transfer ownership of a collection to a new user.
     * @summary Transfer Ownership of a Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, collection: string, body: TransferOwnershipRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Upload a file to a collection in Rockset.
     * @summary Upload a file
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {FormDataBodyPart} [body3] file format params
     * @param {string} [body4] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(workspace: string, collection: string, body: InputStream, body2: FormDataContentDisposition, body3?: FormDataBodyPart | undefined, body4?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UploadFileResponse>;
    /**
     * Upload a file to a preview source that can be used to generate preview docs
     * @summary Upload File to Preview Source
     * @param {string} preview_source_id preview source identifier
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {string} [body3] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilePreviewSource(preview_source_id: string, body: InputStream, body2: FormDataContentDisposition, body3?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UploadFileResponse>;
    /**
     * Retrieve all collections in a workspace.
     * @summary List Collections in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCollections(workspace: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListCollectionsResponse>;
};
/**
 * CollectionsApi - factory interface
 * @export
 */
export declare const CollectionsApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create new collection in a workspace.
     * @summary Create Collection
     * @param {string} workspace name of the workspace
     * @param {CreateCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(workspace: string, body: CreateCollectionRequest, options?: any): Promise<CreateCollectionResponse>;
    /**
     * Create an ephemeral source (expires after 24h) to perform preview on.
     * @summary Create Preview Source
     * @param {CreatePreviewSourceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPreviewSource(body: CreatePreviewSourceRequest, options?: any): Promise<CreatePreviewSourceResponse>;
    /**
     * Delete a collection and all its documents from Rockset.
     * @summary Delete Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(workspace: string, collection: string, options?: any): Promise<DeleteCollectionResponse>;
    /**
     * Get details about a collection.
     * @summary Retrieve Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(workspace: string, collection: string, options?: any): Promise<GetCollectionResponse>;
    /**
     *
     * @summary Determines if the collection includes data at or after the specified fence
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {string} [fence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionOffsets(workspace: string, collection: string, fence?: string | undefined, options?: any): Promise<GetCollectionCommit>;
    /**
     * Get schema for a collection in Rockset.
     * @summary Get Collection Schema
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {number} [depth] max nested depth level to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(workspace: string, collection: string, depth?: number | undefined, options?: any): Promise<QueryResponse>;
    /**
     * Retrieve information about source.
     * @summary Get Source config
     * @param {SourceConfigRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConfigs(body: SourceConfigRequest, options?: any): Promise<SourceConfigResponse>;
    /**
     * Get all Aliases for a specific Rockset Collection.
     * @summary Get Aliases for Collection
     * @param {string} workspace
     * @param {string} collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAliasesForCollection(workspace: string, collection: string, options?: any): Promise<ListAliasesResponse>;
    /**
     * Retrieve all collections in an organization.
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(options?: any): Promise<ListCollectionsResponse>;
    /**
     * Get all Query Lambdas that hit a specific Rockset Collection.
     * @summary Get Query Lambdas for Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasInCollection(workspace: string, collection: string, options?: any): Promise<ListQueryLambdaVersionsResponse>;
    /**
     * Get sample documents given collection configuration.
     * @summary Preview Collection
     * @param {PreviewCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    previewCollection(body: PreviewCollectionRequest, options?: any): Promise<PreviewCollectionResponse>;
    /**
     * Update state of a collection.
     * @summary Update state of Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {'READY' | 'PAUSED'} state new state of this collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCollectionState(workspace: string, collection: string, state: 'READY' | 'PAUSED', options?: any): Promise<GetCollectionResponse>;
    /**
     * Transfer ownership of a collection to a new user.
     * @summary Transfer Ownership of a Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, collection: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
    /**
     * Upload a file to a collection in Rockset.
     * @summary Upload a file
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {FormDataBodyPart} [body3] file format params
     * @param {string} [body4] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(workspace: string, collection: string, body: InputStream, body2: FormDataContentDisposition, body3?: FormDataBodyPart | undefined, body4?: string | undefined, options?: any): Promise<UploadFileResponse>;
    /**
     * Upload a file to a preview source that can be used to generate preview docs
     * @summary Upload File to Preview Source
     * @param {string} preview_source_id preview source identifier
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {string} [body3] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilePreviewSource(preview_source_id: string, body: InputStream, body2: FormDataContentDisposition, body3?: string | undefined, options?: any): Promise<UploadFileResponse>;
    /**
     * Retrieve all collections in a workspace.
     * @summary List Collections in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceCollections(workspace: string, options?: any): Promise<ListCollectionsResponse>;
};
/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export declare class CollectionsApi extends BaseAPI {
    /**
     * Create new collection in a workspace.
     * @summary Create Collection
     * @param {string} workspace name of the workspace
     * @param {CreateCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    createCollection(workspace: string, body: CreateCollectionRequest, options?: any): Promise<CreateCollectionResponse>;
    /**
     * Create an ephemeral source (expires after 24h) to perform preview on.
     * @summary Create Preview Source
     * @param {CreatePreviewSourceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    createPreviewSource(body: CreatePreviewSourceRequest, options?: any): Promise<CreatePreviewSourceResponse>;
    /**
     * Delete a collection and all its documents from Rockset.
     * @summary Delete Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    deleteCollection(workspace: string, collection: string, options?: any): Promise<DeleteCollectionResponse>;
    /**
     * Get details about a collection.
     * @summary Retrieve Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getCollection(workspace: string, collection: string, options?: any): Promise<GetCollectionResponse>;
    /**
     *
     * @summary Determines if the collection includes data at or after the specified fence
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {string} [fence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getCollectionOffsets(workspace: string, collection: string, fence?: string, options?: any): Promise<GetCollectionCommit>;
    /**
     * Get schema for a collection in Rockset.
     * @summary Get Collection Schema
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {number} [depth] max nested depth level to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getSchema(workspace: string, collection: string, depth?: number, options?: any): Promise<QueryResponse>;
    /**
     * Retrieve information about source.
     * @summary Get Source config
     * @param {SourceConfigRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getSourceConfigs(body: SourceConfigRequest, options?: any): Promise<SourceConfigResponse>;
    /**
     * Get all Aliases for a specific Rockset Collection.
     * @summary Get Aliases for Collection
     * @param {string} workspace
     * @param {string} collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    listAliasesForCollection(workspace: string, collection: string, options?: any): Promise<ListAliasesResponse>;
    /**
     * Retrieve all collections in an organization.
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    listCollections(options?: any): Promise<ListCollectionsResponse>;
    /**
     * Get all Query Lambdas that hit a specific Rockset Collection.
     * @summary Get Query Lambdas for Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    listQueryLambdasInCollection(workspace: string, collection: string, options?: any): Promise<ListQueryLambdaVersionsResponse>;
    /**
     * Get sample documents given collection configuration.
     * @summary Preview Collection
     * @param {PreviewCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    previewCollection(body: PreviewCollectionRequest, options?: any): Promise<PreviewCollectionResponse>;
    /**
     * Update state of a collection.
     * @summary Update state of Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {'READY' | 'PAUSED'} state new state of this collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    setCollectionState(workspace: string, collection: string, state: 'READY' | 'PAUSED', options?: any): Promise<GetCollectionResponse>;
    /**
     * Transfer ownership of a collection to a new user.
     * @summary Transfer Ownership of a Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    transferOwnership(workspace: string, collection: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
    /**
     * Upload a file to a collection in Rockset.
     * @summary Upload a file
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {FormDataBodyPart} [body3] file format params
     * @param {string} [body4] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    uploadFile(workspace: string, collection: string, body: InputStream, body2: FormDataContentDisposition, body3?: FormDataBodyPart, body4?: string, options?: any): Promise<UploadFileResponse>;
    /**
     * Upload a file to a preview source that can be used to generate preview docs
     * @summary Upload File to Preview Source
     * @param {string} preview_source_id preview source identifier
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {string} [body3] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    uploadFilePreviewSource(preview_source_id: string, body: InputStream, body2: FormDataContentDisposition, body3?: string, options?: any): Promise<UploadFileResponse>;
    /**
     * Retrieve all collections in a workspace.
     * @summary List Collections in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    workspaceCollections(workspace: string, options?: any): Promise<ListCollectionsResponse>;
}
/**
 * ConsoleApi - fetch parameter creator
 * @export
 */
export declare const ConsoleApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Send confirmation email to user, send email internally, and notify internally
     * @summary Contact Sales
     * @param {ContactSalesRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactSales(body: ContactSalesRequest, options?: any): FetchArgs;
    /**
     * Open a support ticket on behalf of the user
     * @summary Contact Support
     * @param {ContactSupportRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactSupport(body: ContactSupportRequest, options?: any): FetchArgs;
    /**
     * Get list of all activity for user
     * @summary Get Activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivity(options?: any): FetchArgs;
    /**
     * Record an activity item from console.
     * @summary Record Activity
     * @param {RecordActivityRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordActivity(body: RecordActivityRequest, options?: any): FetchArgs;
};
/**
 * ConsoleApi - functional programming interface
 * @export
 */
export declare const ConsoleApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Send confirmation email to user, send email internally, and notify internally
     * @summary Contact Sales
     * @param {ContactSalesRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactSales(body: ContactSalesRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<StatusResponse>;
    /**
     * Open a support ticket on behalf of the user
     * @summary Contact Support
     * @param {ContactSupportRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactSupport(body: ContactSupportRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<StatusResponse>;
    /**
     * Get list of all activity for user
     * @summary Get Activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivity(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetActivityResponse>;
    /**
     * Record an activity item from console.
     * @summary Record Activity
     * @param {RecordActivityRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordActivity(body: RecordActivityRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<StatusResponse>;
};
/**
 * ConsoleApi - factory interface
 * @export
 */
export declare const ConsoleApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Send confirmation email to user, send email internally, and notify internally
     * @summary Contact Sales
     * @param {ContactSalesRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactSales(body: ContactSalesRequest, options?: any): Promise<StatusResponse>;
    /**
     * Open a support ticket on behalf of the user
     * @summary Contact Support
     * @param {ContactSupportRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contactSupport(body: ContactSupportRequest, options?: any): Promise<StatusResponse>;
    /**
     * Get list of all activity for user
     * @summary Get Activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivity(options?: any): Promise<GetActivityResponse>;
    /**
     * Record an activity item from console.
     * @summary Record Activity
     * @param {RecordActivityRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordActivity(body: RecordActivityRequest, options?: any): Promise<StatusResponse>;
};
/**
 * ConsoleApi - object-oriented interface
 * @export
 * @class ConsoleApi
 * @extends {BaseAPI}
 */
export declare class ConsoleApi extends BaseAPI {
    /**
     * Send confirmation email to user, send email internally, and notify internally
     * @summary Contact Sales
     * @param {ContactSalesRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    contactSales(body: ContactSalesRequest, options?: any): Promise<StatusResponse>;
    /**
     * Open a support ticket on behalf of the user
     * @summary Contact Support
     * @param {ContactSupportRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    contactSupport(body: ContactSupportRequest, options?: any): Promise<StatusResponse>;
    /**
     * Get list of all activity for user
     * @summary Get Activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    getActivity(options?: any): Promise<GetActivityResponse>;
    /**
     * Record an activity item from console.
     * @summary Record Activity
     * @param {RecordActivityRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    recordActivity(body: RecordActivityRequest, options?: any): Promise<StatusResponse>;
}
/**
 * CustomRolesBetaApi - fetch parameter creator
 * @export
 */
export declare const CustomRolesBetaApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a role for your organization.
     * @summary Create a Role
     * @param {CreateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(body: CreateRoleRequest, options?: any): FetchArgs;
    /**
     * Delete a role for your organization.
     * @summary Delete a Role
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(roleName: string, options?: any): FetchArgs;
    /**
     * List all roles for your organization.
     * @summary List Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(options?: any): FetchArgs;
    /**
     * Update a role for your organization.
     * @summary Update a Role
     * @param {string} roleName
     * @param {UpdateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRole(roleName: string, body: UpdateRoleRequest, options?: any): FetchArgs;
};
/**
 * CustomRolesBetaApi - functional programming interface
 * @export
 */
export declare const CustomRolesBetaApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a role for your organization.
     * @summary Create a Role
     * @param {CreateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(body: CreateRoleRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<RoleResponse>;
    /**
     * Delete a role for your organization.
     * @summary Delete a Role
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(roleName: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<RoleResponse>;
    /**
     * List all roles for your organization.
     * @summary List Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListRolesResponse>;
    /**
     * Update a role for your organization.
     * @summary Update a Role
     * @param {string} roleName
     * @param {UpdateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRole(roleName: string, body: UpdateRoleRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<RoleResponse>;
};
/**
 * CustomRolesBetaApi - factory interface
 * @export
 */
export declare const CustomRolesBetaApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create a role for your organization.
     * @summary Create a Role
     * @param {CreateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(body: CreateRoleRequest, options?: any): Promise<RoleResponse>;
    /**
     * Delete a role for your organization.
     * @summary Delete a Role
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(roleName: string, options?: any): Promise<RoleResponse>;
    /**
     * List all roles for your organization.
     * @summary List Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(options?: any): Promise<ListRolesResponse>;
    /**
     * Update a role for your organization.
     * @summary Update a Role
     * @param {string} roleName
     * @param {UpdateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRole(roleName: string, body: UpdateRoleRequest, options?: any): Promise<RoleResponse>;
};
/**
 * CustomRolesBetaApi - object-oriented interface
 * @export
 * @class CustomRolesBetaApi
 * @extends {BaseAPI}
 */
export declare class CustomRolesBetaApi extends BaseAPI {
    /**
     * Create a role for your organization.
     * @summary Create a Role
     * @param {CreateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesBetaApi
     */
    createRole(body: CreateRoleRequest, options?: any): Promise<RoleResponse>;
    /**
     * Delete a role for your organization.
     * @summary Delete a Role
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesBetaApi
     */
    deleteRole(roleName: string, options?: any): Promise<RoleResponse>;
    /**
     * List all roles for your organization.
     * @summary List Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesBetaApi
     */
    listRoles(options?: any): Promise<ListRolesResponse>;
    /**
     * Update a role for your organization.
     * @summary Update a Role
     * @param {string} roleName
     * @param {UpdateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesBetaApi
     */
    updateRole(roleName: string, body: UpdateRoleRequest, options?: any): Promise<RoleResponse>;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export declare const DefaultApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiveKafkaEvent(options?: any): FetchArgs;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiveSegmentEvent(options?: any): FetchArgs;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiveKafkaEvent(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiveSegmentEvent(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiveKafkaEvent(options?: any): Promise<Response>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiveSegmentEvent(options?: any): Promise<Response>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    receiveKafkaEvent(options?: any): Promise<Response>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    receiveSegmentEvent(options?: any): Promise<Response>;
}
/**
 * DocumentsApi - fetch parameter creator
 * @export
 */
export declare const DocumentsApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Add documents to a collection.
     * @summary Add Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {AddDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDocuments(workspace: string, collection: string, body: AddDocumentsRequest, options?: any): FetchArgs;
    /**
     * Delete documents from a collection.
     * @summary Delete Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {DeleteDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDocuments(workspace: string, collection: string, body: DeleteDocumentsRequest, options?: any): FetchArgs;
    /**
     * Update existing documents in a collection.
     * @summary Patch Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {PatchDocumentsRequest} body JSON Patch objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchDocuments(workspace: string, collection: string, body: PatchDocumentsRequest, options?: any): FetchArgs;
};
/**
 * DocumentsApi - functional programming interface
 * @export
 */
export declare const DocumentsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Add documents to a collection.
     * @summary Add Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {AddDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDocuments(workspace: string, collection: string, body: AddDocumentsRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<AddDocumentsResponse>;
    /**
     * Delete documents from a collection.
     * @summary Delete Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {DeleteDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDocuments(workspace: string, collection: string, body: DeleteDocumentsRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteDocumentsResponse>;
    /**
     * Update existing documents in a collection.
     * @summary Patch Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {PatchDocumentsRequest} body JSON Patch objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchDocuments(workspace: string, collection: string, body: PatchDocumentsRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<PatchDocumentsResponse>;
};
/**
 * DocumentsApi - factory interface
 * @export
 */
export declare const DocumentsApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Add documents to a collection.
     * @summary Add Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {AddDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDocuments(workspace: string, collection: string, body: AddDocumentsRequest, options?: any): Promise<AddDocumentsResponse>;
    /**
     * Delete documents from a collection.
     * @summary Delete Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {DeleteDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDocuments(workspace: string, collection: string, body: DeleteDocumentsRequest, options?: any): Promise<DeleteDocumentsResponse>;
    /**
     * Update existing documents in a collection.
     * @summary Patch Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {PatchDocumentsRequest} body JSON Patch objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchDocuments(workspace: string, collection: string, body: PatchDocumentsRequest, options?: any): Promise<PatchDocumentsResponse>;
};
/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export declare class DocumentsApi extends BaseAPI {
    /**
     * Add documents to a collection.
     * @summary Add Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {AddDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    addDocuments(workspace: string, collection: string, body: AddDocumentsRequest, options?: any): Promise<AddDocumentsResponse>;
    /**
     * Delete documents from a collection.
     * @summary Delete Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {DeleteDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    deleteDocuments(workspace: string, collection: string, body: DeleteDocumentsRequest, options?: any): Promise<DeleteDocumentsResponse>;
    /**
     * Update existing documents in a collection.
     * @summary Patch Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {PatchDocumentsRequest} body JSON Patch objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    patchDocuments(workspace: string, collection: string, body: PatchDocumentsRequest, options?: any): Promise<PatchDocumentsResponse>;
}
/**
 * IPAllowlistApi - fetch parameter creator
 * @export
 */
export declare const IPAllowlistApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a new entry to allow an IP address
     * @summary Create IP Allowlist Network Policy
     * @param {CreateIpAllowlistRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAllowlistIp(body: CreateIpAllowlistRequest, options?: any): FetchArgs;
    /**
     * Delete an entry for IP allowlist network policy.
     * @summary Delete IP Allowlist Network Policy
     * @param {string} name name of the IP allowlist network policy
     * @param {DeleteIpAllowlistRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllowlistIp(name: string, body?: DeleteIpAllowlistRequest | undefined, options?: any): FetchArgs;
    /**
     * Get details about a IP Allowlist network policy
     * @summary Get IP Allowlist Network Policy
     * @param {string} name name of the IP Allowlist network policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllowlistIp(name: string, options?: any): FetchArgs;
    /**
     *
     * @summary List IP Allowlist Entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllowlistIps(options?: any): FetchArgs;
};
/**
 * IPAllowlistApi - functional programming interface
 * @export
 */
export declare const IPAllowlistApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a new entry to allow an IP address
     * @summary Create IP Allowlist Network Policy
     * @param {CreateIpAllowlistRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAllowlistIp(body: CreateIpAllowlistRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateIpAllowlistResponse>;
    /**
     * Delete an entry for IP allowlist network policy.
     * @summary Delete IP Allowlist Network Policy
     * @param {string} name name of the IP allowlist network policy
     * @param {DeleteIpAllowlistRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllowlistIp(name: string, body?: DeleteIpAllowlistRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteIpAllowlistResponse>;
    /**
     * Get details about a IP Allowlist network policy
     * @summary Get IP Allowlist Network Policy
     * @param {string} name name of the IP Allowlist network policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllowlistIp(name: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetIpAllowlistResponse>;
    /**
     *
     * @summary List IP Allowlist Entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllowlistIps(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListIpAllowlistsResponse>;
};
/**
 * IPAllowlistApi - factory interface
 * @export
 */
export declare const IPAllowlistApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create a new entry to allow an IP address
     * @summary Create IP Allowlist Network Policy
     * @param {CreateIpAllowlistRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAllowlistIp(body: CreateIpAllowlistRequest, options?: any): Promise<CreateIpAllowlistResponse>;
    /**
     * Delete an entry for IP allowlist network policy.
     * @summary Delete IP Allowlist Network Policy
     * @param {string} name name of the IP allowlist network policy
     * @param {DeleteIpAllowlistRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAllowlistIp(name: string, body?: DeleteIpAllowlistRequest | undefined, options?: any): Promise<DeleteIpAllowlistResponse>;
    /**
     * Get details about a IP Allowlist network policy
     * @summary Get IP Allowlist Network Policy
     * @param {string} name name of the IP Allowlist network policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllowlistIp(name: string, options?: any): Promise<GetIpAllowlistResponse>;
    /**
     *
     * @summary List IP Allowlist Entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllowlistIps(options?: any): Promise<ListIpAllowlistsResponse>;
};
/**
 * IPAllowlistApi - object-oriented interface
 * @export
 * @class IPAllowlistApi
 * @extends {BaseAPI}
 */
export declare class IPAllowlistApi extends BaseAPI {
    /**
     * Create a new entry to allow an IP address
     * @summary Create IP Allowlist Network Policy
     * @param {CreateIpAllowlistRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAllowlistApi
     */
    createAllowlistIp(body: CreateIpAllowlistRequest, options?: any): Promise<CreateIpAllowlistResponse>;
    /**
     * Delete an entry for IP allowlist network policy.
     * @summary Delete IP Allowlist Network Policy
     * @param {string} name name of the IP allowlist network policy
     * @param {DeleteIpAllowlistRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAllowlistApi
     */
    deleteAllowlistIp(name: string, body?: DeleteIpAllowlistRequest, options?: any): Promise<DeleteIpAllowlistResponse>;
    /**
     * Get details about a IP Allowlist network policy
     * @summary Get IP Allowlist Network Policy
     * @param {string} name name of the IP Allowlist network policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAllowlistApi
     */
    getAllowlistIp(name: string, options?: any): Promise<GetIpAllowlistResponse>;
    /**
     *
     * @summary List IP Allowlist Entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAllowlistApi
     */
    listAllowlistIps(options?: any): Promise<ListIpAllowlistsResponse>;
}
/**
 * IntegrationsApi - fetch parameter creator
 * @export
 */
export declare const IntegrationsApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {CreateIntegrationRequest} body integration credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration(body: CreateIntegrationRequest, options?: any): FetchArgs;
    /**
     * Remove an integration.
     * @summary Delete Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration(integration: string, options?: any): FetchArgs;
    /**
     * Retrieve information about a single integration.
     * @summary Retrieve Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration(integration: string, options?: any): FetchArgs;
    /**
     * List all integrations in an organization.
     * @summary List Integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations(options?: any): FetchArgs;
    /**
     * Transfer ownership of an integration to a new user.
     * @summary Transfer Ownership of an Integration
     * @param {string} integration name of the integration
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(integration: string, body: TransferOwnershipRequest, options?: any): FetchArgs;
    /**
     * Verify that an integration is healthy.
     * @summary Verify Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyIntegration(integration: string, options?: any): FetchArgs;
};
/**
 * IntegrationsApi - functional programming interface
 * @export
 */
export declare const IntegrationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {CreateIntegrationRequest} body integration credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration(body: CreateIntegrationRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateIntegrationResponse>;
    /**
     * Remove an integration.
     * @summary Delete Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration(integration: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteIntegrationResponse>;
    /**
     * Retrieve information about a single integration.
     * @summary Retrieve Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration(integration: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetIntegrationResponse>;
    /**
     * List all integrations in an organization.
     * @summary List Integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListIntegrationsResponse>;
    /**
     * Transfer ownership of an integration to a new user.
     * @summary Transfer Ownership of an Integration
     * @param {string} integration name of the integration
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(integration: string, body: TransferOwnershipRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Verify that an integration is healthy.
     * @summary Verify Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyIntegration(integration: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<StatusResponse>;
};
/**
 * IntegrationsApi - factory interface
 * @export
 */
export declare const IntegrationsApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {CreateIntegrationRequest} body integration credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIntegration(body: CreateIntegrationRequest, options?: any): Promise<CreateIntegrationResponse>;
    /**
     * Remove an integration.
     * @summary Delete Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteIntegration(integration: string, options?: any): Promise<DeleteIntegrationResponse>;
    /**
     * Retrieve information about a single integration.
     * @summary Retrieve Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIntegration(integration: string, options?: any): Promise<GetIntegrationResponse>;
    /**
     * List all integrations in an organization.
     * @summary List Integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listIntegrations(options?: any): Promise<ListIntegrationsResponse>;
    /**
     * Transfer ownership of an integration to a new user.
     * @summary Transfer Ownership of an Integration
     * @param {string} integration name of the integration
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(integration: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
    /**
     * Verify that an integration is healthy.
     * @summary Verify Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyIntegration(integration: string, options?: any): Promise<StatusResponse>;
};
/**
 * IntegrationsApi - object-oriented interface
 * @export
 * @class IntegrationsApi
 * @extends {BaseAPI}
 */
export declare class IntegrationsApi extends BaseAPI {
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {CreateIntegrationRequest} body integration credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    createIntegration(body: CreateIntegrationRequest, options?: any): Promise<CreateIntegrationResponse>;
    /**
     * Remove an integration.
     * @summary Delete Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    deleteIntegration(integration: string, options?: any): Promise<DeleteIntegrationResponse>;
    /**
     * Retrieve information about a single integration.
     * @summary Retrieve Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    getIntegration(integration: string, options?: any): Promise<GetIntegrationResponse>;
    /**
     * List all integrations in an organization.
     * @summary List Integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    listIntegrations(options?: any): Promise<ListIntegrationsResponse>;
    /**
     * Transfer ownership of an integration to a new user.
     * @summary Transfer Ownership of an Integration
     * @param {string} integration name of the integration
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    transferOwnership(integration: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
    /**
     * Verify that an integration is healthy.
     * @summary Verify Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    verifyIntegration(integration: string, options?: any): Promise<StatusResponse>;
}
/**
 * LinearApi - fetch parameter creator
 * @export
 */
export declare const LinearApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Creates an issue.
     * @summary Create issue
     * @param {CreateIssueRequest} body Creates an issue in linear
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIssue(body: CreateIssueRequest, options?: any): FetchArgs;
};
/**
 * LinearApi - functional programming interface
 * @export
 */
export declare const LinearApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Creates an issue.
     * @summary Create issue
     * @param {CreateIssueRequest} body Creates an issue in linear
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIssue(body: CreateIssueRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateIssueResponse>;
};
/**
 * LinearApi - factory interface
 * @export
 */
export declare const LinearApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Creates an issue.
     * @summary Create issue
     * @param {CreateIssueRequest} body Creates an issue in linear
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createIssue(body: CreateIssueRequest, options?: any): Promise<CreateIssueResponse>;
};
/**
 * LinearApi - object-oriented interface
 * @export
 * @class LinearApi
 * @extends {BaseAPI}
 */
export declare class LinearApi extends BaseAPI {
    /**
     * Creates an issue.
     * @summary Create issue
     * @param {CreateIssueRequest} body Creates an issue in linear
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinearApi
     */
    createIssue(body: CreateIssueRequest, options?: any): Promise<CreateIssueResponse>;
}
/**
 * OrganizationsApi - fetch parameter creator
 * @export
 */
export declare const OrganizationsApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Add an organization to a new cluster.
     * @summary Add Organization to Cluster
     * @param {string} clusterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrgToCluster(clusterName: string, options?: any): FetchArgs;
    /**
     * Confirm an AWS Marketplace subscription for an organization.
     * @summary Confirm AWS Marketplace Subscription
     * @param {MarketplaceSubscriptionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmMarketplaceSubscription(body: MarketplaceSubscriptionRequest, options?: any): FetchArgs;
    /**
     * Get the rate card for an organization.
     * @summary Get Rate Card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveRateCard(options?: any): FetchArgs;
    /**
     * List all billing line items for a specified month and year.
     * @summary Retrieve billing line items.
     * @param {number} [month]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBillingLineItems(month?: number | undefined, year?: number | undefined, options?: any): FetchArgs;
    /**
     * Get the redirect to customer billing portal.
     * @summary Retrieve customer billing portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBillingPortal(options?: any): FetchArgs;
    /**
     * Get metrics for all VIs with metrics enabled.
     * @summary Get metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetrics(options?: any): FetchArgs;
    /**
     * Retrieve information about current organization.
     * @summary Get Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(options?: any): FetchArgs;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Compute Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationCompute(month?: string | undefined, year?: string | undefined, options?: any): FetchArgs;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization ingest usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationIngest(month?: string | undefined, year?: string | undefined, options?: any): FetchArgs;
    /**
     * Retrieve settings for current organization.
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettings(options?: any): FetchArgs;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Storage Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStorage(month?: string | undefined, year?: string | undefined, options?: any): FetchArgs;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization trial credit usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationTrialCredit(month?: string | undefined, year?: string | undefined, options?: any): FetchArgs;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsage(options?: any): FetchArgs;
    /**
     * Get the payment information for your organization.
     * @summary Retrieve payment information about payment method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethod(options?: any): FetchArgs;
    /**
     * Get stored payment information for your organization.
     * @summary Retrieve payment information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentSource(options?: any): FetchArgs;
    /**
     * Get stored sso information for your organization.
     * @summary Retrieve sso settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSsoSettings(options?: any): FetchArgs;
    /**
     * Fetch time series metrics, for a specified VI, time interval, and granularity.
     * @summary Get time series metrics.
     * @param {string} [virtual_instance_id]
     * @param {'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU'} [metric_type]
     * @param {number} [start]
     * @param {number} [end]
     * @param {number} [granularity]
     * @param {number} [limit]
     * @param {string} [collection_path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTimeSeriesMetrics(virtual_instance_id?: string | undefined, metric_type?: "COLLECTION" | "QUERY_LAMBDA" | "VIRTUAL_INSTANCE" | "VIRTUAL_INSTANCE_QUERY" | "VIRTUAL_INSTANCE_STORAGE" | "SLOW_QUERY_COUNT" | "SLOW_QUERIES" | "PERCENTILE_QUERY_LATENCY" | "QUERY_COUNT" | "COLLECTION_BULK_INGEST_CPU" | undefined, start?: number | undefined, end?: number | undefined, granularity?: number | undefined, limit?: number | undefined, collection_path?: string | undefined, options?: any): FetchArgs;
    /**
     * List all credits for an organization.
     * @summary Retrieve credits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCredits(options?: any): FetchArgs;
    /**
     * Update MFA settings for your organization.
     * @summary Update MFA settings
     * @param {UpdateOrgMfaSettingsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMfaSettings(body: UpdateOrgMfaSettingsRequest, options?: any): FetchArgs;
    /**
     * Update payment settings with new Stripe Source id.
     * @summary Update Payment Information
     * @param {UpdateOrgPaymentMethodRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentSource(body: UpdateOrgPaymentMethodRequest, options?: any): FetchArgs;
    /**
     * Update SSO settings with certificates and redirect links.
     * @summary Update SSO settings
     * @param {UpdateSsoRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSsoSettings(body: UpdateSsoRequest, options?: any): FetchArgs;
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export declare const OrganizationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Add an organization to a new cluster.
     * @summary Add Organization to Cluster
     * @param {string} clusterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrgToCluster(clusterName: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Confirm an AWS Marketplace subscription for an organization.
     * @summary Confirm AWS Marketplace Subscription
     * @param {MarketplaceSubscriptionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmMarketplaceSubscription(body: MarketplaceSubscriptionRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Get the rate card for an organization.
     * @summary Get Rate Card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveRateCard(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<RateCardResponse>;
    /**
     * List all billing line items for a specified month and year.
     * @summary Retrieve billing line items.
     * @param {number} [month]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBillingLineItems(month?: number | undefined, year?: number | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<LineItemsResponse>;
    /**
     * Get the redirect to customer billing portal.
     * @summary Retrieve customer billing portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBillingPortal(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgBillingPortalResponse>;
    /**
     * Get metrics for all VIs with metrics enabled.
     * @summary Get metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetrics(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Retrieve information about current organization.
     * @summary Get Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrganizationResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Compute Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationCompute(month?: string | undefined, year?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgComputeResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization ingest usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationIngest(month?: string | undefined, year?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgIngestResponse>;
    /**
     * Retrieve settings for current organization.
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettings(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgSettingsResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Storage Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStorage(month?: string | undefined, year?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgStorageResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization trial credit usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationTrialCredit(month?: string | undefined, year?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgTrialUsageResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsage(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgUsageResponse>;
    /**
     * Get the payment information for your organization.
     * @summary Retrieve payment information about payment method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethod(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgPaymentMethodResponse>;
    /**
     * Get stored payment information for your organization.
     * @summary Retrieve payment information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentSource(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgInvoicesResponse>;
    /**
     * Get stored sso information for your organization.
     * @summary Retrieve sso settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSsoSettings(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgSettingsResponse>;
    /**
     * Fetch time series metrics, for a specified VI, time interval, and granularity.
     * @summary Get time series metrics.
     * @param {string} [virtual_instance_id]
     * @param {'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU'} [metric_type]
     * @param {number} [start]
     * @param {number} [end]
     * @param {number} [granularity]
     * @param {number} [limit]
     * @param {string} [collection_path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTimeSeriesMetrics(virtual_instance_id?: string | undefined, metric_type?: "COLLECTION" | "QUERY_LAMBDA" | "VIRTUAL_INSTANCE" | "VIRTUAL_INSTANCE_QUERY" | "VIRTUAL_INSTANCE_STORAGE" | "SLOW_QUERY_COUNT" | "SLOW_QUERIES" | "PERCENTILE_QUERY_LATENCY" | "QUERY_COUNT" | "COLLECTION_BULK_INGEST_CPU" | undefined, start?: number | undefined, end?: number | undefined, granularity?: number | undefined, limit?: number | undefined, collection_path?: string | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<TimeSeriesMetricsResponse>;
    /**
     * List all credits for an organization.
     * @summary Retrieve credits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCredits(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListCreditsResponse>;
    /**
     * Update MFA settings for your organization.
     * @summary Update MFA settings
     * @param {UpdateOrgMfaSettingsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMfaSettings(body: UpdateOrgMfaSettingsRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgSettingsResponse>;
    /**
     * Update payment settings with new Stripe Source id.
     * @summary Update Payment Information
     * @param {UpdateOrgPaymentMethodRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentSource(body: UpdateOrgPaymentMethodRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgPaymentMethodResponse>;
    /**
     * Update SSO settings with certificates and redirect links.
     * @summary Update SSO settings
     * @param {UpdateSsoRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSsoSettings(body: UpdateSsoRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<OrgSettingsResponse>;
};
/**
 * OrganizationsApi - factory interface
 * @export
 */
export declare const OrganizationsApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Add an organization to a new cluster.
     * @summary Add Organization to Cluster
     * @param {string} clusterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addOrgToCluster(clusterName: string, options?: any): Promise<Response>;
    /**
     * Confirm an AWS Marketplace subscription for an organization.
     * @summary Confirm AWS Marketplace Subscription
     * @param {MarketplaceSubscriptionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmMarketplaceSubscription(body: MarketplaceSubscriptionRequest, options?: any): Promise<Response>;
    /**
     * Get the rate card for an organization.
     * @summary Get Rate Card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveRateCard(options?: any): Promise<RateCardResponse>;
    /**
     * List all billing line items for a specified month and year.
     * @summary Retrieve billing line items.
     * @param {number} [month]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBillingLineItems(month?: number | undefined, year?: number | undefined, options?: any): Promise<LineItemsResponse>;
    /**
     * Get the redirect to customer billing portal.
     * @summary Retrieve customer billing portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBillingPortal(options?: any): Promise<OrgBillingPortalResponse>;
    /**
     * Get metrics for all VIs with metrics enabled.
     * @summary Get metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetrics(options?: any): Promise<Response>;
    /**
     * Retrieve information about current organization.
     * @summary Get Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(options?: any): Promise<OrganizationResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Compute Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationCompute(month?: string | undefined, year?: string | undefined, options?: any): Promise<OrgComputeResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization ingest usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationIngest(month?: string | undefined, year?: string | undefined, options?: any): Promise<OrgIngestResponse>;
    /**
     * Retrieve settings for current organization.
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettings(options?: any): Promise<OrgSettingsResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Storage Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStorage(month?: string | undefined, year?: string | undefined, options?: any): Promise<OrgStorageResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization trial credit usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationTrialCredit(month?: string | undefined, year?: string | undefined, options?: any): Promise<OrgTrialUsageResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsage(options?: any): Promise<OrgUsageResponse>;
    /**
     * Get the payment information for your organization.
     * @summary Retrieve payment information about payment method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethod(options?: any): Promise<OrgPaymentMethodResponse>;
    /**
     * Get stored payment information for your organization.
     * @summary Retrieve payment information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentSource(options?: any): Promise<OrgInvoicesResponse>;
    /**
     * Get stored sso information for your organization.
     * @summary Retrieve sso settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSsoSettings(options?: any): Promise<OrgSettingsResponse>;
    /**
     * Fetch time series metrics, for a specified VI, time interval, and granularity.
     * @summary Get time series metrics.
     * @param {string} [virtual_instance_id]
     * @param {'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU'} [metric_type]
     * @param {number} [start]
     * @param {number} [end]
     * @param {number} [granularity]
     * @param {number} [limit]
     * @param {string} [collection_path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTimeSeriesMetrics(virtual_instance_id?: string | undefined, metric_type?: "COLLECTION" | "QUERY_LAMBDA" | "VIRTUAL_INSTANCE" | "VIRTUAL_INSTANCE_QUERY" | "VIRTUAL_INSTANCE_STORAGE" | "SLOW_QUERY_COUNT" | "SLOW_QUERIES" | "PERCENTILE_QUERY_LATENCY" | "QUERY_COUNT" | "COLLECTION_BULK_INGEST_CPU" | undefined, start?: number | undefined, end?: number | undefined, granularity?: number | undefined, limit?: number | undefined, collection_path?: string | undefined, options?: any): Promise<TimeSeriesMetricsResponse>;
    /**
     * List all credits for an organization.
     * @summary Retrieve credits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCredits(options?: any): Promise<ListCreditsResponse>;
    /**
     * Update MFA settings for your organization.
     * @summary Update MFA settings
     * @param {UpdateOrgMfaSettingsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMfaSettings(body: UpdateOrgMfaSettingsRequest, options?: any): Promise<OrgSettingsResponse>;
    /**
     * Update payment settings with new Stripe Source id.
     * @summary Update Payment Information
     * @param {UpdateOrgPaymentMethodRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentSource(body: UpdateOrgPaymentMethodRequest, options?: any): Promise<OrgPaymentMethodResponse>;
    /**
     * Update SSO settings with certificates and redirect links.
     * @summary Update SSO settings
     * @param {UpdateSsoRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSsoSettings(body: UpdateSsoRequest, options?: any): Promise<OrgSettingsResponse>;
};
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export declare class OrganizationsApi extends BaseAPI {
    /**
     * Add an organization to a new cluster.
     * @summary Add Organization to Cluster
     * @param {string} clusterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    addOrgToCluster(clusterName: string, options?: any): Promise<Response>;
    /**
     * Confirm an AWS Marketplace subscription for an organization.
     * @summary Confirm AWS Marketplace Subscription
     * @param {MarketplaceSubscriptionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    confirmMarketplaceSubscription(body: MarketplaceSubscriptionRequest, options?: any): Promise<Response>;
    /**
     * Get the rate card for an organization.
     * @summary Get Rate Card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getActiveRateCard(options?: any): Promise<RateCardResponse>;
    /**
     * List all billing line items for a specified month and year.
     * @summary Retrieve billing line items.
     * @param {number} [month]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getBillingLineItems(month?: number, year?: number, options?: any): Promise<LineItemsResponse>;
    /**
     * Get the redirect to customer billing portal.
     * @summary Retrieve customer billing portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getBillingPortal(options?: any): Promise<OrgBillingPortalResponse>;
    /**
     * Get metrics for all VIs with metrics enabled.
     * @summary Get metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getMetrics(options?: any): Promise<Response>;
    /**
     * Retrieve information about current organization.
     * @summary Get Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganization(options?: any): Promise<OrganizationResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Compute Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationCompute(month?: string, year?: string, options?: any): Promise<OrgComputeResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization ingest usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationIngest(month?: string, year?: string, options?: any): Promise<OrgIngestResponse>;
    /**
     * Retrieve settings for current organization.
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationSettings(options?: any): Promise<OrgSettingsResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Storage Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationStorage(month?: string, year?: string, options?: any): Promise<OrgStorageResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization trial credit usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationTrialCredit(month?: string, year?: string, options?: any): Promise<OrgTrialUsageResponse>;
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationUsage(options?: any): Promise<OrgUsageResponse>;
    /**
     * Get the payment information for your organization.
     * @summary Retrieve payment information about payment method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getPaymentMethod(options?: any): Promise<OrgPaymentMethodResponse>;
    /**
     * Get stored payment information for your organization.
     * @summary Retrieve payment information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getPaymentSource(options?: any): Promise<OrgInvoicesResponse>;
    /**
     * Get stored sso information for your organization.
     * @summary Retrieve sso settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getSsoSettings(options?: any): Promise<OrgSettingsResponse>;
    /**
     * Fetch time series metrics, for a specified VI, time interval, and granularity.
     * @summary Get time series metrics.
     * @param {string} [virtual_instance_id]
     * @param {'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU'} [metric_type]
     * @param {number} [start]
     * @param {number} [end]
     * @param {number} [granularity]
     * @param {number} [limit]
     * @param {string} [collection_path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getTimeSeriesMetrics(virtual_instance_id?: string, metric_type?: 'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU', start?: number, end?: number, granularity?: number, limit?: number, collection_path?: string, options?: any): Promise<TimeSeriesMetricsResponse>;
    /**
     * List all credits for an organization.
     * @summary Retrieve credits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listCredits(options?: any): Promise<ListCreditsResponse>;
    /**
     * Update MFA settings for your organization.
     * @summary Update MFA settings
     * @param {UpdateOrgMfaSettingsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateMfaSettings(body: UpdateOrgMfaSettingsRequest, options?: any): Promise<OrgSettingsResponse>;
    /**
     * Update payment settings with new Stripe Source id.
     * @summary Update Payment Information
     * @param {UpdateOrgPaymentMethodRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updatePaymentSource(body: UpdateOrgPaymentMethodRequest, options?: any): Promise<OrgPaymentMethodResponse>;
    /**
     * Update SSO settings with certificates and redirect links.
     * @summary Update SSO settings
     * @param {UpdateSsoRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateSsoSettings(body: UpdateSsoRequest, options?: any): Promise<OrgSettingsResponse>;
}
/**
 * ProvisionApi - fetch parameter creator
 * @export
 */
export declare const ProvisionApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Provision an organization
     * @param {CreateOrganizationRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provisionOrganization(body: CreateOrganizationRequest, options?: any): FetchArgs;
    /**
     *
     * @summary Provision a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provisionUser(options?: any): FetchArgs;
    /**
     *
     * @summary Resend verification email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(options?: any): FetchArgs;
};
/**
 * ProvisionApi - functional programming interface
 * @export
 */
export declare const ProvisionApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Provision an organization
     * @param {CreateOrganizationRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provisionOrganization(body: CreateOrganizationRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     *
     * @summary Provision a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provisionUser(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     *
     * @summary Resend verification email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
};
/**
 * ProvisionApi - factory interface
 * @export
 */
export declare const ProvisionApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     *
     * @summary Provision an organization
     * @param {CreateOrganizationRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provisionOrganization(body: CreateOrganizationRequest, options?: any): Promise<Response>;
    /**
     *
     * @summary Provision a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    provisionUser(options?: any): Promise<Response>;
    /**
     *
     * @summary Resend verification email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(options?: any): Promise<Response>;
};
/**
 * ProvisionApi - object-oriented interface
 * @export
 * @class ProvisionApi
 * @extends {BaseAPI}
 */
export declare class ProvisionApi extends BaseAPI {
    /**
     *
     * @summary Provision an organization
     * @param {CreateOrganizationRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    provisionOrganization(body: CreateOrganizationRequest, options?: any): Promise<Response>;
    /**
     *
     * @summary Provision a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    provisionUser(options?: any): Promise<Response>;
    /**
     *
     * @summary Resend verification email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    verifyEmail(options?: any): Promise<Response>;
}
/**
 * QueriesApi - fetch parameter creator
 * @export
 */
export declare const QueriesApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Returns information for a query
     * @summary Get information for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuery(queryId: string, options?: any): FetchArgs;
    /**
     *
     * @summary Fetch paginated query results
     * @param {string} queryId
     * @param {string} cursor
     * @param {number} [docs]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryPagination(queryId: string, cursor: string, docs?: number | undefined, offset?: number | undefined, options?: any): FetchArgs;
    /**
     * Fetch a query plan from Rockset's planner for a given SQL query.
     * @summary Plan Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryPlan(body: QueryRequest, options?: any): FetchArgs;
    /**
     * Fetch execution statistics for a particular query.
     * @summary Fetch Query Stats
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryStats(queryId: string, options?: any): FetchArgs;
    /**
     * Lists data about ongoing queries.
     * @summary List all query pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQueryPages(options?: any): FetchArgs;
    /**
     * Lists data about this queries pages.
     * @summary Get pages for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryPages(queryId: string, options?: any): FetchArgs;
    /**
     * Make a SQL query to Rockset.
     * @summary Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    query(body: QueryRequest, options?: any): FetchArgs;
    /**
     * Validate a SQL query with Rockset's parser and planner.
     * @summary Validate Query
     * @param {QueryRequest} body JSON object
     * @param {boolean} [parameters]
     * @param {boolean} [allow_undefined_parameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validate(body: QueryRequest, parameters?: boolean | undefined, allow_undefined_parameters?: boolean | undefined, options?: any): FetchArgs;
    /**
     * Validate a SQL Expression with Rockset's parser and planner.
     * @summary Validate Expression
     * @param {ValidateExpressionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateExpression(body: ValidateExpressionRequest, options?: any): FetchArgs;
    /**
     * Validate field mapping query with Rockset's parser and planner.
     * @summary Validate field mapping query
     * @param {ValidateFieldMappingQueryRequest} body SQL query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFieldMappingQuery(body: ValidateFieldMappingQueryRequest, options?: any): FetchArgs;
};
/**
 * QueriesApi - functional programming interface
 * @export
 */
export declare const QueriesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Returns information for a query
     * @summary Get information for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuery(queryId: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryResponse>;
    /**
     *
     * @summary Fetch paginated query results
     * @param {string} queryId
     * @param {string} cursor
     * @param {number} [docs]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryPagination(queryId: string, cursor: string, docs?: number | undefined, offset?: number | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryPaginationResponse>;
    /**
     * Fetch a query plan from Rockset's planner for a given SQL query.
     * @summary Plan Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryPlan(body: QueryRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryResponse>;
    /**
     * Fetch execution statistics for a particular query.
     * @summary Fetch Query Stats
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryStats(queryId: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryStatsResponse>;
    /**
     * Lists data about ongoing queries.
     * @summary List all query pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQueryPages(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListAllQueryPagesResponse>;
    /**
     * Lists data about this queries pages.
     * @summary Get pages for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryPages(queryId: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryPagesResponse>;
    /**
     * Make a SQL query to Rockset.
     * @summary Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    query(body: QueryRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryResponse>;
    /**
     * Validate a SQL query with Rockset's parser and planner.
     * @summary Validate Query
     * @param {QueryRequest} body JSON object
     * @param {boolean} [parameters]
     * @param {boolean} [allow_undefined_parameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validate(body: QueryRequest, parameters?: boolean | undefined, allow_undefined_parameters?: boolean | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ValidateQueryResponse>;
    /**
     * Validate a SQL Expression with Rockset's parser and planner.
     * @summary Validate Expression
     * @param {ValidateExpressionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateExpression(body: ValidateExpressionRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ValidateExpressionResponse>;
    /**
     * Validate field mapping query with Rockset's parser and planner.
     * @summary Validate field mapping query
     * @param {ValidateFieldMappingQueryRequest} body SQL query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFieldMappingQuery(body: ValidateFieldMappingQueryRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ValidateFieldMappingQueryResponse>;
};
/**
 * QueriesApi - factory interface
 * @export
 */
export declare const QueriesApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Returns information for a query
     * @summary Get information for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuery(queryId: string, options?: any): Promise<QueryResponse>;
    /**
     *
     * @summary Fetch paginated query results
     * @param {string} queryId
     * @param {string} cursor
     * @param {number} [docs]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryPagination(queryId: string, cursor: string, docs?: number | undefined, offset?: number | undefined, options?: any): Promise<QueryPaginationResponse>;
    /**
     * Fetch a query plan from Rockset's planner for a given SQL query.
     * @summary Plan Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryPlan(body: QueryRequest, options?: any): Promise<QueryResponse>;
    /**
     * Fetch execution statistics for a particular query.
     * @summary Fetch Query Stats
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryStats(queryId: string, options?: any): Promise<QueryStatsResponse>;
    /**
     * Lists data about ongoing queries.
     * @summary List all query pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQueryPages(options?: any): Promise<ListAllQueryPagesResponse>;
    /**
     * Lists data about this queries pages.
     * @summary Get pages for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryPages(queryId: string, options?: any): Promise<ListQueryPagesResponse>;
    /**
     * Make a SQL query to Rockset.
     * @summary Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    query(body: QueryRequest, options?: any): Promise<QueryResponse>;
    /**
     * Validate a SQL query with Rockset's parser and planner.
     * @summary Validate Query
     * @param {QueryRequest} body JSON object
     * @param {boolean} [parameters]
     * @param {boolean} [allow_undefined_parameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validate(body: QueryRequest, parameters?: boolean | undefined, allow_undefined_parameters?: boolean | undefined, options?: any): Promise<ValidateQueryResponse>;
    /**
     * Validate a SQL Expression with Rockset's parser and planner.
     * @summary Validate Expression
     * @param {ValidateExpressionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateExpression(body: ValidateExpressionRequest, options?: any): Promise<ValidateExpressionResponse>;
    /**
     * Validate field mapping query with Rockset's parser and planner.
     * @summary Validate field mapping query
     * @param {ValidateFieldMappingQueryRequest} body SQL query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateFieldMappingQuery(body: ValidateFieldMappingQueryRequest, options?: any): Promise<ValidateFieldMappingQueryResponse>;
};
/**
 * QueriesApi - object-oriented interface
 * @export
 * @class QueriesApi
 * @extends {BaseAPI}
 */
export declare class QueriesApi extends BaseAPI {
    /**
     * Returns information for a query
     * @summary Get information for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    getQuery(queryId: string, options?: any): Promise<QueryResponse>;
    /**
     *
     * @summary Fetch paginated query results
     * @param {string} queryId
     * @param {string} cursor
     * @param {number} [docs]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    getQueryPagination(queryId: string, cursor: string, docs?: number, offset?: number, options?: any): Promise<QueryPaginationResponse>;
    /**
     * Fetch a query plan from Rockset's planner for a given SQL query.
     * @summary Plan Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    getQueryPlan(body: QueryRequest, options?: any): Promise<QueryResponse>;
    /**
     * Fetch execution statistics for a particular query.
     * @summary Fetch Query Stats
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    getQueryStats(queryId: string, options?: any): Promise<QueryStatsResponse>;
    /**
     * Lists data about ongoing queries.
     * @summary List all query pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    listAllQueryPages(options?: any): Promise<ListAllQueryPagesResponse>;
    /**
     * Lists data about this queries pages.
     * @summary Get pages for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    listQueryPages(queryId: string, options?: any): Promise<ListQueryPagesResponse>;
    /**
     * Make a SQL query to Rockset.
     * @summary Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    query(body: QueryRequest, options?: any): Promise<QueryResponse>;
    /**
     * Validate a SQL query with Rockset's parser and planner.
     * @summary Validate Query
     * @param {QueryRequest} body JSON object
     * @param {boolean} [parameters]
     * @param {boolean} [allow_undefined_parameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    validate(body: QueryRequest, parameters?: boolean, allow_undefined_parameters?: boolean, options?: any): Promise<ValidateQueryResponse>;
    /**
     * Validate a SQL Expression with Rockset's parser and planner.
     * @summary Validate Expression
     * @param {ValidateExpressionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    validateExpression(body: ValidateExpressionRequest, options?: any): Promise<ValidateExpressionResponse>;
    /**
     * Validate field mapping query with Rockset's parser and planner.
     * @summary Validate field mapping query
     * @param {ValidateFieldMappingQueryRequest} body SQL query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    validateFieldMappingQuery(body: ValidateFieldMappingQueryRequest, options?: any): Promise<ValidateFieldMappingQueryResponse>;
}
/**
 * QueryLambdasApi - fetch parameter creator
 * @export
 */
export declare const QueryLambdasApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a Query Lambda in given workspace.
     * @summary Create Query Lambda
     * @param {string} workspace name of the workspace
     * @param {CreateQueryLambdaRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueryLambda(workspace: string, body: CreateQueryLambdaRequest, options?: any): FetchArgs;
    /**
     * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
     * @summary Create Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {CreateQueryLambdaTagRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueryLambdaTag(workspace: string, queryLambda: string, body: CreateQueryLambdaTagRequest, options?: any): FetchArgs;
    /**
     * Delete a Query Lambda.
     * @summary Delete Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambda(workspace: string, queryLambda: string, options?: any): FetchArgs;
    /**
     * Delete a tag for a specific Query Lambda
     * @summary Delete Query Lambda Tag Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambdaTag(workspace: string, queryLambda: string, tag: string, options?: any): FetchArgs;
    /**
     * Delete a Query Lambda version.
     * @summary Delete Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambdaVersion(workspace: string, queryLambda: string, version: string, options?: any): FetchArgs;
    /**
     * Execute a particular version of a Query Lambda.
     * @summary Execute Query Lambda By Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeQueryLambda(workspace: string, queryLambda: string, version: string, body?: ExecuteQueryLambdaRequest | undefined, options?: any): FetchArgs;
    /**
     * Execute the Query Lambda version associated with a given tag.
     * @summary Execute Query Lambda By Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag tag
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeQueryLambdaByTag(workspace: string, queryLambda: string, tag: string, body?: ExecuteQueryLambdaRequest | undefined, options?: any): FetchArgs;
    /**
     * Retrieve the Query Lambda version associated with a given tag.
     * @summary Retrieve Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryLambdaTagVersion(workspace: string, queryLambda: string, tag: string, options?: any): FetchArgs;
    /**
     * Retrieve details for a specified version of a Query Lambda.
     * @summary Retrieve Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryLambdaVersion(workspace: string, queryLambda: string, version: string, options?: any): FetchArgs;
    /**
     * List all Query Lambdas in an organization.
     * @summary List Query Lambdas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQueryLambdas(options?: any): FetchArgs;
    /**
     * List all distinct Query Lambda tags in an organization.
     * @summary List All Query Lambda Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationTags(options?: any): FetchArgs;
    /**
     * List all Query Lambda versions associated with a given tag.
     * @summary List Query Lambda Tag Versions
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaTagVersions(tag: string, options?: any): FetchArgs;
    /**
     * List all tags associated with a Query Lambda
     * @summary List Query Lambda Tags
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaTags(workspace: string, queryLambda: string, options?: any): FetchArgs;
    /**
     * List all versions of a Query Lambda.
     * @summary List Query Lambda Versions
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaVersions(workspace: string, queryLambda: string, options?: any): FetchArgs;
    /**
     * List all Query Lambdas under given workspace.
     * @summary List Query Lambdas in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasInWorkspace(workspace: string, options?: any): FetchArgs;
    /**
     * Transfer ownership of a Query Lambda to a new user.
     * @summary Transfer Ownership of a Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, queryLambda: string, body: TransferOwnershipRequest, options?: any): FetchArgs;
    /**
     * Create a new version of a Query Lambda in given workspace.
     * @summary Update Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {UpdateQueryLambdaRequest} body JSON object
     * @param {boolean} [create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueryLambda(workspace: string, queryLambda: string, body: UpdateQueryLambdaRequest, create?: boolean | undefined, options?: any): FetchArgs;
};
/**
 * QueryLambdasApi - functional programming interface
 * @export
 */
export declare const QueryLambdasApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a Query Lambda in given workspace.
     * @summary Create Query Lambda
     * @param {string} workspace name of the workspace
     * @param {CreateQueryLambdaRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueryLambda(workspace: string, body: CreateQueryLambdaRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryLambdaVersionResponse>;
    /**
     * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
     * @summary Create Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {CreateQueryLambdaTagRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueryLambdaTag(workspace: string, queryLambda: string, body: CreateQueryLambdaTagRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryLambdaTagResponse>;
    /**
     * Delete a Query Lambda.
     * @summary Delete Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambda(workspace: string, queryLambda: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteQueryLambdaResponse>;
    /**
     * Delete a tag for a specific Query Lambda
     * @summary Delete Query Lambda Tag Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambdaTag(workspace: string, queryLambda: string, tag: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryLambdaTagResponse>;
    /**
     * Delete a Query Lambda version.
     * @summary Delete Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambdaVersion(workspace: string, queryLambda: string, version: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryLambdaVersionResponse>;
    /**
     * Execute a particular version of a Query Lambda.
     * @summary Execute Query Lambda By Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeQueryLambda(workspace: string, queryLambda: string, version: string, body?: ExecuteQueryLambdaRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryResponse>;
    /**
     * Execute the Query Lambda version associated with a given tag.
     * @summary Execute Query Lambda By Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag tag
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeQueryLambdaByTag(workspace: string, queryLambda: string, tag: string, body?: ExecuteQueryLambdaRequest | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryResponse>;
    /**
     * Retrieve the Query Lambda version associated with a given tag.
     * @summary Retrieve Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryLambdaTagVersion(workspace: string, queryLambda: string, tag: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryLambdaTagResponse>;
    /**
     * Retrieve details for a specified version of a Query Lambda.
     * @summary Retrieve Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryLambdaVersion(workspace: string, queryLambda: string, version: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryLambdaVersionResponse>;
    /**
     * List all Query Lambdas in an organization.
     * @summary List Query Lambdas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQueryLambdas(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryLambdasResponse>;
    /**
     * List all distinct Query Lambda tags in an organization.
     * @summary List All Query Lambda Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationTags(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryLambdaTagsResponse>;
    /**
     * List all Query Lambda versions associated with a given tag.
     * @summary List Query Lambda Tag Versions
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaTagVersions(tag: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryLambdaVersionsResponse>;
    /**
     * List all tags associated with a Query Lambda
     * @summary List Query Lambda Tags
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaTags(workspace: string, queryLambda: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryLambdaTagsResponse>;
    /**
     * List all versions of a Query Lambda.
     * @summary List Query Lambda Versions
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaVersions(workspace: string, queryLambda: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryLambdaVersionsResponse>;
    /**
     * List all Query Lambdas under given workspace.
     * @summary List Query Lambdas in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasInWorkspace(workspace: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListQueryLambdasResponse>;
    /**
     * Transfer ownership of a Query Lambda to a new user.
     * @summary Transfer Ownership of a Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, queryLambda: string, body: TransferOwnershipRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Create a new version of a Query Lambda in given workspace.
     * @summary Update Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {UpdateQueryLambdaRequest} body JSON object
     * @param {boolean} [create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueryLambda(workspace: string, queryLambda: string, body: UpdateQueryLambdaRequest, create?: boolean | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<QueryLambdaVersionResponse>;
};
/**
 * QueryLambdasApi - factory interface
 * @export
 */
export declare const QueryLambdasApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create a Query Lambda in given workspace.
     * @summary Create Query Lambda
     * @param {string} workspace name of the workspace
     * @param {CreateQueryLambdaRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueryLambda(workspace: string, body: CreateQueryLambdaRequest, options?: any): Promise<QueryLambdaVersionResponse>;
    /**
     * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
     * @summary Create Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {CreateQueryLambdaTagRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQueryLambdaTag(workspace: string, queryLambda: string, body: CreateQueryLambdaTagRequest, options?: any): Promise<QueryLambdaTagResponse>;
    /**
     * Delete a Query Lambda.
     * @summary Delete Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambda(workspace: string, queryLambda: string, options?: any): Promise<DeleteQueryLambdaResponse>;
    /**
     * Delete a tag for a specific Query Lambda
     * @summary Delete Query Lambda Tag Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambdaTag(workspace: string, queryLambda: string, tag: string, options?: any): Promise<QueryLambdaTagResponse>;
    /**
     * Delete a Query Lambda version.
     * @summary Delete Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQueryLambdaVersion(workspace: string, queryLambda: string, version: string, options?: any): Promise<QueryLambdaVersionResponse>;
    /**
     * Execute a particular version of a Query Lambda.
     * @summary Execute Query Lambda By Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeQueryLambda(workspace: string, queryLambda: string, version: string, body?: ExecuteQueryLambdaRequest | undefined, options?: any): Promise<QueryResponse>;
    /**
     * Execute the Query Lambda version associated with a given tag.
     * @summary Execute Query Lambda By Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag tag
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeQueryLambdaByTag(workspace: string, queryLambda: string, tag: string, body?: ExecuteQueryLambdaRequest | undefined, options?: any): Promise<QueryResponse>;
    /**
     * Retrieve the Query Lambda version associated with a given tag.
     * @summary Retrieve Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryLambdaTagVersion(workspace: string, queryLambda: string, tag: string, options?: any): Promise<QueryLambdaTagResponse>;
    /**
     * Retrieve details for a specified version of a Query Lambda.
     * @summary Retrieve Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueryLambdaVersion(workspace: string, queryLambda: string, version: string, options?: any): Promise<QueryLambdaVersionResponse>;
    /**
     * List all Query Lambdas in an organization.
     * @summary List Query Lambdas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAllQueryLambdas(options?: any): Promise<ListQueryLambdasResponse>;
    /**
     * List all distinct Query Lambda tags in an organization.
     * @summary List All Query Lambda Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationTags(options?: any): Promise<ListQueryLambdaTagsResponse>;
    /**
     * List all Query Lambda versions associated with a given tag.
     * @summary List Query Lambda Tag Versions
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaTagVersions(tag: string, options?: any): Promise<ListQueryLambdaVersionsResponse>;
    /**
     * List all tags associated with a Query Lambda
     * @summary List Query Lambda Tags
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaTags(workspace: string, queryLambda: string, options?: any): Promise<ListQueryLambdaTagsResponse>;
    /**
     * List all versions of a Query Lambda.
     * @summary List Query Lambda Versions
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdaVersions(workspace: string, queryLambda: string, options?: any): Promise<ListQueryLambdaVersionsResponse>;
    /**
     * List all Query Lambdas under given workspace.
     * @summary List Query Lambdas in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listQueryLambdasInWorkspace(workspace: string, options?: any): Promise<ListQueryLambdasResponse>;
    /**
     * Transfer ownership of a Query Lambda to a new user.
     * @summary Transfer Ownership of a Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, queryLambda: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
    /**
     * Create a new version of a Query Lambda in given workspace.
     * @summary Update Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {UpdateQueryLambdaRequest} body JSON object
     * @param {boolean} [create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateQueryLambda(workspace: string, queryLambda: string, body: UpdateQueryLambdaRequest, create?: boolean | undefined, options?: any): Promise<QueryLambdaVersionResponse>;
};
/**
 * QueryLambdasApi - object-oriented interface
 * @export
 * @class QueryLambdasApi
 * @extends {BaseAPI}
 */
export declare class QueryLambdasApi extends BaseAPI {
    /**
     * Create a Query Lambda in given workspace.
     * @summary Create Query Lambda
     * @param {string} workspace name of the workspace
     * @param {CreateQueryLambdaRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    createQueryLambda(workspace: string, body: CreateQueryLambdaRequest, options?: any): Promise<QueryLambdaVersionResponse>;
    /**
     * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
     * @summary Create Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {CreateQueryLambdaTagRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    createQueryLambdaTag(workspace: string, queryLambda: string, body: CreateQueryLambdaTagRequest, options?: any): Promise<QueryLambdaTagResponse>;
    /**
     * Delete a Query Lambda.
     * @summary Delete Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    deleteQueryLambda(workspace: string, queryLambda: string, options?: any): Promise<DeleteQueryLambdaResponse>;
    /**
     * Delete a tag for a specific Query Lambda
     * @summary Delete Query Lambda Tag Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    deleteQueryLambdaTag(workspace: string, queryLambda: string, tag: string, options?: any): Promise<QueryLambdaTagResponse>;
    /**
     * Delete a Query Lambda version.
     * @summary Delete Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    deleteQueryLambdaVersion(workspace: string, queryLambda: string, version: string, options?: any): Promise<QueryLambdaVersionResponse>;
    /**
     * Execute a particular version of a Query Lambda.
     * @summary Execute Query Lambda By Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    executeQueryLambda(workspace: string, queryLambda: string, version: string, body?: ExecuteQueryLambdaRequest, options?: any): Promise<QueryResponse>;
    /**
     * Execute the Query Lambda version associated with a given tag.
     * @summary Execute Query Lambda By Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag tag
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    executeQueryLambdaByTag(workspace: string, queryLambda: string, tag: string, body?: ExecuteQueryLambdaRequest, options?: any): Promise<QueryResponse>;
    /**
     * Retrieve the Query Lambda version associated with a given tag.
     * @summary Retrieve Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    getQueryLambdaTagVersion(workspace: string, queryLambda: string, tag: string, options?: any): Promise<QueryLambdaTagResponse>;
    /**
     * Retrieve details for a specified version of a Query Lambda.
     * @summary Retrieve Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    getQueryLambdaVersion(workspace: string, queryLambda: string, version: string, options?: any): Promise<QueryLambdaVersionResponse>;
    /**
     * List all Query Lambdas in an organization.
     * @summary List Query Lambdas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    listAllQueryLambdas(options?: any): Promise<ListQueryLambdasResponse>;
    /**
     * List all distinct Query Lambda tags in an organization.
     * @summary List All Query Lambda Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    listOrganizationTags(options?: any): Promise<ListQueryLambdaTagsResponse>;
    /**
     * List all Query Lambda versions associated with a given tag.
     * @summary List Query Lambda Tag Versions
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    listQueryLambdaTagVersions(tag: string, options?: any): Promise<ListQueryLambdaVersionsResponse>;
    /**
     * List all tags associated with a Query Lambda
     * @summary List Query Lambda Tags
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    listQueryLambdaTags(workspace: string, queryLambda: string, options?: any): Promise<ListQueryLambdaTagsResponse>;
    /**
     * List all versions of a Query Lambda.
     * @summary List Query Lambda Versions
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    listQueryLambdaVersions(workspace: string, queryLambda: string, options?: any): Promise<ListQueryLambdaVersionsResponse>;
    /**
     * List all Query Lambdas under given workspace.
     * @summary List Query Lambdas in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    listQueryLambdasInWorkspace(workspace: string, options?: any): Promise<ListQueryLambdasResponse>;
    /**
     * Transfer ownership of a Query Lambda to a new user.
     * @summary Transfer Ownership of a Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    transferOwnership(workspace: string, queryLambda: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
    /**
     * Create a new version of a Query Lambda in given workspace.
     * @summary Update Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {UpdateQueryLambdaRequest} body JSON object
     * @param {boolean} [create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    updateQueryLambda(workspace: string, queryLambda: string, body: UpdateQueryLambdaRequest, create?: boolean, options?: any): Promise<QueryLambdaVersionResponse>;
}
/**
 * StatusApi - fetch parameter creator
 * @export
 */
export declare const StatusApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Server responds with 200 if healthy.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): FetchArgs;
};
/**
 * StatusApi - functional programming interface
 * @export
 */
export declare const StatusApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Server responds with 200 if healthy.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<StatusResponse>;
};
/**
 * StatusApi - factory interface
 * @export
 */
export declare const StatusApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Server responds with 200 if healthy.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): Promise<StatusResponse>;
};
/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export declare class StatusApi extends BaseAPI {
    /**
     * Server responds with 200 if healthy.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    health(options?: any): Promise<StatusResponse>;
}
/**
 * TelemetryApi - fetch parameter creator
 * @export
 */
export declare const TelemetryApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Record an item.
     * @summary Record Activity
     * @param {TelemetryRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordActivity(body: TelemetryRequest, options?: any): FetchArgs;
};
/**
 * TelemetryApi - functional programming interface
 * @export
 */
export declare const TelemetryApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Record an item.
     * @summary Record Activity
     * @param {TelemetryRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordActivity(body: TelemetryRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<StatusResponse>;
};
/**
 * TelemetryApi - factory interface
 * @export
 */
export declare const TelemetryApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Record an item.
     * @summary Record Activity
     * @param {TelemetryRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordActivity(body: TelemetryRequest, options?: any): Promise<StatusResponse>;
};
/**
 * TelemetryApi - object-oriented interface
 * @export
 * @class TelemetryApi
 * @extends {BaseAPI}
 */
export declare class TelemetryApi extends BaseAPI {
    /**
     * Record an item.
     * @summary Record Activity
     * @param {TelemetryRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelemetryApi
     */
    recordActivity(body: TelemetryRequest, options?: any): Promise<StatusResponse>;
}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export declare const UsersApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a new user for an organization.
     * @summary Create User
     * @param {CreateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body: CreateUserRequest, options?: any): FetchArgs;
    /**
     * Delete a user from an organization.
     * @summary Delete User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(user: string, options?: any): FetchArgs;
    /**
     * Retrieve currently authenticated user.
     * @summary Retrieve Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options?: any): FetchArgs;
    /**
     *
     * @summary Get invite_state for current user's org_membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserInviteState(options?: any): FetchArgs;
    /**
     * Retrieve currently active user's nux values.
     * @summary Get Current User's Nux Values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserNux(options?: any): FetchArgs;
    /**
     *
     * @summary Get state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserState(options?: any): FetchArgs;
    /**
     *
     * @summary Get accepted_ToS value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserTos(options?: any): FetchArgs;
    /**
     * Functional in public API server's only - used to bootstrap Console
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserUnchecked(options?: any): FetchArgs;
    /**
     * Retrieve user by email.
     * @summary Retrieve User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(user: string, options?: any): FetchArgs;
    /**
     *
     * @summary Get query history for user.
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserQueryHistory(limit?: number | undefined, options?: any): FetchArgs;
    /**
     * List all roles for a user.
     * @summary List User Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(options?: any): FetchArgs;
    /**
     * Get all notification preferences.
     * @summary Get all notification preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUnsubscribePreferences(options?: any): FetchArgs;
    /**
     * Retrieve all users for an organization.
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: any): FetchArgs;
    /**
     *
     * @summary Set invite_state for current user's org_membership.
     * @param {InviteState} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserInviteState(body: InviteState, options?: any): FetchArgs;
    /**
     *
     * @summary Update state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserState(options?: any): FetchArgs;
    /**
     *
     * @summary Set accepted_ToS value to true for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserTos(options?: any): FetchArgs;
    /**
     *
     * @summary Update Auth0 to require MFA for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserMfa(options?: any): FetchArgs;
    /**
     * Update currently active user.
     * @summary Update Current User
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUser(body: UpdateUserRequest, options?: any): FetchArgs;
    /**
     * Update nux info for user.
     * @summary Update Nux Info for User
     * @param {UpdateUserNuxRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserNux(body: UpdateUserNuxRequest, options?: any): FetchArgs;
    /**
     * Update notification preference.
     * @summary Update notification preferences
     * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUnsubscribePreferences(body: UpdateUnsubscribePreferencesRequest, options?: any): FetchArgs;
    /**
     * Update a user in an organization.
     * @summary Update User
     * @param {string} user email of the user to update
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(user: string, body: UpdateUserRequest, options?: any): FetchArgs;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a new user for an organization.
     * @summary Create User
     * @param {CreateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body: CreateUserRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateUserResponse>;
    /**
     * Delete a user from an organization.
     * @summary Delete User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(user: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteUserResponse>;
    /**
     * Retrieve currently authenticated user.
     * @summary Retrieve Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<User>;
    /**
     *
     * @summary Get invite_state for current user's org_membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserInviteState(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<InviteState>;
    /**
     * Retrieve currently active user's nux values.
     * @summary Get Current User's Nux Values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserNux(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserNux>;
    /**
     *
     * @summary Get state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserState(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserState>;
    /**
     *
     * @summary Get accepted_ToS value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserTos(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetUserTosResponse>;
    /**
     * Functional in public API server's only - used to bootstrap Console
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserUnchecked(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<User>;
    /**
     * Retrieve user by email.
     * @summary Retrieve User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(user: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<User>;
    /**
     *
     * @summary Get query history for user.
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserQueryHistory(limit?: number | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserQueryHistoryResponse>;
    /**
     * List all roles for a user.
     * @summary List User Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListRolesResponse>;
    /**
     * Get all notification preferences.
     * @summary Get all notification preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUnsubscribePreferences(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListUnsubscribePreferencesResponse>;
    /**
     * Retrieve all users for an organization.
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListUsersResponse>;
    /**
     *
     * @summary Set invite_state for current user's org_membership.
     * @param {InviteState} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserInviteState(body: InviteState, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<InviteState>;
    /**
     *
     * @summary Update state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserState(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserState>;
    /**
     *
     * @summary Set accepted_ToS value to true for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserTos(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     *
     * @summary Update Auth0 to require MFA for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserMfa(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Update currently active user.
     * @summary Update Current User
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUser(body: UpdateUserRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<User>;
    /**
     * Update nux info for user.
     * @summary Update Nux Info for User
     * @param {UpdateUserNuxRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserNux(body: UpdateUserNuxRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserNux>;
    /**
     * Update notification preference.
     * @summary Update notification preferences
     * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUnsubscribePreferences(body: UpdateUnsubscribePreferencesRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UpdateUnsubscribePreferencesResponse>;
    /**
     * Update a user in an organization.
     * @summary Update User
     * @param {string} user email of the user to update
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(user: string, body: UpdateUserRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<User>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create a new user for an organization.
     * @summary Create User
     * @param {CreateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body: CreateUserRequest, options?: any): Promise<CreateUserResponse>;
    /**
     * Delete a user from an organization.
     * @summary Delete User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(user: string, options?: any): Promise<DeleteUserResponse>;
    /**
     * Retrieve currently authenticated user.
     * @summary Retrieve Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options?: any): Promise<User>;
    /**
     *
     * @summary Get invite_state for current user's org_membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserInviteState(options?: any): Promise<InviteState>;
    /**
     * Retrieve currently active user's nux values.
     * @summary Get Current User's Nux Values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserNux(options?: any): Promise<UserNux>;
    /**
     *
     * @summary Get state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserState(options?: any): Promise<UserState>;
    /**
     *
     * @summary Get accepted_ToS value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserTos(options?: any): Promise<GetUserTosResponse>;
    /**
     * Functional in public API server's only - used to bootstrap Console
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserUnchecked(options?: any): Promise<User>;
    /**
     * Retrieve user by email.
     * @summary Retrieve User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(user: string, options?: any): Promise<User>;
    /**
     *
     * @summary Get query history for user.
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserQueryHistory(limit?: number | undefined, options?: any): Promise<UserQueryHistoryResponse>;
    /**
     * List all roles for a user.
     * @summary List User Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(options?: any): Promise<ListRolesResponse>;
    /**
     * Get all notification preferences.
     * @summary Get all notification preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUnsubscribePreferences(options?: any): Promise<ListUnsubscribePreferencesResponse>;
    /**
     * Retrieve all users for an organization.
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: any): Promise<ListUsersResponse>;
    /**
     *
     * @summary Set invite_state for current user's org_membership.
     * @param {InviteState} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserInviteState(body: InviteState, options?: any): Promise<InviteState>;
    /**
     *
     * @summary Update state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserState(options?: any): Promise<UserState>;
    /**
     *
     * @summary Set accepted_ToS value to true for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setCurrentUserTos(options?: any): Promise<Response>;
    /**
     *
     * @summary Update Auth0 to require MFA for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserMfa(options?: any): Promise<Response>;
    /**
     * Update currently active user.
     * @summary Update Current User
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUser(body: UpdateUserRequest, options?: any): Promise<User>;
    /**
     * Update nux info for user.
     * @summary Update Nux Info for User
     * @param {UpdateUserNuxRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserNux(body: UpdateUserNuxRequest, options?: any): Promise<UserNux>;
    /**
     * Update notification preference.
     * @summary Update notification preferences
     * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUnsubscribePreferences(body: UpdateUnsubscribePreferencesRequest, options?: any): Promise<UpdateUnsubscribePreferencesResponse>;
    /**
     * Update a user in an organization.
     * @summary Update User
     * @param {string} user email of the user to update
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(user: string, body: UpdateUserRequest, options?: any): Promise<User>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Create a new user for an organization.
     * @summary Create User
     * @param {CreateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(body: CreateUserRequest, options?: any): Promise<CreateUserResponse>;
    /**
     * Delete a user from an organization.
     * @summary Delete User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(user: string, options?: any): Promise<DeleteUserResponse>;
    /**
     * Retrieve currently authenticated user.
     * @summary Retrieve Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getCurrentUser(options?: any): Promise<User>;
    /**
     *
     * @summary Get invite_state for current user's org_membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getCurrentUserInviteState(options?: any): Promise<InviteState>;
    /**
     * Retrieve currently active user's nux values.
     * @summary Get Current User's Nux Values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getCurrentUserNux(options?: any): Promise<UserNux>;
    /**
     *
     * @summary Get state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getCurrentUserState(options?: any): Promise<UserState>;
    /**
     *
     * @summary Get accepted_ToS value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getCurrentUserTos(options?: any): Promise<GetUserTosResponse>;
    /**
     * Functional in public API server's only - used to bootstrap Console
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getCurrentUserUnchecked(options?: any): Promise<User>;
    /**
     * Retrieve user by email.
     * @summary Retrieve User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(user: string, options?: any): Promise<User>;
    /**
     *
     * @summary Get query history for user.
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserQueryHistory(limit?: number, options?: any): Promise<UserQueryHistoryResponse>;
    /**
     * List all roles for a user.
     * @summary List User Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listRoles(options?: any): Promise<ListRolesResponse>;
    /**
     * Get all notification preferences.
     * @summary Get all notification preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUnsubscribePreferences(options?: any): Promise<ListUnsubscribePreferencesResponse>;
    /**
     * Retrieve all users for an organization.
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(options?: any): Promise<ListUsersResponse>;
    /**
     *
     * @summary Set invite_state for current user's org_membership.
     * @param {InviteState} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    setCurrentUserInviteState(body: InviteState, options?: any): Promise<InviteState>;
    /**
     *
     * @summary Update state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    setCurrentUserState(options?: any): Promise<UserState>;
    /**
     *
     * @summary Set accepted_ToS value to true for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    setCurrentUserTos(options?: any): Promise<Response>;
    /**
     *
     * @summary Update Auth0 to require MFA for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    setUserMfa(options?: any): Promise<Response>;
    /**
     * Update currently active user.
     * @summary Update Current User
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateCurrentUser(body: UpdateUserRequest, options?: any): Promise<User>;
    /**
     * Update nux info for user.
     * @summary Update Nux Info for User
     * @param {UpdateUserNuxRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateCurrentUserNux(body: UpdateUserNuxRequest, options?: any): Promise<UserNux>;
    /**
     * Update notification preference.
     * @summary Update notification preferences
     * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUnsubscribePreferences(body: UpdateUnsubscribePreferencesRequest, options?: any): Promise<UpdateUnsubscribePreferencesResponse>;
    /**
     * Update a user in an organization.
     * @summary Update User
     * @param {string} user email of the user to update
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(user: string, body: UpdateUserRequest, options?: any): Promise<User>;
}
/**
 * ViewsApi - fetch parameter creator
 * @export
 */
export declare const ViewsApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a view
     * @summary Create View
     * @param {string} workspace name of the workspace
     * @param {CreateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createView(workspace: string, body: CreateViewRequest, options?: any): FetchArgs;
    /**
     * Delete a view
     * @summary Delete View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteView(workspace: string, view: string, options?: any): FetchArgs;
    /**
     * Get details about a view
     * @summary Retrieve View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getView(workspace: string, view: string, options?: any): FetchArgs;
    /**
     * Retrieve all views in an organization
     * @summary List Views
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listViews(options?: any): FetchArgs;
    /**
     * Update a view
     * @summary Update View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {UpdateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateView(workspace: string, view: string, body: UpdateViewRequest, options?: any): FetchArgs;
    /**
     * Retrieve all views in a workspace.
     * @summary List Views in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceViews(workspace: string, options?: any): FetchArgs;
};
/**
 * ViewsApi - functional programming interface
 * @export
 */
export declare const ViewsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a view
     * @summary Create View
     * @param {string} workspace name of the workspace
     * @param {CreateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createView(workspace: string, body: CreateViewRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateViewResponse>;
    /**
     * Delete a view
     * @summary Delete View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteView(workspace: string, view: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteViewResponse>;
    /**
     * Get details about a view
     * @summary Retrieve View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getView(workspace: string, view: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetViewResponse>;
    /**
     * Retrieve all views in an organization
     * @summary List Views
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listViews(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListViewsResponse>;
    /**
     * Update a view
     * @summary Update View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {UpdateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateView(workspace: string, view: string, body: UpdateViewRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UpdateViewResponse>;
    /**
     * Retrieve all views in a workspace.
     * @summary List Views in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceViews(workspace: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListViewsResponse>;
};
/**
 * ViewsApi - factory interface
 * @export
 */
export declare const ViewsApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create a view
     * @summary Create View
     * @param {string} workspace name of the workspace
     * @param {CreateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createView(workspace: string, body: CreateViewRequest, options?: any): Promise<CreateViewResponse>;
    /**
     * Delete a view
     * @summary Delete View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteView(workspace: string, view: string, options?: any): Promise<DeleteViewResponse>;
    /**
     * Get details about a view
     * @summary Retrieve View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getView(workspace: string, view: string, options?: any): Promise<GetViewResponse>;
    /**
     * Retrieve all views in an organization
     * @summary List Views
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listViews(options?: any): Promise<ListViewsResponse>;
    /**
     * Update a view
     * @summary Update View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {UpdateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateView(workspace: string, view: string, body: UpdateViewRequest, options?: any): Promise<UpdateViewResponse>;
    /**
     * Retrieve all views in a workspace.
     * @summary List Views in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceViews(workspace: string, options?: any): Promise<ListViewsResponse>;
};
/**
 * ViewsApi - object-oriented interface
 * @export
 * @class ViewsApi
 * @extends {BaseAPI}
 */
export declare class ViewsApi extends BaseAPI {
    /**
     * Create a view
     * @summary Create View
     * @param {string} workspace name of the workspace
     * @param {CreateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    createView(workspace: string, body: CreateViewRequest, options?: any): Promise<CreateViewResponse>;
    /**
     * Delete a view
     * @summary Delete View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    deleteView(workspace: string, view: string, options?: any): Promise<DeleteViewResponse>;
    /**
     * Get details about a view
     * @summary Retrieve View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    getView(workspace: string, view: string, options?: any): Promise<GetViewResponse>;
    /**
     * Retrieve all views in an organization
     * @summary List Views
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    listViews(options?: any): Promise<ListViewsResponse>;
    /**
     * Update a view
     * @summary Update View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {UpdateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    updateView(workspace: string, view: string, body: UpdateViewRequest, options?: any): Promise<UpdateViewResponse>;
    /**
     * Retrieve all views in a workspace.
     * @summary List Views in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    workspaceViews(workspace: string, options?: any): Promise<ListViewsResponse>;
}
/**
 * VirtualInstancesApi - fetch parameter creator
 * @export
 */
export declare const VirtualInstancesApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get details about a virtual instance.
     * @summary Retrieve Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualInstance(virtualInstanceId: string, options?: any): FetchArgs;
    /**
     * Get relevant metrics for a specific virtual instance.
     * @summary Get Virtual Instance metrics
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {number} start start time (ms)
     * @param {number} end end time (ms)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualInstanceMetrics(virtualInstanceId: string, start: number, end: number, options?: any): FetchArgs;
    /**
     * Retrieve all virtual instances in an organization.
     * @summary List Virtual Instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualInstances(options?: any): FetchArgs;
    /**
     * Update the properties of a virtual instance.
     * @summary Update Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVirtualInstance(virtualInstanceId: string, body: UpdateVirtualInstanceRequest, options?: any): FetchArgs;
    /**
     * Switch a virtual instance type within an organization to a new virtual instance type.
     * @summary Switch Virtual Instance Type
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVirtualInstanceType(virtualInstanceId: string, body: UpdateVirtualInstanceRequest, options?: any): FetchArgs;
};
/**
 * VirtualInstancesApi - functional programming interface
 * @export
 */
export declare const VirtualInstancesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get details about a virtual instance.
     * @summary Retrieve Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualInstance(virtualInstanceId: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetVirtualInstanceResponse>;
    /**
     * Get relevant metrics for a specific virtual instance.
     * @summary Get Virtual Instance metrics
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {number} start start time (ms)
     * @param {number} end end time (ms)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualInstanceMetrics(virtualInstanceId: string, start: number, end: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetVirtualInstanceMetricsResponse>;
    /**
     * Retrieve all virtual instances in an organization.
     * @summary List Virtual Instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualInstances(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListVirtualInstancesResponse>;
    /**
     * Update the properties of a virtual instance.
     * @summary Update Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVirtualInstance(virtualInstanceId: string, body: UpdateVirtualInstanceRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UpdateVirtualInstanceResponse>;
    /**
     * Switch a virtual instance type within an organization to a new virtual instance type.
     * @summary Switch Virtual Instance Type
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVirtualInstanceType(virtualInstanceId: string, body: UpdateVirtualInstanceRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UpdateVirtualInstanceResponse>;
};
/**
 * VirtualInstancesApi - factory interface
 * @export
 */
export declare const VirtualInstancesApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Get details about a virtual instance.
     * @summary Retrieve Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualInstance(virtualInstanceId: string, options?: any): Promise<GetVirtualInstanceResponse>;
    /**
     * Get relevant metrics for a specific virtual instance.
     * @summary Get Virtual Instance metrics
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {number} start start time (ms)
     * @param {number} end end time (ms)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualInstanceMetrics(virtualInstanceId: string, start: number, end: number, options?: any): Promise<GetVirtualInstanceMetricsResponse>;
    /**
     * Retrieve all virtual instances in an organization.
     * @summary List Virtual Instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualInstances(options?: any): Promise<ListVirtualInstancesResponse>;
    /**
     * Update the properties of a virtual instance.
     * @summary Update Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVirtualInstance(virtualInstanceId: string, body: UpdateVirtualInstanceRequest, options?: any): Promise<UpdateVirtualInstanceResponse>;
    /**
     * Switch a virtual instance type within an organization to a new virtual instance type.
     * @summary Switch Virtual Instance Type
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setVirtualInstanceType(virtualInstanceId: string, body: UpdateVirtualInstanceRequest, options?: any): Promise<UpdateVirtualInstanceResponse>;
};
/**
 * VirtualInstancesApi - object-oriented interface
 * @export
 * @class VirtualInstancesApi
 * @extends {BaseAPI}
 */
export declare class VirtualInstancesApi extends BaseAPI {
    /**
     * Get details about a virtual instance.
     * @summary Retrieve Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    getVirtualInstance(virtualInstanceId: string, options?: any): Promise<GetVirtualInstanceResponse>;
    /**
     * Get relevant metrics for a specific virtual instance.
     * @summary Get Virtual Instance metrics
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {number} start start time (ms)
     * @param {number} end end time (ms)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    getVirtualInstanceMetrics(virtualInstanceId: string, start: number, end: number, options?: any): Promise<GetVirtualInstanceMetricsResponse>;
    /**
     * Retrieve all virtual instances in an organization.
     * @summary List Virtual Instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    listVirtualInstances(options?: any): Promise<ListVirtualInstancesResponse>;
    /**
     * Update the properties of a virtual instance.
     * @summary Update Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    setVirtualInstance(virtualInstanceId: string, body: UpdateVirtualInstanceRequest, options?: any): Promise<UpdateVirtualInstanceResponse>;
    /**
     * Switch a virtual instance type within an organization to a new virtual instance type.
     * @summary Switch Virtual Instance Type
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    setVirtualInstanceType(virtualInstanceId: string, body: UpdateVirtualInstanceRequest, options?: any): Promise<UpdateVirtualInstanceResponse>;
}
/**
 * WorkspacesApi - fetch parameter creator
 * @export
 */
export declare const WorkspacesApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * List workspaces under given workspace.
     * @summary List Workspaces in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    childWorkspaces(workspace: string, options?: any): FetchArgs;
    /**
     * Create a new workspace.
     * @summary Create Workspace
     * @param {CreateWorkspaceRequest} body workspace details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(body: CreateWorkspaceRequest, options?: any): FetchArgs;
    /**
     * Remove a workspace.
     * @summary Delete Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(workspace: string, options?: any): FetchArgs;
    /**
     * Get information about a single workspace.
     * @summary Retrieve Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace(workspace: string, options?: any): FetchArgs;
    /**
     * List all workspaces in an organization.
     * @summary List Workspaces
     * @param {boolean} [fetch_across_regions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(fetch_across_regions?: boolean | undefined, options?: any): FetchArgs;
    /**
     * Transfer ownership of a workspace to a new user.
     * @summary Transfer Ownership of a Workspace
     * @param {string} workspace name of the workspace
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, body: TransferOwnershipRequest, options?: any): FetchArgs;
};
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
export declare const WorkspacesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * List workspaces under given workspace.
     * @summary List Workspaces in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    childWorkspaces(workspace: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListWorkspacesResponse>;
    /**
     * Create a new workspace.
     * @summary Create Workspace
     * @param {CreateWorkspaceRequest} body workspace details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(body: CreateWorkspaceRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<CreateWorkspaceResponse>;
    /**
     * Remove a workspace.
     * @summary Delete Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(workspace: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<DeleteWorkspaceResponse>;
    /**
     * Get information about a single workspace.
     * @summary Retrieve Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace(workspace: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<GetWorkspaceResponse>;
    /**
     * List all workspaces in an organization.
     * @summary List Workspaces
     * @param {boolean} [fetch_across_regions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(fetch_across_regions?: boolean | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ListWorkspacesResponse>;
    /**
     * Transfer ownership of a workspace to a new user.
     * @summary Transfer Ownership of a Workspace
     * @param {string} workspace name of the workspace
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, body: TransferOwnershipRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
};
/**
 * WorkspacesApi - factory interface
 * @export
 */
export declare const WorkspacesApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * List workspaces under given workspace.
     * @summary List Workspaces in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    childWorkspaces(workspace: string, options?: any): Promise<ListWorkspacesResponse>;
    /**
     * Create a new workspace.
     * @summary Create Workspace
     * @param {CreateWorkspaceRequest} body workspace details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkspace(body: CreateWorkspaceRequest, options?: any): Promise<CreateWorkspaceResponse>;
    /**
     * Remove a workspace.
     * @summary Delete Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkspace(workspace: string, options?: any): Promise<DeleteWorkspaceResponse>;
    /**
     * Get information about a single workspace.
     * @summary Retrieve Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspace(workspace: string, options?: any): Promise<GetWorkspaceResponse>;
    /**
     * List all workspaces in an organization.
     * @summary List Workspaces
     * @param {boolean} [fetch_across_regions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkspaces(fetch_across_regions?: boolean | undefined, options?: any): Promise<ListWorkspacesResponse>;
    /**
     * Transfer ownership of a workspace to a new user.
     * @summary Transfer Ownership of a Workspace
     * @param {string} workspace name of the workspace
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferOwnership(workspace: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
};
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
export declare class WorkspacesApi extends BaseAPI {
    /**
     * List workspaces under given workspace.
     * @summary List Workspaces in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    childWorkspaces(workspace: string, options?: any): Promise<ListWorkspacesResponse>;
    /**
     * Create a new workspace.
     * @summary Create Workspace
     * @param {CreateWorkspaceRequest} body workspace details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    createWorkspace(body: CreateWorkspaceRequest, options?: any): Promise<CreateWorkspaceResponse>;
    /**
     * Remove a workspace.
     * @summary Delete Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    deleteWorkspace(workspace: string, options?: any): Promise<DeleteWorkspaceResponse>;
    /**
     * Get information about a single workspace.
     * @summary Retrieve Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    getWorkspace(workspace: string, options?: any): Promise<GetWorkspaceResponse>;
    /**
     * List all workspaces in an organization.
     * @summary List Workspaces
     * @param {boolean} [fetch_across_regions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    listWorkspaces(fetch_across_regions?: boolean, options?: any): Promise<ListWorkspacesResponse>;
    /**
     * Transfer ownership of a workspace to a new user.
     * @summary Transfer Ownership of a Workspace
     * @param {string} workspace name of the workspace
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    transferOwnership(workspace: string, body: TransferOwnershipRequest, options?: any): Promise<Response>;
}
