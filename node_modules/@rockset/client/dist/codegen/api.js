"use strict";
// tslint:disable
/**
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspacesApi = exports.WorkspacesApiFactory = exports.WorkspacesApiFp = exports.WorkspacesApiFetchParamCreator = exports.VirtualInstancesApi = exports.VirtualInstancesApiFactory = exports.VirtualInstancesApiFp = exports.VirtualInstancesApiFetchParamCreator = exports.ViewsApi = exports.ViewsApiFactory = exports.ViewsApiFp = exports.ViewsApiFetchParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiFetchParamCreator = exports.TelemetryApi = exports.TelemetryApiFactory = exports.TelemetryApiFp = exports.TelemetryApiFetchParamCreator = exports.StatusApi = exports.StatusApiFactory = exports.StatusApiFp = exports.StatusApiFetchParamCreator = exports.QueryLambdasApi = exports.QueryLambdasApiFactory = exports.QueryLambdasApiFp = exports.QueryLambdasApiFetchParamCreator = exports.QueriesApi = exports.QueriesApiFactory = exports.QueriesApiFp = exports.QueriesApiFetchParamCreator = exports.ProvisionApi = exports.ProvisionApiFactory = exports.ProvisionApiFp = exports.ProvisionApiFetchParamCreator = exports.OrganizationsApi = exports.OrganizationsApiFactory = exports.OrganizationsApiFp = exports.OrganizationsApiFetchParamCreator = exports.LinearApi = exports.LinearApiFactory = exports.LinearApiFp = exports.LinearApiFetchParamCreator = exports.IntegrationsApi = exports.IntegrationsApiFactory = exports.IntegrationsApiFp = exports.IntegrationsApiFetchParamCreator = exports.IPAllowlistApi = exports.IPAllowlistApiFactory = exports.IPAllowlistApiFp = exports.IPAllowlistApiFetchParamCreator = exports.DocumentsApi = exports.DocumentsApiFactory = exports.DocumentsApiFp = exports.DocumentsApiFetchParamCreator = exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiFetchParamCreator = exports.CustomRolesBetaApi = exports.CustomRolesBetaApiFactory = exports.CustomRolesBetaApiFp = exports.CustomRolesBetaApiFetchParamCreator = exports.ConsoleApi = exports.ConsoleApiFactory = exports.ConsoleApiFp = exports.ConsoleApiFetchParamCreator = exports.CollectionsApi = exports.CollectionsApiFactory = exports.CollectionsApiFp = exports.CollectionsApiFetchParamCreator = exports.AliasesApi = exports.AliasesApiFactory = exports.AliasesApiFp = exports.AliasesApiFetchParamCreator = exports.APIKeysApi = exports.APIKeysApiFactory = exports.APIKeysApiFp = exports.APIKeysApiFetchParamCreator = exports.VirtualInstanceMetrics = exports.VirtualInstance = exports.View = exports.UserState = exports.UserNux = exports.User = exports.UpdateVirtualInstanceRequest = exports.UpdateUserNuxRequest = exports.UpdateApiKeyRequest = exports.TimeSeriesMetrics = exports.StatusMongoDb = exports.StatusKafka = exports.StatusDynamoDbV2 = exports.StatusDynamoDb = exports.Status = exports.SourceS3 = exports.SourceKafka = exports.QueryPageInfo = exports.QueryLambdaVersion = exports.Privilege = exports.PatchOperation = exports.OutputField = exports.Organization = exports.OrgSettings = exports.OrgMembership = exports.LineItem = exports.LeafGroup = exports.KafkaIntegration = exports.InviteState = exports.Instance = exports.InputField = exports.FieldPartition = exports.ErrorModel = exports.DocumentStatus = exports.CsvParams = exports.Credit = exports.CreateCollectionRequest = exports.Collection = exports.Cluster = exports.ApiKey = exports.Alias = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "https://api.rs2.usw2.rockset.com".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace Alias
 */
var Alias;
(function (Alias) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["CREATED"] = 'CREATED'] = "CREATED";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = Alias.StateEnum || (Alias.StateEnum = {}));
})(Alias = exports.Alias || (exports.Alias = {}));
/**
 * @export
 * @namespace ApiKey
 */
var ApiKey;
(function (ApiKey) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["SUSPENDED"] = 'SUSPENDED'] = "SUSPENDED";
    })(StateEnum = ApiKey.StateEnum || (ApiKey.StateEnum = {}));
})(ApiKey = exports.ApiKey || (exports.ApiKey = {}));
/**
 * @export
 * @namespace Cluster
 */
var Cluster;
(function (Cluster) {
    /**
     * @export
     * @enum {string}
     */
    var ClusterTypeEnum;
    (function (ClusterTypeEnum) {
        ClusterTypeEnum[ClusterTypeEnum["PUBLIC"] = 'PUBLIC'] = "PUBLIC";
        ClusterTypeEnum[ClusterTypeEnum["PRIVATE"] = 'PRIVATE'] = "PRIVATE";
    })(ClusterTypeEnum = Cluster.ClusterTypeEnum || (Cluster.ClusterTypeEnum = {}));
})(Cluster = exports.Cluster || (exports.Cluster = {}));
/**
 * @export
 * @namespace Collection
 */
var Collection;
(function (Collection) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["INITIALIZED"] = 'INITIALIZED'] = "INITIALIZED";
        StatusEnum[StatusEnum["CREATED"] = 'CREATED'] = "CREATED";
        StatusEnum[StatusEnum["READY"] = 'READY'] = "READY";
        StatusEnum[StatusEnum["PAUSED"] = 'PAUSED'] = "PAUSED";
        StatusEnum[StatusEnum["DELETED"] = 'DELETED'] = "DELETED";
        StatusEnum[StatusEnum["PAUSING"] = 'PAUSING'] = "PAUSING";
        StatusEnum[StatusEnum["RESUMING"] = 'RESUMING'] = "RESUMING";
        StatusEnum[StatusEnum["PREPARINGBULK"] = 'PREPARING_BULK'] = "PREPARINGBULK";
        StatusEnum[StatusEnum["BULKINGESTMODE"] = 'BULK_INGEST_MODE'] = "BULKINGESTMODE";
        StatusEnum[StatusEnum["EXITINGBULKINGESTMODE"] = 'EXITING_BULK_INGEST_MODE'] = "EXITINGBULKINGESTMODE";
        StatusEnum[StatusEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
    })(StatusEnum = Collection.StatusEnum || (Collection.StatusEnum = {}));
})(Collection = exports.Collection || (exports.Collection = {}));
/**
 * @export
 * @namespace CreateCollectionRequest
 */
var CreateCollectionRequest;
(function (CreateCollectionRequest) {
    /**
     * @export
     * @enum {string}
     */
    var InstanceTypeEnum;
    (function (InstanceTypeEnum) {
        InstanceTypeEnum[InstanceTypeEnum["FREE"] = 'FREE'] = "FREE";
        InstanceTypeEnum[InstanceTypeEnum["SHARED"] = 'SHARED'] = "SHARED";
        InstanceTypeEnum[InstanceTypeEnum["SMALL"] = 'SMALL'] = "SMALL";
        InstanceTypeEnum[InstanceTypeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        InstanceTypeEnum[InstanceTypeEnum["LARGE"] = 'LARGE'] = "LARGE";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(InstanceTypeEnum = CreateCollectionRequest.InstanceTypeEnum || (CreateCollectionRequest.InstanceTypeEnum = {}));
})(CreateCollectionRequest = exports.CreateCollectionRequest || (exports.CreateCollectionRequest = {}));
/**
 * @export
 * @namespace Credit
 */
var Credit;
(function (Credit) {
    /**
     * @export
     * @enum {string}
     */
    var CreditTypeEnum;
    (function (CreditTypeEnum) {
        CreditTypeEnum[CreditTypeEnum["GENERIC"] = 'GENERIC'] = "GENERIC";
        CreditTypeEnum[CreditTypeEnum["COMPUTE"] = 'COMPUTE'] = "COMPUTE";
        CreditTypeEnum[CreditTypeEnum["INGEST"] = 'INGEST'] = "INGEST";
        CreditTypeEnum[CreditTypeEnum["STORAGE"] = 'STORAGE'] = "STORAGE";
    })(CreditTypeEnum = Credit.CreditTypeEnum || (Credit.CreditTypeEnum = {}));
})(Credit = exports.Credit || (exports.Credit = {}));
/**
 * @export
 * @namespace CsvParams
 */
var CsvParams;
(function (CsvParams) {
    /**
     * @export
     * @enum {string}
     */
    var ColumnTypesEnum;
    (function (ColumnTypesEnum) {
        ColumnTypesEnum[ColumnTypesEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
        ColumnTypesEnum[ColumnTypesEnum["BOOLEAN"] = 'BOOLEAN'] = "BOOLEAN";
        ColumnTypesEnum[ColumnTypesEnum["BOOL"] = 'BOOL'] = "BOOL";
        ColumnTypesEnum[ColumnTypesEnum["INTEGER"] = 'INTEGER'] = "INTEGER";
        ColumnTypesEnum[ColumnTypesEnum["INT"] = 'INT'] = "INT";
        ColumnTypesEnum[ColumnTypesEnum["FLOAT"] = 'FLOAT'] = "FLOAT";
        ColumnTypesEnum[ColumnTypesEnum["TIME"] = 'TIME'] = "TIME";
        ColumnTypesEnum[ColumnTypesEnum["DATE"] = 'DATE'] = "DATE";
        ColumnTypesEnum[ColumnTypesEnum["DATETIME"] = 'DATETIME'] = "DATETIME";
        ColumnTypesEnum[ColumnTypesEnum["TIMESTAMP"] = 'TIMESTAMP'] = "TIMESTAMP";
        ColumnTypesEnum[ColumnTypesEnum["STRING"] = 'STRING'] = "STRING";
    })(ColumnTypesEnum = CsvParams.ColumnTypesEnum || (CsvParams.ColumnTypesEnum = {}));
})(CsvParams = exports.CsvParams || (exports.CsvParams = {}));
/**
 * @export
 * @namespace DocumentStatus
 */
var DocumentStatus;
(function (DocumentStatus) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["ADDED"] = 'ADDED'] = "ADDED";
        StatusEnum[StatusEnum["REPLACED"] = 'REPLACED'] = "REPLACED";
        StatusEnum[StatusEnum["DELETED"] = 'DELETED'] = "DELETED";
        StatusEnum[StatusEnum["PATCHED"] = 'PATCHED'] = "PATCHED";
        StatusEnum[StatusEnum["ERROR"] = 'ERROR'] = "ERROR";
    })(StatusEnum = DocumentStatus.StatusEnum || (DocumentStatus.StatusEnum = {}));
})(DocumentStatus = exports.DocumentStatus || (exports.DocumentStatus = {}));
/**
 * @export
 * @namespace ErrorModel
 */
var ErrorModel;
(function (ErrorModel) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["AUTHEXCEPTION"] = 'AUTHEXCEPTION'] = "AUTHEXCEPTION";
        TypeEnum[TypeEnum["VERSIONEXCEPTION"] = 'VERSIONEXCEPTION'] = "VERSIONEXCEPTION";
        TypeEnum[TypeEnum["INTERNALERROR"] = 'INTERNALERROR'] = "INTERNALERROR";
        TypeEnum[TypeEnum["INVALIDINPUT"] = 'INVALIDINPUT'] = "INVALIDINPUT";
        TypeEnum[TypeEnum["NOTIMPLEMENTEDYET"] = 'NOTIMPLEMENTEDYET'] = "NOTIMPLEMENTEDYET";
        TypeEnum[TypeEnum["RESOURCEEXCEEDED"] = 'RESOURCEEXCEEDED'] = "RESOURCEEXCEEDED";
        TypeEnum[TypeEnum["ALREADYEXISTS"] = 'ALREADYEXISTS'] = "ALREADYEXISTS";
        TypeEnum[TypeEnum["NOTALLOWED"] = 'NOTALLOWED'] = "NOTALLOWED";
        TypeEnum[TypeEnum["NOTACCEPTABLE"] = 'NOTACCEPTABLE'] = "NOTACCEPTABLE";
        TypeEnum[TypeEnum["NOTSUPPORTED"] = 'NOTSUPPORTED'] = "NOTSUPPORTED";
        TypeEnum[TypeEnum["NOTFOUND"] = 'NOTFOUND'] = "NOTFOUND";
        TypeEnum[TypeEnum["DEPENDENTRESOURCES"] = 'DEPENDENTRESOURCES'] = "DEPENDENTRESOURCES";
        TypeEnum[TypeEnum["QUERYERROR"] = 'QUERY_ERROR'] = "QUERYERROR";
        TypeEnum[TypeEnum["NOTREADY"] = 'NOT_READY'] = "NOTREADY";
        TypeEnum[TypeEnum["FORBIDDEN"] = 'FORBIDDEN'] = "FORBIDDEN";
        TypeEnum[TypeEnum["QUERYTIMEOUT"] = 'QUERY_TIMEOUT'] = "QUERYTIMEOUT";
        TypeEnum[TypeEnum["ROLENOTFOUND"] = 'ROLE_NOT_FOUND'] = "ROLENOTFOUND";
        TypeEnum[TypeEnum["CONNECTIONERROR"] = 'CONNECTION_ERROR'] = "CONNECTIONERROR";
        TypeEnum[TypeEnum["CREATING"] = 'CREATING'] = "CREATING";
        TypeEnum[TypeEnum["BADREQUEST"] = 'BADREQUEST'] = "BADREQUEST";
        TypeEnum[TypeEnum["SERVICEUNAVAILABLE"] = 'SERVICEUNAVAILABLE'] = "SERVICEUNAVAILABLE";
        TypeEnum[TypeEnum["RATELIMITEXCEEDED"] = 'RATELIMITEXCEEDED'] = "RATELIMITEXCEEDED";
        TypeEnum[TypeEnum["QUERYCANCELLED"] = 'QUERY_CANCELLED'] = "QUERYCANCELLED";
        TypeEnum[TypeEnum["CLIENTCONNECTIONERROR"] = 'CLIENT_CONNECTION_ERROR'] = "CLIENTCONNECTIONERROR";
    })(TypeEnum = ErrorModel.TypeEnum || (ErrorModel.TypeEnum = {}));
})(ErrorModel = exports.ErrorModel || (exports.ErrorModel = {}));
/**
 * @export
 * @namespace FieldPartition
 */
var FieldPartition;
(function (FieldPartition) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["AUTO"] = 'AUTO'] = "AUTO";
    })(TypeEnum = FieldPartition.TypeEnum || (FieldPartition.TypeEnum = {}));
})(FieldPartition = exports.FieldPartition || (exports.FieldPartition = {}));
/**
 * @export
 * @namespace InputField
 */
var InputField;
(function (InputField) {
    /**
     * @export
     * @enum {string}
     */
    var IfMissingEnum;
    (function (IfMissingEnum) {
        IfMissingEnum[IfMissingEnum["SKIP"] = 'SKIP'] = "SKIP";
        IfMissingEnum[IfMissingEnum["PASS"] = 'PASS'] = "PASS";
    })(IfMissingEnum = InputField.IfMissingEnum || (InputField.IfMissingEnum = {}));
})(InputField = exports.InputField || (exports.InputField = {}));
/**
 * @export
 * @namespace Instance
 */
var Instance;
(function (Instance) {
    /**
     * @export
     * @enum {string}
     */
    var InstancePlanEnum;
    (function (InstancePlanEnum) {
        InstancePlanEnum[InstancePlanEnum["RESERVED"] = 'RESERVED'] = "RESERVED";
        InstancePlanEnum[InstancePlanEnum["ONDEMAND"] = 'ON_DEMAND'] = "ONDEMAND";
    })(InstancePlanEnum = Instance.InstancePlanEnum || (Instance.InstancePlanEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var InstanceTypeEnum;
    (function (InstanceTypeEnum) {
        InstanceTypeEnum[InstanceTypeEnum["FREE"] = 'FREE'] = "FREE";
        InstanceTypeEnum[InstanceTypeEnum["SHARED"] = 'SHARED'] = "SHARED";
        InstanceTypeEnum[InstanceTypeEnum["SMALL"] = 'SMALL'] = "SMALL";
        InstanceTypeEnum[InstanceTypeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        InstanceTypeEnum[InstanceTypeEnum["LARGE"] = 'LARGE'] = "LARGE";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        InstanceTypeEnum[InstanceTypeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(InstanceTypeEnum = Instance.InstanceTypeEnum || (Instance.InstanceTypeEnum = {}));
})(Instance = exports.Instance || (exports.Instance = {}));
/**
 * @export
 * @namespace InviteState
 */
var InviteState;
(function (InviteState) {
    /**
     * @export
     * @enum {string}
     */
    var DataEnum;
    (function (DataEnum) {
        DataEnum[DataEnum["PENDING"] = 'PENDING'] = "PENDING";
        DataEnum[DataEnum["ACCEPTED"] = 'ACCEPTED'] = "ACCEPTED";
        DataEnum[DataEnum["EXPIRED"] = 'EXPIRED'] = "EXPIRED";
        DataEnum[DataEnum["CANCELLED"] = 'CANCELLED'] = "CANCELLED";
    })(DataEnum = InviteState.DataEnum || (InviteState.DataEnum = {}));
})(InviteState = exports.InviteState || (exports.InviteState = {}));
/**
 * @export
 * @namespace KafkaIntegration
 */
var KafkaIntegration;
(function (KafkaIntegration) {
    /**
     * @export
     * @enum {string}
     */
    var KafkaDataFormatEnum;
    (function (KafkaDataFormatEnum) {
        KafkaDataFormatEnum[KafkaDataFormatEnum["JSON"] = 'JSON'] = "JSON";
        KafkaDataFormatEnum[KafkaDataFormatEnum["AVRO"] = 'AVRO'] = "AVRO";
    })(KafkaDataFormatEnum = KafkaIntegration.KafkaDataFormatEnum || (KafkaIntegration.KafkaDataFormatEnum = {}));
})(KafkaIntegration = exports.KafkaIntegration || (exports.KafkaIntegration = {}));
/**
 * @export
 * @namespace LeafGroup
 */
var LeafGroup;
(function (LeafGroup) {
    /**
     * @export
     * @enum {string}
     */
    var PodTypeEnum;
    (function (PodTypeEnum) {
        PodTypeEnum[PodTypeEnum["C5D9XLARGE32CPU"] = 'C5D_9XLARGE_32CPU'] = "C5D9XLARGE32CPU";
        PodTypeEnum[PodTypeEnum["I32XLARGE4CPU"] = 'I3_2XLARGE_4CPU'] = "I32XLARGE4CPU";
        PodTypeEnum[PodTypeEnum["I32XLARGE2CPU"] = 'I3_2XLARGE_2CPU'] = "I32XLARGE2CPU";
    })(PodTypeEnum = LeafGroup.PodTypeEnum || (LeafGroup.PodTypeEnum = {}));
})(LeafGroup = exports.LeafGroup || (exports.LeafGroup = {}));
/**
 * @export
 * @namespace LineItem
 */
var LineItem;
(function (LineItem) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["COMPUTEFREE"] = 'COMPUTE_FREE'] = "COMPUTEFREE";
        TypeEnum[TypeEnum["COMPUTESHARED"] = 'COMPUTE_SHARED'] = "COMPUTESHARED";
        TypeEnum[TypeEnum["COMPUTESMALL"] = 'COMPUTE_SMALL'] = "COMPUTESMALL";
        TypeEnum[TypeEnum["COMPUTEMEDIUM"] = 'COMPUTE_MEDIUM'] = "COMPUTEMEDIUM";
        TypeEnum[TypeEnum["COMPUTELARGE"] = 'COMPUTE_LARGE'] = "COMPUTELARGE";
        TypeEnum[TypeEnum["COMPUTEXLARGE"] = 'COMPUTE_XLARGE'] = "COMPUTEXLARGE";
        TypeEnum[TypeEnum["COMPUTEXLARGE2"] = 'COMPUTE_XLARGE2'] = "COMPUTEXLARGE2";
        TypeEnum[TypeEnum["COMPUTEXLARGE4"] = 'COMPUTE_XLARGE4'] = "COMPUTEXLARGE4";
        TypeEnum[TypeEnum["COMPUTEXLARGE8"] = 'COMPUTE_XLARGE8'] = "COMPUTEXLARGE8";
        TypeEnum[TypeEnum["COMPUTEXLARGE16"] = 'COMPUTE_XLARGE16'] = "COMPUTEXLARGE16";
        TypeEnum[TypeEnum["STORAGE"] = 'STORAGE'] = "STORAGE";
        TypeEnum[TypeEnum["INGEST"] = 'INGEST'] = "INGEST";
        TypeEnum[TypeEnum["CREDITCOMPUTE"] = 'CREDIT_COMPUTE'] = "CREDITCOMPUTE";
        TypeEnum[TypeEnum["CREDITSTORAGE"] = 'CREDIT_STORAGE'] = "CREDITSTORAGE";
        TypeEnum[TypeEnum["CREDITINGEST"] = 'CREDIT_INGEST'] = "CREDITINGEST";
        TypeEnum[TypeEnum["CREDIT"] = 'CREDIT'] = "CREDIT";
    })(TypeEnum = LineItem.TypeEnum || (LineItem.TypeEnum = {}));
})(LineItem = exports.LineItem || (exports.LineItem = {}));
/**
 * @export
 * @namespace OrgMembership
 */
var OrgMembership;
(function (OrgMembership) {
    /**
     * @export
     * @enum {string}
     */
    var InviteStateEnum;
    (function (InviteStateEnum) {
        InviteStateEnum[InviteStateEnum["PENDING"] = 'PENDING'] = "PENDING";
        InviteStateEnum[InviteStateEnum["ACCEPTED"] = 'ACCEPTED'] = "ACCEPTED";
        InviteStateEnum[InviteStateEnum["EXPIRED"] = 'EXPIRED'] = "EXPIRED";
        InviteStateEnum[InviteStateEnum["CANCELLED"] = 'CANCELLED'] = "CANCELLED";
    })(InviteStateEnum = OrgMembership.InviteStateEnum || (OrgMembership.InviteStateEnum = {}));
})(OrgMembership = exports.OrgMembership || (exports.OrgMembership = {}));
/**
 * @export
 * @namespace OrgSettings
 */
var OrgSettings;
(function (OrgSettings) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["FREE"] = 'FREE'] = "FREE";
        StateEnum[StateEnum["PAID"] = 'PAID'] = "PAID";
        StateEnum[StateEnum["TRIAL"] = 'TRIAL'] = "TRIAL";
        StateEnum[StateEnum["TRIALEXPIRED"] = 'TRIAL_EXPIRED'] = "TRIALEXPIRED";
        StateEnum[StateEnum["TRIALDEPLETED"] = 'TRIAL_DEPLETED'] = "TRIALDEPLETED";
        StateEnum[StateEnum["INACTIVE"] = 'INACTIVE'] = "INACTIVE";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = OrgSettings.StateEnum || (OrgSettings.StateEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var EditionEnum;
    (function (EditionEnum) {
        EditionEnum[EditionEnum["STANDARD"] = 'STANDARD'] = "STANDARD";
        EditionEnum[EditionEnum["PREMIUM"] = 'PREMIUM'] = "PREMIUM";
    })(EditionEnum = OrgSettings.EditionEnum || (OrgSettings.EditionEnum = {}));
})(OrgSettings = exports.OrgSettings || (exports.OrgSettings = {}));
/**
 * @export
 * @namespace Organization
 */
var Organization;
(function (Organization) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["FREE"] = 'FREE'] = "FREE";
        StateEnum[StateEnum["PAID"] = 'PAID'] = "PAID";
        StateEnum[StateEnum["TRIAL"] = 'TRIAL'] = "TRIAL";
        StateEnum[StateEnum["TRIALEXPIRED"] = 'TRIAL_EXPIRED'] = "TRIALEXPIRED";
        StateEnum[StateEnum["TRIALDEPLETED"] = 'TRIAL_DEPLETED'] = "TRIALDEPLETED";
        StateEnum[StateEnum["INACTIVE"] = 'INACTIVE'] = "INACTIVE";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = Organization.StateEnum || (Organization.StateEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var EditionEnum;
    (function (EditionEnum) {
        EditionEnum[EditionEnum["STANDARD"] = 'STANDARD'] = "STANDARD";
        EditionEnum[EditionEnum["PREMIUM"] = 'PREMIUM'] = "PREMIUM";
    })(EditionEnum = Organization.EditionEnum || (Organization.EditionEnum = {}));
})(Organization = exports.Organization || (exports.Organization = {}));
/**
 * @export
 * @namespace OutputField
 */
var OutputField;
(function (OutputField) {
    /**
     * @export
     * @enum {string}
     */
    var OnErrorEnum;
    (function (OnErrorEnum) {
        OnErrorEnum[OnErrorEnum["SKIP"] = 'SKIP'] = "SKIP";
        OnErrorEnum[OnErrorEnum["FAIL"] = 'FAIL'] = "FAIL";
    })(OnErrorEnum = OutputField.OnErrorEnum || (OutputField.OnErrorEnum = {}));
})(OutputField = exports.OutputField || (exports.OutputField = {}));
/**
 * @export
 * @namespace PatchOperation
 */
var PatchOperation;
(function (PatchOperation) {
    /**
     * @export
     * @enum {string}
     */
    var OpEnum;
    (function (OpEnum) {
        OpEnum[OpEnum["ADD"] = 'ADD'] = "ADD";
        OpEnum[OpEnum["REPLACE"] = 'REPLACE'] = "REPLACE";
        OpEnum[OpEnum["REMOVE"] = 'REMOVE'] = "REMOVE";
        OpEnum[OpEnum["COPY"] = 'COPY'] = "COPY";
        OpEnum[OpEnum["MOVE"] = 'MOVE'] = "MOVE";
        OpEnum[OpEnum["TEST"] = 'TEST'] = "TEST";
        OpEnum[OpEnum["INCREMENT"] = 'INCREMENT'] = "INCREMENT";
    })(OpEnum = PatchOperation.OpEnum || (PatchOperation.OpEnum = {}));
})(PatchOperation = exports.PatchOperation || (exports.PatchOperation = {}));
/**
 * @export
 * @namespace Privilege
 */
var Privilege;
(function (Privilege) {
    /**
     * @export
     * @enum {string}
     */
    var ActionEnum;
    (function (ActionEnum) {
        ActionEnum[ActionEnum["ALLGLOBALACTIONS"] = 'ALL_GLOBAL_ACTIONS'] = "ALLGLOBALACTIONS";
        ActionEnum[ActionEnum["GETORGGLOBAL"] = 'GET_ORG_GLOBAL'] = "GETORGGLOBAL";
        ActionEnum[ActionEnum["GETCURRENTUSERGLOBAL"] = 'GET_CURRENT_USER_GLOBAL'] = "GETCURRENTUSERGLOBAL";
        ActionEnum[ActionEnum["INVITEUSERGLOBAL"] = 'INVITE_USER_GLOBAL'] = "INVITEUSERGLOBAL";
        ActionEnum[ActionEnum["DELETEUSERGLOBAL"] = 'DELETE_USER_GLOBAL'] = "DELETEUSERGLOBAL";
        ActionEnum[ActionEnum["LISTUSERSGLOBAL"] = 'LIST_USERS_GLOBAL'] = "LISTUSERSGLOBAL";
        ActionEnum[ActionEnum["GETBILLINGGLOBAL"] = 'GET_BILLING_GLOBAL'] = "GETBILLINGGLOBAL";
        ActionEnum[ActionEnum["UPDATEBILLINGGLOBAL"] = 'UPDATE_BILLING_GLOBAL'] = "UPDATEBILLINGGLOBAL";
        ActionEnum[ActionEnum["UPDATESETTINGSGLOBAL"] = 'UPDATE_SETTINGS_GLOBAL'] = "UPDATESETTINGSGLOBAL";
        ActionEnum[ActionEnum["GETMETRICSGLOBAL"] = 'GET_METRICS_GLOBAL'] = "GETMETRICSGLOBAL";
        ActionEnum[ActionEnum["UPDATEVIGLOBAL"] = 'UPDATE_VI_GLOBAL'] = "UPDATEVIGLOBAL";
        ActionEnum[ActionEnum["LISTVIGLOBAL"] = 'LIST_VI_GLOBAL'] = "LISTVIGLOBAL";
        ActionEnum[ActionEnum["CREATEWSGLOBAL"] = 'CREATE_WS_GLOBAL'] = "CREATEWSGLOBAL";
        ActionEnum[ActionEnum["LISTWSGLOBAL"] = 'LIST_WS_GLOBAL'] = "LISTWSGLOBAL";
        ActionEnum[ActionEnum["CREATEINTEGRATIONGLOBAL"] = 'CREATE_INTEGRATION_GLOBAL'] = "CREATEINTEGRATIONGLOBAL";
        ActionEnum[ActionEnum["DELETEINTEGRATIONGLOBAL"] = 'DELETE_INTEGRATION_GLOBAL'] = "DELETEINTEGRATIONGLOBAL";
        ActionEnum[ActionEnum["LISTINTEGRATIONSGLOBAL"] = 'LIST_INTEGRATIONS_GLOBAL'] = "LISTINTEGRATIONSGLOBAL";
        ActionEnum[ActionEnum["UPDATERESOURCEOWNERGLOBAL"] = 'UPDATE_RESOURCE_OWNER_GLOBAL'] = "UPDATERESOURCEOWNERGLOBAL";
        ActionEnum[ActionEnum["CREATEAPIKEYGLOBAL"] = 'CREATE_API_KEY_GLOBAL'] = "CREATEAPIKEYGLOBAL";
        ActionEnum[ActionEnum["CREATEROLEGLOBAL"] = 'CREATE_ROLE_GLOBAL'] = "CREATEROLEGLOBAL";
        ActionEnum[ActionEnum["UPDATEROLEGLOBAL"] = 'UPDATE_ROLE_GLOBAL'] = "UPDATEROLEGLOBAL";
        ActionEnum[ActionEnum["DELETEROLEGLOBAL"] = 'DELETE_ROLE_GLOBAL'] = "DELETEROLEGLOBAL";
        ActionEnum[ActionEnum["LISTROLESGLOBAL"] = 'LIST_ROLES_GLOBAL'] = "LISTROLESGLOBAL";
        ActionEnum[ActionEnum["GRANTREVOKEROLEGLOBAL"] = 'GRANT_REVOKE_ROLE_GLOBAL'] = "GRANTREVOKEROLEGLOBAL";
        ActionEnum[ActionEnum["ALLINTEGRATIONACTIONS"] = 'ALL_INTEGRATION_ACTIONS'] = "ALLINTEGRATIONACTIONS";
        ActionEnum[ActionEnum["CREATECOLLECTIONINTEGRATION"] = 'CREATE_COLLECTION_INTEGRATION'] = "CREATECOLLECTIONINTEGRATION";
        ActionEnum[ActionEnum["ALLWORKSPACEACTIONS"] = 'ALL_WORKSPACE_ACTIONS'] = "ALLWORKSPACEACTIONS";
        ActionEnum[ActionEnum["DELETEWS"] = 'DELETE_WS'] = "DELETEWS";
        ActionEnum[ActionEnum["QUERYDATAWS"] = 'QUERY_DATA_WS'] = "QUERYDATAWS";
        ActionEnum[ActionEnum["WRITEDATAWS"] = 'WRITE_DATA_WS'] = "WRITEDATAWS";
        ActionEnum[ActionEnum["CREATECOLLECTIONWS"] = 'CREATE_COLLECTION_WS'] = "CREATECOLLECTIONWS";
        ActionEnum[ActionEnum["DELETECOLLECTIONWS"] = 'DELETE_COLLECTION_WS'] = "DELETECOLLECTIONWS";
        ActionEnum[ActionEnum["CREATEALIASWS"] = 'CREATE_ALIAS_WS'] = "CREATEALIASWS";
        ActionEnum[ActionEnum["DELETEALIASWS"] = 'DELETE_ALIAS_WS'] = "DELETEALIASWS";
        ActionEnum[ActionEnum["LISTRESOURCESWS"] = 'LIST_RESOURCES_WS'] = "LISTRESOURCESWS";
        ActionEnum[ActionEnum["CREATEQUERYLAMBDAWS"] = 'CREATE_QUERY_LAMBDA_WS'] = "CREATEQUERYLAMBDAWS";
        ActionEnum[ActionEnum["DELETEQUERYLAMBDAWS"] = 'DELETE_QUERY_LAMBDA_WS'] = "DELETEQUERYLAMBDAWS";
        ActionEnum[ActionEnum["EXECUTEQUERYLAMBDAWS"] = 'EXECUTE_QUERY_LAMBDA_WS'] = "EXECUTEQUERYLAMBDAWS";
        ActionEnum[ActionEnum["CREATEVIEWWS"] = 'CREATE_VIEW_WS'] = "CREATEVIEWWS";
        ActionEnum[ActionEnum["DELETEVIEWWS"] = 'DELETE_VIEW_WS'] = "DELETEVIEWWS";
    })(ActionEnum = Privilege.ActionEnum || (Privilege.ActionEnum = {}));
})(Privilege = exports.Privilege || (exports.Privilege = {}));
/**
 * @export
 * @namespace QueryLambdaVersion
 */
var QueryLambdaVersion;
(function (QueryLambdaVersion) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["INVALIDSQL"] = 'INVALID_SQL'] = "INVALIDSQL";
    })(StateEnum = QueryLambdaVersion.StateEnum || (QueryLambdaVersion.StateEnum = {}));
})(QueryLambdaVersion = exports.QueryLambdaVersion || (exports.QueryLambdaVersion = {}));
/**
 * @export
 * @namespace QueryPageInfo
 */
var QueryPageInfo;
(function (QueryPageInfo) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["RUNNING"] = 'RUNNING'] = "RUNNING";
        StateEnum[StateEnum["FINISHED"] = 'FINISHED'] = "FINISHED";
    })(StateEnum = QueryPageInfo.StateEnum || (QueryPageInfo.StateEnum = {}));
})(QueryPageInfo = exports.QueryPageInfo || (exports.QueryPageInfo = {}));
/**
 * @export
 * @namespace SourceKafka
 */
var SourceKafka;
(function (SourceKafka) {
    /**
     * @export
     * @enum {string}
     */
    var OffsetResetPolicyEnum;
    (function (OffsetResetPolicyEnum) {
        OffsetResetPolicyEnum[OffsetResetPolicyEnum["LATEST"] = 'LATEST'] = "LATEST";
        OffsetResetPolicyEnum[OffsetResetPolicyEnum["EARLIEST"] = 'EARLIEST'] = "EARLIEST";
    })(OffsetResetPolicyEnum = SourceKafka.OffsetResetPolicyEnum || (SourceKafka.OffsetResetPolicyEnum = {}));
})(SourceKafka = exports.SourceKafka || (exports.SourceKafka = {}));
/**
 * @export
 * @namespace SourceS3
 */
var SourceS3;
(function (SourceS3) {
    /**
     * @export
     * @enum {string}
     */
    var FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["JSON"] = 'JSON'] = "JSON";
    })(FormatEnum = SourceS3.FormatEnum || (SourceS3.FormatEnum = {}));
})(SourceS3 = exports.SourceS3 || (exports.SourceS3 = {}));
/**
 * @export
 * @namespace Status
 */
var Status;
(function (Status) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["WATCHING"] = 'WATCHING'] = "WATCHING";
        StateEnum[StateEnum["PROCESSING"] = 'PROCESSING'] = "PROCESSING";
        StateEnum[StateEnum["COMPLETED"] = 'COMPLETED'] = "COMPLETED";
        StateEnum[StateEnum["ERROR"] = 'ERROR'] = "ERROR";
    })(StateEnum = Status.StateEnum || (Status.StateEnum = {}));
})(Status = exports.Status || (exports.Status = {}));
/**
 * @export
 * @namespace StatusDynamoDb
 */
var StatusDynamoDb;
(function (StatusDynamoDb) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["SCANNINGTABLE"] = 'SCANNING_TABLE'] = "SCANNINGTABLE";
        StateEnum[StateEnum["PROCESSINGSTREAM"] = 'PROCESSING_STREAM'] = "PROCESSINGSTREAM";
    })(StateEnum = StatusDynamoDb.StateEnum || (StatusDynamoDb.StateEnum = {}));
})(StatusDynamoDb = exports.StatusDynamoDb || (exports.StatusDynamoDb = {}));
/**
 * @export
 * @namespace StatusDynamoDbV2
 */
var StatusDynamoDbV2;
(function (StatusDynamoDbV2) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["SCANNING"] = 'SCANNING'] = "SCANNING";
        StateEnum[StateEnum["EXPORTINGTOS3"] = 'EXPORTING_TO_S3'] = "EXPORTINGTOS3";
        StateEnum[StateEnum["DOWNLOADINGFROMS3"] = 'DOWNLOADING_FROM_S3'] = "DOWNLOADINGFROMS3";
        StateEnum[StateEnum["PROCESSINGSTREAM"] = 'PROCESSING_STREAM'] = "PROCESSINGSTREAM";
    })(StateEnum = StatusDynamoDbV2.StateEnum || (StatusDynamoDbV2.StateEnum = {}));
})(StatusDynamoDbV2 = exports.StatusDynamoDbV2 || (exports.StatusDynamoDbV2 = {}));
/**
 * @export
 * @namespace StatusKafka
 */
var StatusKafka;
(function (StatusKafka) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["NODOCSYET"] = 'NO_DOCS_YET'] = "NODOCSYET";
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["DORMANT"] = 'DORMANT'] = "DORMANT";
    })(StateEnum = StatusKafka.StateEnum || (StatusKafka.StateEnum = {}));
})(StatusKafka = exports.StatusKafka || (exports.StatusKafka = {}));
/**
 * @export
 * @namespace StatusMongoDb
 */
var StatusMongoDb;
(function (StatusMongoDb) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["INITIALIZING"] = 'INITIALIZING'] = "INITIALIZING";
        StateEnum[StateEnum["SCANNINGTABLE"] = 'SCANNING_TABLE'] = "SCANNINGTABLE";
        StateEnum[StateEnum["PROCESSINGSTREAM"] = 'PROCESSING_STREAM'] = "PROCESSINGSTREAM";
    })(StateEnum = StatusMongoDb.StateEnum || (StatusMongoDb.StateEnum = {}));
})(StatusMongoDb = exports.StatusMongoDb || (exports.StatusMongoDb = {}));
/**
 * @export
 * @namespace TimeSeriesMetrics
 */
var TimeSeriesMetrics;
(function (TimeSeriesMetrics) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["COLLECTION"] = 'COLLECTION'] = "COLLECTION";
        TypeEnum[TypeEnum["QUERYLAMBDA"] = 'QUERY_LAMBDA'] = "QUERYLAMBDA";
        TypeEnum[TypeEnum["VIRTUALINSTANCE"] = 'VIRTUAL_INSTANCE'] = "VIRTUALINSTANCE";
        TypeEnum[TypeEnum["VIRTUALINSTANCEQUERY"] = 'VIRTUAL_INSTANCE_QUERY'] = "VIRTUALINSTANCEQUERY";
        TypeEnum[TypeEnum["VIRTUALINSTANCESTORAGE"] = 'VIRTUAL_INSTANCE_STORAGE'] = "VIRTUALINSTANCESTORAGE";
        TypeEnum[TypeEnum["SLOWQUERYCOUNT"] = 'SLOW_QUERY_COUNT'] = "SLOWQUERYCOUNT";
        TypeEnum[TypeEnum["SLOWQUERIES"] = 'SLOW_QUERIES'] = "SLOWQUERIES";
        TypeEnum[TypeEnum["PERCENTILEQUERYLATENCY"] = 'PERCENTILE_QUERY_LATENCY'] = "PERCENTILEQUERYLATENCY";
        TypeEnum[TypeEnum["QUERYCOUNT"] = 'QUERY_COUNT'] = "QUERYCOUNT";
        TypeEnum[TypeEnum["COLLECTIONBULKINGESTCPU"] = 'COLLECTION_BULK_INGEST_CPU'] = "COLLECTIONBULKINGESTCPU";
    })(TypeEnum = TimeSeriesMetrics.TypeEnum || (TimeSeriesMetrics.TypeEnum = {}));
})(TimeSeriesMetrics = exports.TimeSeriesMetrics || (exports.TimeSeriesMetrics = {}));
/**
 * @export
 * @namespace UpdateApiKeyRequest
 */
var UpdateApiKeyRequest;
(function (UpdateApiKeyRequest) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["SUSPENDED"] = 'SUSPENDED'] = "SUSPENDED";
    })(StateEnum = UpdateApiKeyRequest.StateEnum || (UpdateApiKeyRequest.StateEnum = {}));
})(UpdateApiKeyRequest = exports.UpdateApiKeyRequest || (exports.UpdateApiKeyRequest = {}));
/**
 * @export
 * @namespace UpdateUserNuxRequest
 */
var UpdateUserNuxRequest;
(function (UpdateUserNuxRequest) {
    /**
     * @export
     * @enum {string}
     */
    var DataIntegrationEnum;
    (function (DataIntegrationEnum) {
        DataIntegrationEnum[DataIntegrationEnum["S3"] = 'S3'] = "S3";
        DataIntegrationEnum[DataIntegrationEnum["KINESIS"] = 'KINESIS'] = "KINESIS";
        DataIntegrationEnum[DataIntegrationEnum["DYNAMODB"] = 'DYNAMODB'] = "DYNAMODB";
        DataIntegrationEnum[DataIntegrationEnum["GCS"] = 'GCS'] = "GCS";
        DataIntegrationEnum[DataIntegrationEnum["REDSHIFT"] = 'REDSHIFT'] = "REDSHIFT";
        DataIntegrationEnum[DataIntegrationEnum["KAFKA"] = 'KAFKA'] = "KAFKA";
        DataIntegrationEnum[DataIntegrationEnum["FILE"] = 'FILE'] = "FILE";
        DataIntegrationEnum[DataIntegrationEnum["WRITE"] = 'WRITE'] = "WRITE";
        DataIntegrationEnum[DataIntegrationEnum["PUBLIC"] = 'PUBLIC'] = "PUBLIC";
        DataIntegrationEnum[DataIntegrationEnum["MONGODB"] = 'MONGODB'] = "MONGODB";
        DataIntegrationEnum[DataIntegrationEnum["RDSMYSQL"] = 'RDSMYSQL'] = "RDSMYSQL";
        DataIntegrationEnum[DataIntegrationEnum["RDSORACLE"] = 'RDSORACLE'] = "RDSORACLE";
        DataIntegrationEnum[DataIntegrationEnum["RDSPOSTGRES"] = 'RDSPOSTGRES'] = "RDSPOSTGRES";
        DataIntegrationEnum[DataIntegrationEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
    })(DataIntegrationEnum = UpdateUserNuxRequest.DataIntegrationEnum || (UpdateUserNuxRequest.DataIntegrationEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var QueryIntegrationTypeEnum;
    (function (QueryIntegrationTypeEnum) {
        QueryIntegrationTypeEnum[QueryIntegrationTypeEnum["VIZ"] = 'VIZ'] = "VIZ";
        QueryIntegrationTypeEnum[QueryIntegrationTypeEnum["CODE"] = 'CODE'] = "CODE";
        QueryIntegrationTypeEnum[QueryIntegrationTypeEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
    })(QueryIntegrationTypeEnum = UpdateUserNuxRequest.QueryIntegrationTypeEnum || (UpdateUserNuxRequest.QueryIntegrationTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var QueryIntegrationEnum;
    (function (QueryIntegrationEnum) {
        QueryIntegrationEnum[QueryIntegrationEnum["GRAFANA"] = 'GRAFANA'] = "GRAFANA";
        QueryIntegrationEnum[QueryIntegrationEnum["REDASH"] = 'REDASH'] = "REDASH";
        QueryIntegrationEnum[QueryIntegrationEnum["SUPERSET"] = 'SUPERSET'] = "SUPERSET";
        QueryIntegrationEnum[QueryIntegrationEnum["TABLEAU"] = 'TABLEAU'] = "TABLEAU";
        QueryIntegrationEnum[QueryIntegrationEnum["GOLANG"] = 'GOLANG'] = "GOLANG";
        QueryIntegrationEnum[QueryIntegrationEnum["JAVA"] = 'JAVA'] = "JAVA";
        QueryIntegrationEnum[QueryIntegrationEnum["NODEJS"] = 'NODEJS'] = "NODEJS";
        QueryIntegrationEnum[QueryIntegrationEnum["PYTHON"] = 'PYTHON'] = "PYTHON";
        QueryIntegrationEnum[QueryIntegrationEnum["RLANG"] = 'RLANG'] = "RLANG";
        QueryIntegrationEnum[QueryIntegrationEnum["REST"] = 'REST'] = "REST";
        QueryIntegrationEnum[QueryIntegrationEnum["RETOOL"] = 'RETOOL'] = "RETOOL";
        QueryIntegrationEnum[QueryIntegrationEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
    })(QueryIntegrationEnum = UpdateUserNuxRequest.QueryIntegrationEnum || (UpdateUserNuxRequest.QueryIntegrationEnum = {}));
})(UpdateUserNuxRequest = exports.UpdateUserNuxRequest || (exports.UpdateUserNuxRequest = {}));
/**
 * @export
 * @namespace UpdateVirtualInstanceRequest
 */
var UpdateVirtualInstanceRequest;
(function (UpdateVirtualInstanceRequest) {
    /**
     * @export
     * @enum {string}
     */
    var NewSizeEnum;
    (function (NewSizeEnum) {
        NewSizeEnum[NewSizeEnum["FREE"] = 'FREE'] = "FREE";
        NewSizeEnum[NewSizeEnum["SHARED"] = 'SHARED'] = "SHARED";
        NewSizeEnum[NewSizeEnum["SMALL"] = 'SMALL'] = "SMALL";
        NewSizeEnum[NewSizeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        NewSizeEnum[NewSizeEnum["LARGE"] = 'LARGE'] = "LARGE";
        NewSizeEnum[NewSizeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        NewSizeEnum[NewSizeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        NewSizeEnum[NewSizeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        NewSizeEnum[NewSizeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        NewSizeEnum[NewSizeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(NewSizeEnum = UpdateVirtualInstanceRequest.NewSizeEnum || (UpdateVirtualInstanceRequest.NewSizeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var NewTypeEnum;
    (function (NewTypeEnum) {
        NewTypeEnum[NewTypeEnum["FREE"] = 'FREE'] = "FREE";
        NewTypeEnum[NewTypeEnum["SHARED"] = 'SHARED'] = "SHARED";
        NewTypeEnum[NewTypeEnum["SMALL"] = 'SMALL'] = "SMALL";
        NewTypeEnum[NewTypeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        NewTypeEnum[NewTypeEnum["LARGE"] = 'LARGE'] = "LARGE";
        NewTypeEnum[NewTypeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        NewTypeEnum[NewTypeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        NewTypeEnum[NewTypeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        NewTypeEnum[NewTypeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        NewTypeEnum[NewTypeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(NewTypeEnum = UpdateVirtualInstanceRequest.NewTypeEnum || (UpdateVirtualInstanceRequest.NewTypeEnum = {}));
})(UpdateVirtualInstanceRequest = exports.UpdateVirtualInstanceRequest || (exports.UpdateVirtualInstanceRequest = {}));
/**
 * @export
 * @namespace User
 */
var User;
(function (User) {
    /**
     * @export
     * @enum {string}
     */
    var InviteStateEnum;
    (function (InviteStateEnum) {
        InviteStateEnum[InviteStateEnum["PENDING"] = 'PENDING'] = "PENDING";
        InviteStateEnum[InviteStateEnum["ACCEPTED"] = 'ACCEPTED'] = "ACCEPTED";
        InviteStateEnum[InviteStateEnum["EXPIRED"] = 'EXPIRED'] = "EXPIRED";
        InviteStateEnum[InviteStateEnum["CANCELLED"] = 'CANCELLED'] = "CANCELLED";
    })(InviteStateEnum = User.InviteStateEnum || (User.InviteStateEnum = {}));
})(User = exports.User || (exports.User = {}));
/**
 * @export
 * @namespace UserNux
 */
var UserNux;
(function (UserNux) {
    /**
     * @export
     * @enum {string}
     */
    var DataIntegrationEnum;
    (function (DataIntegrationEnum) {
        DataIntegrationEnum[DataIntegrationEnum["S3"] = 'S3'] = "S3";
        DataIntegrationEnum[DataIntegrationEnum["KINESIS"] = 'KINESIS'] = "KINESIS";
        DataIntegrationEnum[DataIntegrationEnum["DYNAMODB"] = 'DYNAMODB'] = "DYNAMODB";
        DataIntegrationEnum[DataIntegrationEnum["GCS"] = 'GCS'] = "GCS";
        DataIntegrationEnum[DataIntegrationEnum["REDSHIFT"] = 'REDSHIFT'] = "REDSHIFT";
        DataIntegrationEnum[DataIntegrationEnum["KAFKA"] = 'KAFKA'] = "KAFKA";
        DataIntegrationEnum[DataIntegrationEnum["FILE"] = 'FILE'] = "FILE";
        DataIntegrationEnum[DataIntegrationEnum["WRITE"] = 'WRITE'] = "WRITE";
        DataIntegrationEnum[DataIntegrationEnum["PUBLIC"] = 'PUBLIC'] = "PUBLIC";
        DataIntegrationEnum[DataIntegrationEnum["MONGODB"] = 'MONGODB'] = "MONGODB";
        DataIntegrationEnum[DataIntegrationEnum["RDSMYSQL"] = 'RDSMYSQL'] = "RDSMYSQL";
        DataIntegrationEnum[DataIntegrationEnum["RDSORACLE"] = 'RDSORACLE'] = "RDSORACLE";
        DataIntegrationEnum[DataIntegrationEnum["RDSPOSTGRES"] = 'RDSPOSTGRES'] = "RDSPOSTGRES";
        DataIntegrationEnum[DataIntegrationEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
    })(DataIntegrationEnum = UserNux.DataIntegrationEnum || (UserNux.DataIntegrationEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var QueryIntegrationTypeEnum;
    (function (QueryIntegrationTypeEnum) {
        QueryIntegrationTypeEnum[QueryIntegrationTypeEnum["VIZ"] = 'VIZ'] = "VIZ";
        QueryIntegrationTypeEnum[QueryIntegrationTypeEnum["CODE"] = 'CODE'] = "CODE";
        QueryIntegrationTypeEnum[QueryIntegrationTypeEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
    })(QueryIntegrationTypeEnum = UserNux.QueryIntegrationTypeEnum || (UserNux.QueryIntegrationTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var QueryIntegrationEnum;
    (function (QueryIntegrationEnum) {
        QueryIntegrationEnum[QueryIntegrationEnum["GRAFANA"] = 'GRAFANA'] = "GRAFANA";
        QueryIntegrationEnum[QueryIntegrationEnum["REDASH"] = 'REDASH'] = "REDASH";
        QueryIntegrationEnum[QueryIntegrationEnum["SUPERSET"] = 'SUPERSET'] = "SUPERSET";
        QueryIntegrationEnum[QueryIntegrationEnum["TABLEAU"] = 'TABLEAU'] = "TABLEAU";
        QueryIntegrationEnum[QueryIntegrationEnum["GOLANG"] = 'GOLANG'] = "GOLANG";
        QueryIntegrationEnum[QueryIntegrationEnum["JAVA"] = 'JAVA'] = "JAVA";
        QueryIntegrationEnum[QueryIntegrationEnum["NODEJS"] = 'NODEJS'] = "NODEJS";
        QueryIntegrationEnum[QueryIntegrationEnum["PYTHON"] = 'PYTHON'] = "PYTHON";
        QueryIntegrationEnum[QueryIntegrationEnum["RLANG"] = 'RLANG'] = "RLANG";
        QueryIntegrationEnum[QueryIntegrationEnum["REST"] = 'REST'] = "REST";
        QueryIntegrationEnum[QueryIntegrationEnum["RETOOL"] = 'RETOOL'] = "RETOOL";
        QueryIntegrationEnum[QueryIntegrationEnum["UNKNOWN"] = 'UNKNOWN'] = "UNKNOWN";
    })(QueryIntegrationEnum = UserNux.QueryIntegrationEnum || (UserNux.QueryIntegrationEnum = {}));
})(UserNux = exports.UserNux || (exports.UserNux = {}));
/**
 * @export
 * @namespace UserState
 */
var UserState;
(function (UserState) {
    /**
     * @export
     * @enum {string}
     */
    var DataEnum;
    (function (DataEnum) {
        DataEnum[DataEnum["NEW"] = 'NEW'] = "NEW";
        DataEnum[DataEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
    })(DataEnum = UserState.DataEnum || (UserState.DataEnum = {}));
})(UserState = exports.UserState || (exports.UserState = {}));
/**
 * @export
 * @namespace View
 */
var View;
(function (View) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["CREATED"] = 'CREATED'] = "CREATED";
        StateEnum[StateEnum["SYNCING"] = 'SYNCING'] = "SYNCING";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = View.StateEnum || (View.StateEnum = {}));
})(View = exports.View || (exports.View = {}));
/**
 * @export
 * @namespace VirtualInstance
 */
var VirtualInstance;
(function (VirtualInstance) {
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["PROVISIONINGRESOURCES"] = 'PROVISIONING_RESOURCES'] = "PROVISIONINGRESOURCES";
        StateEnum[StateEnum["REBALANCINGCOLLECTIONS"] = 'REBALANCING_COLLECTIONS'] = "REBALANCINGCOLLECTIONS";
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = VirtualInstance.StateEnum || (VirtualInstance.StateEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var CurrentTypeEnum;
    (function (CurrentTypeEnum) {
        CurrentTypeEnum[CurrentTypeEnum["FREE"] = 'FREE'] = "FREE";
        CurrentTypeEnum[CurrentTypeEnum["SHARED"] = 'SHARED'] = "SHARED";
        CurrentTypeEnum[CurrentTypeEnum["SMALL"] = 'SMALL'] = "SMALL";
        CurrentTypeEnum[CurrentTypeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        CurrentTypeEnum[CurrentTypeEnum["LARGE"] = 'LARGE'] = "LARGE";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(CurrentTypeEnum = VirtualInstance.CurrentTypeEnum || (VirtualInstance.CurrentTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var DesiredTypeEnum;
    (function (DesiredTypeEnum) {
        DesiredTypeEnum[DesiredTypeEnum["FREE"] = 'FREE'] = "FREE";
        DesiredTypeEnum[DesiredTypeEnum["SHARED"] = 'SHARED'] = "SHARED";
        DesiredTypeEnum[DesiredTypeEnum["SMALL"] = 'SMALL'] = "SMALL";
        DesiredTypeEnum[DesiredTypeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        DesiredTypeEnum[DesiredTypeEnum["LARGE"] = 'LARGE'] = "LARGE";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(DesiredTypeEnum = VirtualInstance.DesiredTypeEnum || (VirtualInstance.DesiredTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var CurrentSizeEnum;
    (function (CurrentSizeEnum) {
        CurrentSizeEnum[CurrentSizeEnum["FREE"] = 'FREE'] = "FREE";
        CurrentSizeEnum[CurrentSizeEnum["SHARED"] = 'SHARED'] = "SHARED";
        CurrentSizeEnum[CurrentSizeEnum["SMALL"] = 'SMALL'] = "SMALL";
        CurrentSizeEnum[CurrentSizeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        CurrentSizeEnum[CurrentSizeEnum["LARGE"] = 'LARGE'] = "LARGE";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        CurrentSizeEnum[CurrentSizeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(CurrentSizeEnum = VirtualInstance.CurrentSizeEnum || (VirtualInstance.CurrentSizeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var DesiredSizeEnum;
    (function (DesiredSizeEnum) {
        DesiredSizeEnum[DesiredSizeEnum["FREE"] = 'FREE'] = "FREE";
        DesiredSizeEnum[DesiredSizeEnum["SHARED"] = 'SHARED'] = "SHARED";
        DesiredSizeEnum[DesiredSizeEnum["SMALL"] = 'SMALL'] = "SMALL";
        DesiredSizeEnum[DesiredSizeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        DesiredSizeEnum[DesiredSizeEnum["LARGE"] = 'LARGE'] = "LARGE";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        DesiredSizeEnum[DesiredSizeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(DesiredSizeEnum = VirtualInstance.DesiredSizeEnum || (VirtualInstance.DesiredSizeEnum = {}));
})(VirtualInstance = exports.VirtualInstance || (exports.VirtualInstance = {}));
/**
 * @export
 * @namespace VirtualInstanceMetrics
 */
var VirtualInstanceMetrics;
(function (VirtualInstanceMetrics) {
    /**
     * @export
     * @enum {string}
     */
    var CurrentTypeEnum;
    (function (CurrentTypeEnum) {
        CurrentTypeEnum[CurrentTypeEnum["FREE"] = 'FREE'] = "FREE";
        CurrentTypeEnum[CurrentTypeEnum["SHARED"] = 'SHARED'] = "SHARED";
        CurrentTypeEnum[CurrentTypeEnum["SMALL"] = 'SMALL'] = "SMALL";
        CurrentTypeEnum[CurrentTypeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        CurrentTypeEnum[CurrentTypeEnum["LARGE"] = 'LARGE'] = "LARGE";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        CurrentTypeEnum[CurrentTypeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(CurrentTypeEnum = VirtualInstanceMetrics.CurrentTypeEnum || (VirtualInstanceMetrics.CurrentTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var DesiredTypeEnum;
    (function (DesiredTypeEnum) {
        DesiredTypeEnum[DesiredTypeEnum["FREE"] = 'FREE'] = "FREE";
        DesiredTypeEnum[DesiredTypeEnum["SHARED"] = 'SHARED'] = "SHARED";
        DesiredTypeEnum[DesiredTypeEnum["SMALL"] = 'SMALL'] = "SMALL";
        DesiredTypeEnum[DesiredTypeEnum["MEDIUM"] = 'MEDIUM'] = "MEDIUM";
        DesiredTypeEnum[DesiredTypeEnum["LARGE"] = 'LARGE'] = "LARGE";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE"] = 'XLARGE'] = "XLARGE";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE2"] = 'XLARGE2'] = "XLARGE2";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE4"] = 'XLARGE4'] = "XLARGE4";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE8"] = 'XLARGE8'] = "XLARGE8";
        DesiredTypeEnum[DesiredTypeEnum["XLARGE16"] = 'XLARGE16'] = "XLARGE16";
    })(DesiredTypeEnum = VirtualInstanceMetrics.DesiredTypeEnum || (VirtualInstanceMetrics.DesiredTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var StateEnum;
    (function (StateEnum) {
        StateEnum[StateEnum["PROVISIONINGRESOURCES"] = 'PROVISIONING_RESOURCES'] = "PROVISIONINGRESOURCES";
        StateEnum[StateEnum["REBALANCINGCOLLECTIONS"] = 'REBALANCING_COLLECTIONS'] = "REBALANCINGCOLLECTIONS";
        StateEnum[StateEnum["ACTIVE"] = 'ACTIVE'] = "ACTIVE";
        StateEnum[StateEnum["DELETED"] = 'DELETED'] = "DELETED";
    })(StateEnum = VirtualInstanceMetrics.StateEnum || (VirtualInstanceMetrics.StateEnum = {}));
})(VirtualInstanceMetrics = exports.VirtualInstanceMetrics || (exports.VirtualInstanceMetrics = {}));
/**
 * APIKeysApi - fetch parameter creator
 * @export
 */
exports.APIKeysApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a new API key for the authenticated user.
         * @summary Create API Key
         * @param {CreateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createApiKey.');
            }
            var localVarPath = "/v1/orgs/self/users/self/apikeys";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateApiKeyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an API key for any user in your organization.
         * @summary Delete API Key
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: function (name, user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling deleteApiKey.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling deleteApiKey.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}/apikeys/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)))
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete API Key
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKeySelf: function (name, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling deleteApiKeySelf.');
            }
            var localVarPath = "/v1/orgs/self/users/self/apikeys/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a particular API key for any user in your organization.
         * @summary Retrieve API Key
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {string} name Name of the API key.
         * @param {boolean} [reveal]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKey: function (user, name, reveal, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling getApiKey.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling getApiKey.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}/apikeys/{name}"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)))
                .replace("{" + "name" + "}", encodeURIComponent(String(name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (reveal !== undefined) {
                localVarQueryParameter['reveal'] = reveal;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieve API key
         * @param {string} name
         * @param {boolean} [reveal]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeySelf: function (name, reveal, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling getApiKeySelf.');
            }
            var localVarPath = "/v1/orgs/self/users/self/apikeys/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (reveal !== undefined) {
                localVarQueryParameter['reveal'] = reveal;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List API key metadata for any user in your organization.
         * @summary List API Keys.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling listApiKeys.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}/apikeys"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeysSelf: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/apikeys";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the state of an API key for any user in your organization.
         * @summary Update an API key's state
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey: function (name, user, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling updateApiKey.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling updateApiKey.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateApiKey.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}/apikeys/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)))
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateApiKeyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update API key
         * @param {string} name
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKeySelf: function (name, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling updateApiKeySelf.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateApiKeySelf.');
            }
            var localVarPath = "/v1/orgs/self/users/self/apikeys/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateApiKeyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * APIKeysApi - functional programming interface
 * @export
 */
exports.APIKeysApiFp = function (configuration) {
    return {
        /**
         * Create a new API key for the authenticated user.
         * @summary Create API Key
         * @param {CreateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: function (body, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).createApiKey(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an API key for any user in your organization.
         * @summary Delete API Key
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: function (name, user, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).deleteApiKey(name, user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete API Key
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKeySelf: function (name, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).deleteApiKeySelf(name, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a particular API key for any user in your organization.
         * @summary Retrieve API Key
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {string} name Name of the API key.
         * @param {boolean} [reveal]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKey: function (user, name, reveal, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).getApiKey(user, name, reveal, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Retrieve API key
         * @param {string} name
         * @param {boolean} [reveal]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeySelf: function (name, reveal, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).getApiKeySelf(name, reveal, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List API key metadata for any user in your organization.
         * @summary List API Keys.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys: function (user, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).listApiKeys(user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeysSelf: function (options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).listApiKeysSelf(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the state of an API key for any user in your organization.
         * @summary Update an API key's state
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey: function (name, user, body, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).updateApiKey(name, user, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update API key
         * @param {string} name
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKeySelf: function (name, body, options) {
            var localVarFetchArgs = exports.APIKeysApiFetchParamCreator(configuration).updateApiKeySelf(name, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * APIKeysApi - factory interface
 * @export
 */
exports.APIKeysApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a new API key for the authenticated user.
         * @summary Create API Key
         * @param {CreateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: function (body, options) {
            return exports.APIKeysApiFp(configuration).createApiKey(body, options)(fetch, basePath);
        },
        /**
         * Delete an API key for any user in your organization.
         * @summary Delete API Key
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: function (name, user, options) {
            return exports.APIKeysApiFp(configuration).deleteApiKey(name, user, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete API Key
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKeySelf: function (name, options) {
            return exports.APIKeysApiFp(configuration).deleteApiKeySelf(name, options)(fetch, basePath);
        },
        /**
         * Retrieve a particular API key for any user in your organization.
         * @summary Retrieve API Key
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {string} name Name of the API key.
         * @param {boolean} [reveal]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKey: function (user, name, reveal, options) {
            return exports.APIKeysApiFp(configuration).getApiKey(user, name, reveal, options)(fetch, basePath);
        },
        /**
         *
         * @summary Retrieve API key
         * @param {string} name
         * @param {boolean} [reveal]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeySelf: function (name, reveal, options) {
            return exports.APIKeysApiFp(configuration).getApiKeySelf(name, reveal, options)(fetch, basePath);
        },
        /**
         * List API key metadata for any user in your organization.
         * @summary List API Keys.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeys: function (user, options) {
            return exports.APIKeysApiFp(configuration).listApiKeys(user, options)(fetch, basePath);
        },
        /**
         *
         * @summary List API keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeysSelf: function (options) {
            return exports.APIKeysApiFp(configuration).listApiKeysSelf(options)(fetch, basePath);
        },
        /**
         * Update the state of an API key for any user in your organization.
         * @summary Update an API key's state
         * @param {string} name Name of the API key.
         * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey: function (name, user, body, options) {
            return exports.APIKeysApiFp(configuration).updateApiKey(name, user, body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update API key
         * @param {string} name
         * @param {UpdateApiKeyRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKeySelf: function (name, body, options) {
            return exports.APIKeysApiFp(configuration).updateApiKeySelf(name, body, options)(fetch, basePath);
        },
    };
};
/**
 * APIKeysApi - object-oriented interface
 * @export
 * @class APIKeysApi
 * @extends {BaseAPI}
 */
var APIKeysApi = /** @class */ (function (_super) {
    __extends(APIKeysApi, _super);
    function APIKeysApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new API key for the authenticated user.
     * @summary Create API Key
     * @param {CreateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.createApiKey = function (body, options) {
        return exports.APIKeysApiFp(this.configuration).createApiKey(body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an API key for any user in your organization.
     * @summary Delete API Key
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.deleteApiKey = function (name, user, options) {
        return exports.APIKeysApiFp(this.configuration).deleteApiKey(name, user, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete API Key
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.deleteApiKeySelf = function (name, options) {
        return exports.APIKeysApiFp(this.configuration).deleteApiKeySelf(name, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a particular API key for any user in your organization.
     * @summary Retrieve API Key
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {string} name Name of the API key.
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.getApiKey = function (user, name, reveal, options) {
        return exports.APIKeysApiFp(this.configuration).getApiKey(user, name, reveal, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Retrieve API key
     * @param {string} name
     * @param {boolean} [reveal]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.getApiKeySelf = function (name, reveal, options) {
        return exports.APIKeysApiFp(this.configuration).getApiKeySelf(name, reveal, options)(this.fetch, this.basePath);
    };
    /**
     * List API key metadata for any user in your organization.
     * @summary List API Keys.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.listApiKeys = function (user, options) {
        return exports.APIKeysApiFp(this.configuration).listApiKeys(user, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary List API keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.listApiKeysSelf = function (options) {
        return exports.APIKeysApiFp(this.configuration).listApiKeysSelf(options)(this.fetch, this.basePath);
    };
    /**
     * Update the state of an API key for any user in your organization.
     * @summary Update an API key's state
     * @param {string} name Name of the API key.
     * @param {string} user Email of the API key owner. Use &#x60;self&#x60; to specify the currently authenticated user.
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.updateApiKey = function (name, user, body, options) {
        return exports.APIKeysApiFp(this.configuration).updateApiKey(name, user, body, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update API key
     * @param {string} name
     * @param {UpdateApiKeyRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    APIKeysApi.prototype.updateApiKeySelf = function (name, body, options) {
        return exports.APIKeysApiFp(this.configuration).updateApiKeySelf(name, body, options)(this.fetch, this.basePath);
    };
    return APIKeysApi;
}(BaseAPI));
exports.APIKeysApi = APIKeysApi;
/**
 * AliasesApi - fetch parameter creator
 * @export
 */
exports.AliasesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create new alias in a workspace.
         * @summary Create Alias
         * @param {string} workspace name of the workspace
         * @param {CreateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlias: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createAlias.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateAliasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an alias.
         * @summary Delete Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlias: function (workspace, alias, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteAlias.');
            }
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias', 'Required parameter alias was null or undefined when calling deleteAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "alias" + "}", encodeURIComponent(String(alias)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about an alias
         * @summary Retrieve Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlias: function (workspace, alias, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getAlias.');
            }
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias', 'Required parameter alias was null or undefined when calling getAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "alias" + "}", encodeURIComponent(String(alias)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all aliases in an organization
         * @summary List Aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliases: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/aliases";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Query Lambdas that hit a specific Rockset Alias.
         * @summary Get Query Lambdas with Alias
         * @param {string} workspace
         * @param {string} alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasWithAlias: function (workspace, alias, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listQueryLambdasWithAlias.');
            }
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias', 'Required parameter alias was null or undefined when calling listQueryLambdasWithAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases/{alias}/lambdas"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "alias" + "}", encodeURIComponent(String(alias)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer ownership of an alias to a new user.
         * @summary Transfer Ownership of an Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {TransferOwnershipRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, alias, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling transferOwnership.');
            }
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias', 'Required parameter alias was null or undefined when calling transferOwnership.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling transferOwnership.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases/{alias}/owner"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "alias" + "}", encodeURIComponent(String(alias)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TransferOwnershipRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update alias in a workspace.
         * @summary Update Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {UpdateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlias: function (workspace, alias, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling updateAlias.');
            }
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias', 'Required parameter alias was null or undefined when calling updateAlias.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateAlias.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "alias" + "}", encodeURIComponent(String(alias)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateAliasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all aliases in a workspace.
         * @summary List Aliases in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceAliases: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling workspaceAliases.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/aliases"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AliasesApi - functional programming interface
 * @export
 */
exports.AliasesApiFp = function (configuration) {
    return {
        /**
         * Create new alias in a workspace.
         * @summary Create Alias
         * @param {string} workspace name of the workspace
         * @param {CreateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlias: function (workspace, body, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).createAlias(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an alias.
         * @summary Delete Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlias: function (workspace, alias, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).deleteAlias(workspace, alias, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get details about an alias
         * @summary Retrieve Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlias: function (workspace, alias, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).getAlias(workspace, alias, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all aliases in an organization
         * @summary List Aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliases: function (options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).listAliases(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Query Lambdas that hit a specific Rockset Alias.
         * @summary Get Query Lambdas with Alias
         * @param {string} workspace
         * @param {string} alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasWithAlias: function (workspace, alias, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).listQueryLambdasWithAlias(workspace, alias, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Transfer ownership of an alias to a new user.
         * @summary Transfer Ownership of an Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {TransferOwnershipRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, alias, body, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).transferOwnership(workspace, alias, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update alias in a workspace.
         * @summary Update Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {UpdateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlias: function (workspace, alias, body, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).updateAlias(workspace, alias, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all aliases in a workspace.
         * @summary List Aliases in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceAliases: function (workspace, options) {
            var localVarFetchArgs = exports.AliasesApiFetchParamCreator(configuration).workspaceAliases(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AliasesApi - factory interface
 * @export
 */
exports.AliasesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create new alias in a workspace.
         * @summary Create Alias
         * @param {string} workspace name of the workspace
         * @param {CreateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlias: function (workspace, body, options) {
            return exports.AliasesApiFp(configuration).createAlias(workspace, body, options)(fetch, basePath);
        },
        /**
         * Delete an alias.
         * @summary Delete Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlias: function (workspace, alias, options) {
            return exports.AliasesApiFp(configuration).deleteAlias(workspace, alias, options)(fetch, basePath);
        },
        /**
         * Get details about an alias
         * @summary Retrieve Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlias: function (workspace, alias, options) {
            return exports.AliasesApiFp(configuration).getAlias(workspace, alias, options)(fetch, basePath);
        },
        /**
         * Retrieve all aliases in an organization
         * @summary List Aliases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliases: function (options) {
            return exports.AliasesApiFp(configuration).listAliases(options)(fetch, basePath);
        },
        /**
         * Get all Query Lambdas that hit a specific Rockset Alias.
         * @summary Get Query Lambdas with Alias
         * @param {string} workspace
         * @param {string} alias
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasWithAlias: function (workspace, alias, options) {
            return exports.AliasesApiFp(configuration).listQueryLambdasWithAlias(workspace, alias, options)(fetch, basePath);
        },
        /**
         * Transfer ownership of an alias to a new user.
         * @summary Transfer Ownership of an Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {TransferOwnershipRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, alias, body, options) {
            return exports.AliasesApiFp(configuration).transferOwnership(workspace, alias, body, options)(fetch, basePath);
        },
        /**
         * Update alias in a workspace.
         * @summary Update Alias
         * @param {string} workspace name of the workspace
         * @param {string} alias name of the alias
         * @param {UpdateAliasRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlias: function (workspace, alias, body, options) {
            return exports.AliasesApiFp(configuration).updateAlias(workspace, alias, body, options)(fetch, basePath);
        },
        /**
         * Retrieve all aliases in a workspace.
         * @summary List Aliases in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceAliases: function (workspace, options) {
            return exports.AliasesApiFp(configuration).workspaceAliases(workspace, options)(fetch, basePath);
        },
    };
};
/**
 * AliasesApi - object-oriented interface
 * @export
 * @class AliasesApi
 * @extends {BaseAPI}
 */
var AliasesApi = /** @class */ (function (_super) {
    __extends(AliasesApi, _super);
    function AliasesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create new alias in a workspace.
     * @summary Create Alias
     * @param {string} workspace name of the workspace
     * @param {CreateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.createAlias = function (workspace, body, options) {
        return exports.AliasesApiFp(this.configuration).createAlias(workspace, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an alias.
     * @summary Delete Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.deleteAlias = function (workspace, alias, options) {
        return exports.AliasesApiFp(this.configuration).deleteAlias(workspace, alias, options)(this.fetch, this.basePath);
    };
    /**
     * Get details about an alias
     * @summary Retrieve Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.getAlias = function (workspace, alias, options) {
        return exports.AliasesApiFp(this.configuration).getAlias(workspace, alias, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all aliases in an organization
     * @summary List Aliases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.listAliases = function (options) {
        return exports.AliasesApiFp(this.configuration).listAliases(options)(this.fetch, this.basePath);
    };
    /**
     * Get all Query Lambdas that hit a specific Rockset Alias.
     * @summary Get Query Lambdas with Alias
     * @param {string} workspace
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.listQueryLambdasWithAlias = function (workspace, alias, options) {
        return exports.AliasesApiFp(this.configuration).listQueryLambdasWithAlias(workspace, alias, options)(this.fetch, this.basePath);
    };
    /**
     * Transfer ownership of an alias to a new user.
     * @summary Transfer Ownership of an Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {TransferOwnershipRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.transferOwnership = function (workspace, alias, body, options) {
        return exports.AliasesApiFp(this.configuration).transferOwnership(workspace, alias, body, options)(this.fetch, this.basePath);
    };
    /**
     * Update alias in a workspace.
     * @summary Update Alias
     * @param {string} workspace name of the workspace
     * @param {string} alias name of the alias
     * @param {UpdateAliasRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.updateAlias = function (workspace, alias, body, options) {
        return exports.AliasesApiFp(this.configuration).updateAlias(workspace, alias, body, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all aliases in a workspace.
     * @summary List Aliases in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    AliasesApi.prototype.workspaceAliases = function (workspace, options) {
        return exports.AliasesApiFp(this.configuration).workspaceAliases(workspace, options)(this.fetch, this.basePath);
    };
    return AliasesApi;
}(BaseAPI));
exports.AliasesApi = AliasesApi;
/**
 * CollectionsApi - fetch parameter creator
 * @export
 */
exports.CollectionsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create new collection in a workspace.
         * @summary Create Collection
         * @param {string} workspace name of the workspace
         * @param {CreateCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createCollection.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createCollection.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateCollectionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an ephemeral source (expires after 24h) to perform preview on.
         * @summary Create Preview Source
         * @param {CreatePreviewSourceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPreviewSource: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createPreviewSource.');
            }
            var localVarPath = "/v1/orgs/self/collections/previews/sources";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreatePreviewSourceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a collection and all its documents from Rockset.
         * @summary Delete Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: function (workspace, collection, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteCollection.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling deleteCollection.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a collection.
         * @summary Retrieve Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection: function (workspace, collection, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getCollection.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling getCollection.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Determines if the collection includes data at or after the specified fence
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {string} [fence]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionOffsets: function (workspace, collection, fence, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getCollectionOffsets.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling getCollectionOffsets.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/offsets/commit"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (fence !== undefined) {
                localVarQueryParameter['fence'] = fence;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get schema for a collection in Rockset.
         * @summary Get Collection Schema
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {number} [depth] max nested depth level to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema: function (workspace, collection, depth, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getSchema.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling getSchema.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/schema"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about source.
         * @summary Get Source config
         * @param {SourceConfigRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceConfigs: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling getSourceConfigs.');
            }
            var localVarPath = "/v1/orgs/self/collections/configs";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SourceConfigRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Aliases for a specific Rockset Collection.
         * @summary Get Aliases for Collection
         * @param {string} workspace
         * @param {string} collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliasesForCollection: function (workspace, collection, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listAliasesForCollection.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling listAliasesForCollection.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/aliases"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all collections in an organization.
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/collections";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Query Lambdas that hit a specific Rockset Collection.
         * @summary Get Query Lambdas for Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInCollection: function (workspace, collection, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listQueryLambdasInCollection.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling listQueryLambdasInCollection.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/lambdas"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sample documents given collection configuration.
         * @summary Preview Collection
         * @param {PreviewCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewCollection: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling previewCollection.');
            }
            var localVarPath = "/v1/orgs/self/collections/previews";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PreviewCollectionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update state of a collection.
         * @summary Update state of Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {'READY' | 'PAUSED'} state new state of this collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCollectionState: function (workspace, collection, state, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling setCollectionState.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling setCollectionState.');
            }
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state', 'Required parameter state was null or undefined when calling setCollectionState.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/state/{state}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)))
                .replace("{" + "state" + "}", encodeURIComponent(String(state)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer ownership of a collection to a new user.
         * @summary Transfer Ownership of a Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, collection, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling transferOwnership.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling transferOwnership.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling transferOwnership.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/owner"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TransferOwnershipRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a file to a collection in Rockset.
         * @summary Upload a file
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {InputStream} body file input stream
         * @param {FormDataContentDisposition} body2 file metadata
         * @param {FormDataBodyPart} [body3] file format params
         * @param {string} [body4] file size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: function (workspace, collection, body, body2, body3, body4, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling uploadFile.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling uploadFile.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling uploadFile.');
            }
            // verify required parameter 'body2' is not null or undefined
            if (body2 === null || body2 === undefined) {
                throw new RequiredError('body2', 'Required parameter body2 was null or undefined when calling uploadFile.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/uploads"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body4 || {}) : (body4 || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a file to a preview source that can be used to generate preview docs
         * @summary Upload File to Preview Source
         * @param {string} preview_source_id preview source identifier
         * @param {InputStream} body file input stream
         * @param {FormDataContentDisposition} body2 file metadata
         * @param {string} [body3] file size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilePreviewSource: function (preview_source_id, body, body2, body3, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'preview_source_id' is not null or undefined
            if (preview_source_id === null || preview_source_id === undefined) {
                throw new RequiredError('preview_source_id', 'Required parameter preview_source_id was null or undefined when calling uploadFilePreviewSource.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling uploadFilePreviewSource.');
            }
            // verify required parameter 'body2' is not null or undefined
            if (body2 === null || body2 === undefined) {
                throw new RequiredError('body2', 'Required parameter body2 was null or undefined when calling uploadFilePreviewSource.');
            }
            var localVarPath = "/v1/orgs/self/collections/previews/sources/{preview_source_id}/uploads"
                .replace("{" + "preview_source_id" + "}", encodeURIComponent(String(preview_source_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body3 || {}) : (body3 || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all collections in a workspace.
         * @summary List Collections in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceCollections: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling workspaceCollections.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CollectionsApi - functional programming interface
 * @export
 */
exports.CollectionsApiFp = function (configuration) {
    return {
        /**
         * Create new collection in a workspace.
         * @summary Create Collection
         * @param {string} workspace name of the workspace
         * @param {CreateCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (workspace, body, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).createCollection(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create an ephemeral source (expires after 24h) to perform preview on.
         * @summary Create Preview Source
         * @param {CreatePreviewSourceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPreviewSource: function (body, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).createPreviewSource(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a collection and all its documents from Rockset.
         * @summary Delete Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: function (workspace, collection, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).deleteCollection(workspace, collection, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get details about a collection.
         * @summary Retrieve Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection: function (workspace, collection, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).getCollection(workspace, collection, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Determines if the collection includes data at or after the specified fence
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {string} [fence]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionOffsets: function (workspace, collection, fence, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).getCollectionOffsets(workspace, collection, fence, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get schema for a collection in Rockset.
         * @summary Get Collection Schema
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {number} [depth] max nested depth level to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema: function (workspace, collection, depth, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).getSchema(workspace, collection, depth, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve information about source.
         * @summary Get Source config
         * @param {SourceConfigRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceConfigs: function (body, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).getSourceConfigs(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Aliases for a specific Rockset Collection.
         * @summary Get Aliases for Collection
         * @param {string} workspace
         * @param {string} collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliasesForCollection: function (workspace, collection, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).listAliasesForCollection(workspace, collection, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all collections in an organization.
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: function (options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).listCollections(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all Query Lambdas that hit a specific Rockset Collection.
         * @summary Get Query Lambdas for Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInCollection: function (workspace, collection, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).listQueryLambdasInCollection(workspace, collection, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get sample documents given collection configuration.
         * @summary Preview Collection
         * @param {PreviewCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewCollection: function (body, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).previewCollection(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update state of a collection.
         * @summary Update state of Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {'READY' | 'PAUSED'} state new state of this collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCollectionState: function (workspace, collection, state, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).setCollectionState(workspace, collection, state, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Transfer ownership of a collection to a new user.
         * @summary Transfer Ownership of a Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, collection, body, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).transferOwnership(workspace, collection, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Upload a file to a collection in Rockset.
         * @summary Upload a file
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {InputStream} body file input stream
         * @param {FormDataContentDisposition} body2 file metadata
         * @param {FormDataBodyPart} [body3] file format params
         * @param {string} [body4] file size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: function (workspace, collection, body, body2, body3, body4, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).uploadFile(workspace, collection, body, body2, body3, body4, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Upload a file to a preview source that can be used to generate preview docs
         * @summary Upload File to Preview Source
         * @param {string} preview_source_id preview source identifier
         * @param {InputStream} body file input stream
         * @param {FormDataContentDisposition} body2 file metadata
         * @param {string} [body3] file size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilePreviewSource: function (preview_source_id, body, body2, body3, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).uploadFilePreviewSource(preview_source_id, body, body2, body3, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all collections in a workspace.
         * @summary List Collections in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceCollections: function (workspace, options) {
            var localVarFetchArgs = exports.CollectionsApiFetchParamCreator(configuration).workspaceCollections(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CollectionsApi - factory interface
 * @export
 */
exports.CollectionsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create new collection in a workspace.
         * @summary Create Collection
         * @param {string} workspace name of the workspace
         * @param {CreateCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: function (workspace, body, options) {
            return exports.CollectionsApiFp(configuration).createCollection(workspace, body, options)(fetch, basePath);
        },
        /**
         * Create an ephemeral source (expires after 24h) to perform preview on.
         * @summary Create Preview Source
         * @param {CreatePreviewSourceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPreviewSource: function (body, options) {
            return exports.CollectionsApiFp(configuration).createPreviewSource(body, options)(fetch, basePath);
        },
        /**
         * Delete a collection and all its documents from Rockset.
         * @summary Delete Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: function (workspace, collection, options) {
            return exports.CollectionsApiFp(configuration).deleteCollection(workspace, collection, options)(fetch, basePath);
        },
        /**
         * Get details about a collection.
         * @summary Retrieve Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection: function (workspace, collection, options) {
            return exports.CollectionsApiFp(configuration).getCollection(workspace, collection, options)(fetch, basePath);
        },
        /**
         *
         * @summary Determines if the collection includes data at or after the specified fence
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {string} [fence]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionOffsets: function (workspace, collection, fence, options) {
            return exports.CollectionsApiFp(configuration).getCollectionOffsets(workspace, collection, fence, options)(fetch, basePath);
        },
        /**
         * Get schema for a collection in Rockset.
         * @summary Get Collection Schema
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {number} [depth] max nested depth level to search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchema: function (workspace, collection, depth, options) {
            return exports.CollectionsApiFp(configuration).getSchema(workspace, collection, depth, options)(fetch, basePath);
        },
        /**
         * Retrieve information about source.
         * @summary Get Source config
         * @param {SourceConfigRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSourceConfigs: function (body, options) {
            return exports.CollectionsApiFp(configuration).getSourceConfigs(body, options)(fetch, basePath);
        },
        /**
         * Get all Aliases for a specific Rockset Collection.
         * @summary Get Aliases for Collection
         * @param {string} workspace
         * @param {string} collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAliasesForCollection: function (workspace, collection, options) {
            return exports.CollectionsApiFp(configuration).listAliasesForCollection(workspace, collection, options)(fetch, basePath);
        },
        /**
         * Retrieve all collections in an organization.
         * @summary List Collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: function (options) {
            return exports.CollectionsApiFp(configuration).listCollections(options)(fetch, basePath);
        },
        /**
         * Get all Query Lambdas that hit a specific Rockset Collection.
         * @summary Get Query Lambdas for Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInCollection: function (workspace, collection, options) {
            return exports.CollectionsApiFp(configuration).listQueryLambdasInCollection(workspace, collection, options)(fetch, basePath);
        },
        /**
         * Get sample documents given collection configuration.
         * @summary Preview Collection
         * @param {PreviewCollectionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewCollection: function (body, options) {
            return exports.CollectionsApiFp(configuration).previewCollection(body, options)(fetch, basePath);
        },
        /**
         * Update state of a collection.
         * @summary Update state of Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {'READY' | 'PAUSED'} state new state of this collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCollectionState: function (workspace, collection, state, options) {
            return exports.CollectionsApiFp(configuration).setCollectionState(workspace, collection, state, options)(fetch, basePath);
        },
        /**
         * Transfer ownership of a collection to a new user.
         * @summary Transfer Ownership of a Collection
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, collection, body, options) {
            return exports.CollectionsApiFp(configuration).transferOwnership(workspace, collection, body, options)(fetch, basePath);
        },
        /**
         * Upload a file to a collection in Rockset.
         * @summary Upload a file
         * @param {string} workspace name of the workspace
         * @param {string} collection name of the collection
         * @param {InputStream} body file input stream
         * @param {FormDataContentDisposition} body2 file metadata
         * @param {FormDataBodyPart} [body3] file format params
         * @param {string} [body4] file size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: function (workspace, collection, body, body2, body3, body4, options) {
            return exports.CollectionsApiFp(configuration).uploadFile(workspace, collection, body, body2, body3, body4, options)(fetch, basePath);
        },
        /**
         * Upload a file to a preview source that can be used to generate preview docs
         * @summary Upload File to Preview Source
         * @param {string} preview_source_id preview source identifier
         * @param {InputStream} body file input stream
         * @param {FormDataContentDisposition} body2 file metadata
         * @param {string} [body3] file size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilePreviewSource: function (preview_source_id, body, body2, body3, options) {
            return exports.CollectionsApiFp(configuration).uploadFilePreviewSource(preview_source_id, body, body2, body3, options)(fetch, basePath);
        },
        /**
         * Retrieve all collections in a workspace.
         * @summary List Collections in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceCollections: function (workspace, options) {
            return exports.CollectionsApiFp(configuration).workspaceCollections(workspace, options)(fetch, basePath);
        },
    };
};
/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
var CollectionsApi = /** @class */ (function (_super) {
    __extends(CollectionsApi, _super);
    function CollectionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create new collection in a workspace.
     * @summary Create Collection
     * @param {string} workspace name of the workspace
     * @param {CreateCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.createCollection = function (workspace, body, options) {
        return exports.CollectionsApiFp(this.configuration).createCollection(workspace, body, options)(this.fetch, this.basePath);
    };
    /**
     * Create an ephemeral source (expires after 24h) to perform preview on.
     * @summary Create Preview Source
     * @param {CreatePreviewSourceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.createPreviewSource = function (body, options) {
        return exports.CollectionsApiFp(this.configuration).createPreviewSource(body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a collection and all its documents from Rockset.
     * @summary Delete Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.deleteCollection = function (workspace, collection, options) {
        return exports.CollectionsApiFp(this.configuration).deleteCollection(workspace, collection, options)(this.fetch, this.basePath);
    };
    /**
     * Get details about a collection.
     * @summary Retrieve Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.getCollection = function (workspace, collection, options) {
        return exports.CollectionsApiFp(this.configuration).getCollection(workspace, collection, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Determines if the collection includes data at or after the specified fence
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {string} [fence]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.getCollectionOffsets = function (workspace, collection, fence, options) {
        return exports.CollectionsApiFp(this.configuration).getCollectionOffsets(workspace, collection, fence, options)(this.fetch, this.basePath);
    };
    /**
     * Get schema for a collection in Rockset.
     * @summary Get Collection Schema
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {number} [depth] max nested depth level to search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.getSchema = function (workspace, collection, depth, options) {
        return exports.CollectionsApiFp(this.configuration).getSchema(workspace, collection, depth, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve information about source.
     * @summary Get Source config
     * @param {SourceConfigRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.getSourceConfigs = function (body, options) {
        return exports.CollectionsApiFp(this.configuration).getSourceConfigs(body, options)(this.fetch, this.basePath);
    };
    /**
     * Get all Aliases for a specific Rockset Collection.
     * @summary Get Aliases for Collection
     * @param {string} workspace
     * @param {string} collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.listAliasesForCollection = function (workspace, collection, options) {
        return exports.CollectionsApiFp(this.configuration).listAliasesForCollection(workspace, collection, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all collections in an organization.
     * @summary List Collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.listCollections = function (options) {
        return exports.CollectionsApiFp(this.configuration).listCollections(options)(this.fetch, this.basePath);
    };
    /**
     * Get all Query Lambdas that hit a specific Rockset Collection.
     * @summary Get Query Lambdas for Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.listQueryLambdasInCollection = function (workspace, collection, options) {
        return exports.CollectionsApiFp(this.configuration).listQueryLambdasInCollection(workspace, collection, options)(this.fetch, this.basePath);
    };
    /**
     * Get sample documents given collection configuration.
     * @summary Preview Collection
     * @param {PreviewCollectionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.previewCollection = function (body, options) {
        return exports.CollectionsApiFp(this.configuration).previewCollection(body, options)(this.fetch, this.basePath);
    };
    /**
     * Update state of a collection.
     * @summary Update state of Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {'READY' | 'PAUSED'} state new state of this collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.setCollectionState = function (workspace, collection, state, options) {
        return exports.CollectionsApiFp(this.configuration).setCollectionState(workspace, collection, state, options)(this.fetch, this.basePath);
    };
    /**
     * Transfer ownership of a collection to a new user.
     * @summary Transfer Ownership of a Collection
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.transferOwnership = function (workspace, collection, body, options) {
        return exports.CollectionsApiFp(this.configuration).transferOwnership(workspace, collection, body, options)(this.fetch, this.basePath);
    };
    /**
     * Upload a file to a collection in Rockset.
     * @summary Upload a file
     * @param {string} workspace name of the workspace
     * @param {string} collection name of the collection
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {FormDataBodyPart} [body3] file format params
     * @param {string} [body4] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.uploadFile = function (workspace, collection, body, body2, body3, body4, options) {
        return exports.CollectionsApiFp(this.configuration).uploadFile(workspace, collection, body, body2, body3, body4, options)(this.fetch, this.basePath);
    };
    /**
     * Upload a file to a preview source that can be used to generate preview docs
     * @summary Upload File to Preview Source
     * @param {string} preview_source_id preview source identifier
     * @param {InputStream} body file input stream
     * @param {FormDataContentDisposition} body2 file metadata
     * @param {string} [body3] file size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.uploadFilePreviewSource = function (preview_source_id, body, body2, body3, options) {
        return exports.CollectionsApiFp(this.configuration).uploadFilePreviewSource(preview_source_id, body, body2, body3, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all collections in a workspace.
     * @summary List Collections in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    CollectionsApi.prototype.workspaceCollections = function (workspace, options) {
        return exports.CollectionsApiFp(this.configuration).workspaceCollections(workspace, options)(this.fetch, this.basePath);
    };
    return CollectionsApi;
}(BaseAPI));
exports.CollectionsApi = CollectionsApi;
/**
 * ConsoleApi - fetch parameter creator
 * @export
 */
exports.ConsoleApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Send confirmation email to user, send email internally, and notify internally
         * @summary Contact Sales
         * @param {ContactSalesRequest} body contact sales information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactSales: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling contactSales.');
            }
            var localVarPath = "/v1/console/sales";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ContactSalesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Open a support ticket on behalf of the user
         * @summary Contact Support
         * @param {ContactSupportRequest} body contact sales information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactSupport: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling contactSupport.');
            }
            var localVarPath = "/v1/console/support";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ContactSupportRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of all activity for user
         * @summary Get Activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivity: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/console/activity";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Record an activity item from console.
         * @summary Record Activity
         * @param {RecordActivityRequest} body the activity item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordActivity: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling recordActivity.');
            }
            var localVarPath = "/v1/console/activity";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RecordActivityRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ConsoleApi - functional programming interface
 * @export
 */
exports.ConsoleApiFp = function (configuration) {
    return {
        /**
         * Send confirmation email to user, send email internally, and notify internally
         * @summary Contact Sales
         * @param {ContactSalesRequest} body contact sales information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactSales: function (body, options) {
            var localVarFetchArgs = exports.ConsoleApiFetchParamCreator(configuration).contactSales(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Open a support ticket on behalf of the user
         * @summary Contact Support
         * @param {ContactSupportRequest} body contact sales information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactSupport: function (body, options) {
            var localVarFetchArgs = exports.ConsoleApiFetchParamCreator(configuration).contactSupport(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get list of all activity for user
         * @summary Get Activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivity: function (options) {
            var localVarFetchArgs = exports.ConsoleApiFetchParamCreator(configuration).getActivity(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Record an activity item from console.
         * @summary Record Activity
         * @param {RecordActivityRequest} body the activity item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordActivity: function (body, options) {
            var localVarFetchArgs = exports.ConsoleApiFetchParamCreator(configuration).recordActivity(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ConsoleApi - factory interface
 * @export
 */
exports.ConsoleApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Send confirmation email to user, send email internally, and notify internally
         * @summary Contact Sales
         * @param {ContactSalesRequest} body contact sales information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactSales: function (body, options) {
            return exports.ConsoleApiFp(configuration).contactSales(body, options)(fetch, basePath);
        },
        /**
         * Open a support ticket on behalf of the user
         * @summary Contact Support
         * @param {ContactSupportRequest} body contact sales information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contactSupport: function (body, options) {
            return exports.ConsoleApiFp(configuration).contactSupport(body, options)(fetch, basePath);
        },
        /**
         * Get list of all activity for user
         * @summary Get Activities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivity: function (options) {
            return exports.ConsoleApiFp(configuration).getActivity(options)(fetch, basePath);
        },
        /**
         * Record an activity item from console.
         * @summary Record Activity
         * @param {RecordActivityRequest} body the activity item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordActivity: function (body, options) {
            return exports.ConsoleApiFp(configuration).recordActivity(body, options)(fetch, basePath);
        },
    };
};
/**
 * ConsoleApi - object-oriented interface
 * @export
 * @class ConsoleApi
 * @extends {BaseAPI}
 */
var ConsoleApi = /** @class */ (function (_super) {
    __extends(ConsoleApi, _super);
    function ConsoleApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Send confirmation email to user, send email internally, and notify internally
     * @summary Contact Sales
     * @param {ContactSalesRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    ConsoleApi.prototype.contactSales = function (body, options) {
        return exports.ConsoleApiFp(this.configuration).contactSales(body, options)(this.fetch, this.basePath);
    };
    /**
     * Open a support ticket on behalf of the user
     * @summary Contact Support
     * @param {ContactSupportRequest} body contact sales information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    ConsoleApi.prototype.contactSupport = function (body, options) {
        return exports.ConsoleApiFp(this.configuration).contactSupport(body, options)(this.fetch, this.basePath);
    };
    /**
     * Get list of all activity for user
     * @summary Get Activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    ConsoleApi.prototype.getActivity = function (options) {
        return exports.ConsoleApiFp(this.configuration).getActivity(options)(this.fetch, this.basePath);
    };
    /**
     * Record an activity item from console.
     * @summary Record Activity
     * @param {RecordActivityRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    ConsoleApi.prototype.recordActivity = function (body, options) {
        return exports.ConsoleApiFp(this.configuration).recordActivity(body, options)(this.fetch, this.basePath);
    };
    return ConsoleApi;
}(BaseAPI));
exports.ConsoleApi = ConsoleApi;
/**
 * CustomRolesBetaApi - fetch parameter creator
 * @export
 */
exports.CustomRolesBetaApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a role for your organization.
         * @summary Create a Role
         * @param {CreateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createRole.');
            }
            var localVarPath = "/v1/orgs/self/roles";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateRoleRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a role for your organization.
         * @summary Delete a Role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (roleName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'roleName' is not null or undefined
            if (roleName === null || roleName === undefined) {
                throw new RequiredError('roleName', 'Required parameter roleName was null or undefined when calling deleteRole.');
            }
            var localVarPath = "/v1/orgs/self/roles/{roleName}"
                .replace("{" + "roleName" + "}", encodeURIComponent(String(roleName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all roles for your organization.
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/roles";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a role for your organization.
         * @summary Update a Role
         * @param {string} roleName
         * @param {UpdateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (roleName, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'roleName' is not null or undefined
            if (roleName === null || roleName === undefined) {
                throw new RequiredError('roleName', 'Required parameter roleName was null or undefined when calling updateRole.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRole.');
            }
            var localVarPath = "/v1/orgs/self/roles/{roleName}"
                .replace("{" + "roleName" + "}", encodeURIComponent(String(roleName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateRoleRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CustomRolesBetaApi - functional programming interface
 * @export
 */
exports.CustomRolesBetaApiFp = function (configuration) {
    return {
        /**
         * Create a role for your organization.
         * @summary Create a Role
         * @param {CreateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (body, options) {
            var localVarFetchArgs = exports.CustomRolesBetaApiFetchParamCreator(configuration).createRole(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a role for your organization.
         * @summary Delete a Role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (roleName, options) {
            var localVarFetchArgs = exports.CustomRolesBetaApiFetchParamCreator(configuration).deleteRole(roleName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all roles for your organization.
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            var localVarFetchArgs = exports.CustomRolesBetaApiFetchParamCreator(configuration).listRoles(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a role for your organization.
         * @summary Update a Role
         * @param {string} roleName
         * @param {UpdateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (roleName, body, options) {
            var localVarFetchArgs = exports.CustomRolesBetaApiFetchParamCreator(configuration).updateRole(roleName, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CustomRolesBetaApi - factory interface
 * @export
 */
exports.CustomRolesBetaApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a role for your organization.
         * @summary Create a Role
         * @param {CreateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (body, options) {
            return exports.CustomRolesBetaApiFp(configuration).createRole(body, options)(fetch, basePath);
        },
        /**
         * Delete a role for your organization.
         * @summary Delete a Role
         * @param {string} roleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (roleName, options) {
            return exports.CustomRolesBetaApiFp(configuration).deleteRole(roleName, options)(fetch, basePath);
        },
        /**
         * List all roles for your organization.
         * @summary List Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            return exports.CustomRolesBetaApiFp(configuration).listRoles(options)(fetch, basePath);
        },
        /**
         * Update a role for your organization.
         * @summary Update a Role
         * @param {string} roleName
         * @param {UpdateRoleRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: function (roleName, body, options) {
            return exports.CustomRolesBetaApiFp(configuration).updateRole(roleName, body, options)(fetch, basePath);
        },
    };
};
/**
 * CustomRolesBetaApi - object-oriented interface
 * @export
 * @class CustomRolesBetaApi
 * @extends {BaseAPI}
 */
var CustomRolesBetaApi = /** @class */ (function (_super) {
    __extends(CustomRolesBetaApi, _super);
    function CustomRolesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a role for your organization.
     * @summary Create a Role
     * @param {CreateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesBetaApi
     */
    CustomRolesBetaApi.prototype.createRole = function (body, options) {
        return exports.CustomRolesBetaApiFp(this.configuration).createRole(body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a role for your organization.
     * @summary Delete a Role
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesBetaApi
     */
    CustomRolesBetaApi.prototype.deleteRole = function (roleName, options) {
        return exports.CustomRolesBetaApiFp(this.configuration).deleteRole(roleName, options)(this.fetch, this.basePath);
    };
    /**
     * List all roles for your organization.
     * @summary List Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesBetaApi
     */
    CustomRolesBetaApi.prototype.listRoles = function (options) {
        return exports.CustomRolesBetaApiFp(this.configuration).listRoles(options)(this.fetch, this.basePath);
    };
    /**
     * Update a role for your organization.
     * @summary Update a Role
     * @param {string} roleName
     * @param {UpdateRoleRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomRolesBetaApi
     */
    CustomRolesBetaApi.prototype.updateRole = function (roleName, body, options) {
        return exports.CustomRolesBetaApiFp(this.configuration).updateRole(roleName, body, options)(this.fetch, this.basePath);
    };
    return CustomRolesBetaApi;
}(BaseAPI));
exports.CustomRolesBetaApi = CustomRolesBetaApi;
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
exports.DefaultApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveKafkaEvent: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/receivers/kafka";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveSegmentEvent: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/receivers/segment";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
exports.DefaultApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveKafkaEvent: function (options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).receiveKafkaEvent(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveSegmentEvent: function (options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).receiveSegmentEvent(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
exports.DefaultApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveKafkaEvent: function (options) {
            return exports.DefaultApiFp(configuration).receiveKafkaEvent(options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receiveSegmentEvent: function (options) {
            return exports.DefaultApiFp(configuration).receiveSegmentEvent(options)(fetch, basePath);
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.receiveKafkaEvent = function (options) {
        return exports.DefaultApiFp(this.configuration).receiveKafkaEvent(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.receiveSegmentEvent = function (options) {
        return exports.DefaultApiFp(this.configuration).receiveSegmentEvent(options)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
/**
 * DocumentsApi - fetch parameter creator
 * @export
 */
exports.DocumentsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Add documents to a collection.
         * @summary Add Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {AddDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocuments: function (workspace, collection, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling addDocuments.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling addDocuments.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling addDocuments.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/docs"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AddDocumentsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete documents from a collection.
         * @summary Delete Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {DeleteDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocuments: function (workspace, collection, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteDocuments.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling deleteDocuments.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling deleteDocuments.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/docs"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DeleteDocumentsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update existing documents in a collection.
         * @summary Patch Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {PatchDocumentsRequest} body JSON Patch objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDocuments: function (workspace, collection, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling patchDocuments.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection', 'Required parameter collection was null or undefined when calling patchDocuments.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling patchDocuments.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/docs"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "collection" + "}", encodeURIComponent(String(collection)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PatchDocumentsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DocumentsApi - functional programming interface
 * @export
 */
exports.DocumentsApiFp = function (configuration) {
    return {
        /**
         * Add documents to a collection.
         * @summary Add Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {AddDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocuments: function (workspace, collection, body, options) {
            var localVarFetchArgs = exports.DocumentsApiFetchParamCreator(configuration).addDocuments(workspace, collection, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete documents from a collection.
         * @summary Delete Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {DeleteDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocuments: function (workspace, collection, body, options) {
            var localVarFetchArgs = exports.DocumentsApiFetchParamCreator(configuration).deleteDocuments(workspace, collection, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update existing documents in a collection.
         * @summary Patch Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {PatchDocumentsRequest} body JSON Patch objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDocuments: function (workspace, collection, body, options) {
            var localVarFetchArgs = exports.DocumentsApiFetchParamCreator(configuration).patchDocuments(workspace, collection, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DocumentsApi - factory interface
 * @export
 */
exports.DocumentsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Add documents to a collection.
         * @summary Add Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {AddDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDocuments: function (workspace, collection, body, options) {
            return exports.DocumentsApiFp(configuration).addDocuments(workspace, collection, body, options)(fetch, basePath);
        },
        /**
         * Delete documents from a collection.
         * @summary Delete Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {DeleteDocumentsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocuments: function (workspace, collection, body, options) {
            return exports.DocumentsApiFp(configuration).deleteDocuments(workspace, collection, body, options)(fetch, basePath);
        },
        /**
         * Update existing documents in a collection.
         * @summary Patch Documents
         * @param {string} workspace Name of the workspace.
         * @param {string} collection Name of the collection.
         * @param {PatchDocumentsRequest} body JSON Patch objects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDocuments: function (workspace, collection, body, options) {
            return exports.DocumentsApiFp(configuration).patchDocuments(workspace, collection, body, options)(fetch, basePath);
        },
    };
};
/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
var DocumentsApi = /** @class */ (function (_super) {
    __extends(DocumentsApi, _super);
    function DocumentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add documents to a collection.
     * @summary Add Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {AddDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    DocumentsApi.prototype.addDocuments = function (workspace, collection, body, options) {
        return exports.DocumentsApiFp(this.configuration).addDocuments(workspace, collection, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete documents from a collection.
     * @summary Delete Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {DeleteDocumentsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    DocumentsApi.prototype.deleteDocuments = function (workspace, collection, body, options) {
        return exports.DocumentsApiFp(this.configuration).deleteDocuments(workspace, collection, body, options)(this.fetch, this.basePath);
    };
    /**
     * Update existing documents in a collection.
     * @summary Patch Documents
     * @param {string} workspace Name of the workspace.
     * @param {string} collection Name of the collection.
     * @param {PatchDocumentsRequest} body JSON Patch objects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    DocumentsApi.prototype.patchDocuments = function (workspace, collection, body, options) {
        return exports.DocumentsApiFp(this.configuration).patchDocuments(workspace, collection, body, options)(this.fetch, this.basePath);
    };
    return DocumentsApi;
}(BaseAPI));
exports.DocumentsApi = DocumentsApi;
/**
 * IPAllowlistApi - fetch parameter creator
 * @export
 */
exports.IPAllowlistApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a new entry to allow an IP address
         * @summary Create IP Allowlist Network Policy
         * @param {CreateIpAllowlistRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAllowlistIp: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createAllowlistIp.');
            }
            var localVarPath = "/v1/orgs/self/ip/allowlist";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateIpAllowlistRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an entry for IP allowlist network policy.
         * @summary Delete IP Allowlist Network Policy
         * @param {string} name name of the IP allowlist network policy
         * @param {DeleteIpAllowlistRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllowlistIp: function (name, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling deleteAllowlistIp.');
            }
            var localVarPath = "/v1/orgs/self/ip/allowlist/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DeleteIpAllowlistRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a IP Allowlist network policy
         * @summary Get IP Allowlist Network Policy
         * @param {string} name name of the IP Allowlist network policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowlistIp: function (name, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling getAllowlistIp.');
            }
            var localVarPath = "/v1/orgs/self/ip/allowlist/{name}"
                .replace("{" + "name" + "}", encodeURIComponent(String(name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List IP Allowlist Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllowlistIps: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/ip/allowlist";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * IPAllowlistApi - functional programming interface
 * @export
 */
exports.IPAllowlistApiFp = function (configuration) {
    return {
        /**
         * Create a new entry to allow an IP address
         * @summary Create IP Allowlist Network Policy
         * @param {CreateIpAllowlistRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAllowlistIp: function (body, options) {
            var localVarFetchArgs = exports.IPAllowlistApiFetchParamCreator(configuration).createAllowlistIp(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an entry for IP allowlist network policy.
         * @summary Delete IP Allowlist Network Policy
         * @param {string} name name of the IP allowlist network policy
         * @param {DeleteIpAllowlistRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllowlistIp: function (name, body, options) {
            var localVarFetchArgs = exports.IPAllowlistApiFetchParamCreator(configuration).deleteAllowlistIp(name, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get details about a IP Allowlist network policy
         * @summary Get IP Allowlist Network Policy
         * @param {string} name name of the IP Allowlist network policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowlistIp: function (name, options) {
            var localVarFetchArgs = exports.IPAllowlistApiFetchParamCreator(configuration).getAllowlistIp(name, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List IP Allowlist Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllowlistIps: function (options) {
            var localVarFetchArgs = exports.IPAllowlistApiFetchParamCreator(configuration).listAllowlistIps(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * IPAllowlistApi - factory interface
 * @export
 */
exports.IPAllowlistApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a new entry to allow an IP address
         * @summary Create IP Allowlist Network Policy
         * @param {CreateIpAllowlistRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAllowlistIp: function (body, options) {
            return exports.IPAllowlistApiFp(configuration).createAllowlistIp(body, options)(fetch, basePath);
        },
        /**
         * Delete an entry for IP allowlist network policy.
         * @summary Delete IP Allowlist Network Policy
         * @param {string} name name of the IP allowlist network policy
         * @param {DeleteIpAllowlistRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllowlistIp: function (name, body, options) {
            return exports.IPAllowlistApiFp(configuration).deleteAllowlistIp(name, body, options)(fetch, basePath);
        },
        /**
         * Get details about a IP Allowlist network policy
         * @summary Get IP Allowlist Network Policy
         * @param {string} name name of the IP Allowlist network policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowlistIp: function (name, options) {
            return exports.IPAllowlistApiFp(configuration).getAllowlistIp(name, options)(fetch, basePath);
        },
        /**
         *
         * @summary List IP Allowlist Entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllowlistIps: function (options) {
            return exports.IPAllowlistApiFp(configuration).listAllowlistIps(options)(fetch, basePath);
        },
    };
};
/**
 * IPAllowlistApi - object-oriented interface
 * @export
 * @class IPAllowlistApi
 * @extends {BaseAPI}
 */
var IPAllowlistApi = /** @class */ (function (_super) {
    __extends(IPAllowlistApi, _super);
    function IPAllowlistApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new entry to allow an IP address
     * @summary Create IP Allowlist Network Policy
     * @param {CreateIpAllowlistRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAllowlistApi
     */
    IPAllowlistApi.prototype.createAllowlistIp = function (body, options) {
        return exports.IPAllowlistApiFp(this.configuration).createAllowlistIp(body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an entry for IP allowlist network policy.
     * @summary Delete IP Allowlist Network Policy
     * @param {string} name name of the IP allowlist network policy
     * @param {DeleteIpAllowlistRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAllowlistApi
     */
    IPAllowlistApi.prototype.deleteAllowlistIp = function (name, body, options) {
        return exports.IPAllowlistApiFp(this.configuration).deleteAllowlistIp(name, body, options)(this.fetch, this.basePath);
    };
    /**
     * Get details about a IP Allowlist network policy
     * @summary Get IP Allowlist Network Policy
     * @param {string} name name of the IP Allowlist network policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAllowlistApi
     */
    IPAllowlistApi.prototype.getAllowlistIp = function (name, options) {
        return exports.IPAllowlistApiFp(this.configuration).getAllowlistIp(name, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary List IP Allowlist Entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IPAllowlistApi
     */
    IPAllowlistApi.prototype.listAllowlistIps = function (options) {
        return exports.IPAllowlistApiFp(this.configuration).listAllowlistIps(options)(this.fetch, this.basePath);
    };
    return IPAllowlistApi;
}(BaseAPI));
exports.IPAllowlistApi = IPAllowlistApi;
/**
 * IntegrationsApi - fetch parameter creator
 * @export
 */
exports.IntegrationsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {CreateIntegrationRequest} body integration credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegration: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createIntegration.');
            }
            var localVarPath = "/v1/orgs/self/integrations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateIntegrationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an integration.
         * @summary Delete Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegration: function (integration, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'integration' is not null or undefined
            if (integration === null || integration === undefined) {
                throw new RequiredError('integration', 'Required parameter integration was null or undefined when calling deleteIntegration.');
            }
            var localVarPath = "/v1/orgs/self/integrations/{integration}"
                .replace("{" + "integration" + "}", encodeURIComponent(String(integration)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about a single integration.
         * @summary Retrieve Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegration: function (integration, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'integration' is not null or undefined
            if (integration === null || integration === undefined) {
                throw new RequiredError('integration', 'Required parameter integration was null or undefined when calling getIntegration.');
            }
            var localVarPath = "/v1/orgs/self/integrations/{integration}"
                .replace("{" + "integration" + "}", encodeURIComponent(String(integration)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all integrations in an organization.
         * @summary List Integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIntegrations: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/integrations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer ownership of an integration to a new user.
         * @summary Transfer Ownership of an Integration
         * @param {string} integration name of the integration
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (integration, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'integration' is not null or undefined
            if (integration === null || integration === undefined) {
                throw new RequiredError('integration', 'Required parameter integration was null or undefined when calling transferOwnership.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling transferOwnership.');
            }
            var localVarPath = "/v1/orgs/self/integrations/{integration}/owner"
                .replace("{" + "integration" + "}", encodeURIComponent(String(integration)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TransferOwnershipRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify that an integration is healthy.
         * @summary Verify Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyIntegration: function (integration, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'integration' is not null or undefined
            if (integration === null || integration === undefined) {
                throw new RequiredError('integration', 'Required parameter integration was null or undefined when calling verifyIntegration.');
            }
            var localVarPath = "/v1/orgs/self/integrations/{integration}/verifications"
                .replace("{" + "integration" + "}", encodeURIComponent(String(integration)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * IntegrationsApi - functional programming interface
 * @export
 */
exports.IntegrationsApiFp = function (configuration) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {CreateIntegrationRequest} body integration credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegration: function (body, options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).createIntegration(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove an integration.
         * @summary Delete Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegration: function (integration, options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).deleteIntegration(integration, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve information about a single integration.
         * @summary Retrieve Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegration: function (integration, options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).getIntegration(integration, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all integrations in an organization.
         * @summary List Integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIntegrations: function (options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).listIntegrations(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Transfer ownership of an integration to a new user.
         * @summary Transfer Ownership of an Integration
         * @param {string} integration name of the integration
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (integration, body, options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).transferOwnership(integration, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Verify that an integration is healthy.
         * @summary Verify Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyIntegration: function (integration, options) {
            var localVarFetchArgs = exports.IntegrationsApiFetchParamCreator(configuration).verifyIntegration(integration, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * IntegrationsApi - factory interface
 * @export
 */
exports.IntegrationsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a new integration.
         * @summary Create Integration
         * @param {CreateIntegrationRequest} body integration credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegration: function (body, options) {
            return exports.IntegrationsApiFp(configuration).createIntegration(body, options)(fetch, basePath);
        },
        /**
         * Remove an integration.
         * @summary Delete Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegration: function (integration, options) {
            return exports.IntegrationsApiFp(configuration).deleteIntegration(integration, options)(fetch, basePath);
        },
        /**
         * Retrieve information about a single integration.
         * @summary Retrieve Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegration: function (integration, options) {
            return exports.IntegrationsApiFp(configuration).getIntegration(integration, options)(fetch, basePath);
        },
        /**
         * List all integrations in an organization.
         * @summary List Integrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIntegrations: function (options) {
            return exports.IntegrationsApiFp(configuration).listIntegrations(options)(fetch, basePath);
        },
        /**
         * Transfer ownership of an integration to a new user.
         * @summary Transfer Ownership of an Integration
         * @param {string} integration name of the integration
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (integration, body, options) {
            return exports.IntegrationsApiFp(configuration).transferOwnership(integration, body, options)(fetch, basePath);
        },
        /**
         * Verify that an integration is healthy.
         * @summary Verify Integration
         * @param {string} integration name of the integration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyIntegration: function (integration, options) {
            return exports.IntegrationsApiFp(configuration).verifyIntegration(integration, options)(fetch, basePath);
        },
    };
};
/**
 * IntegrationsApi - object-oriented interface
 * @export
 * @class IntegrationsApi
 * @extends {BaseAPI}
 */
var IntegrationsApi = /** @class */ (function (_super) {
    __extends(IntegrationsApi, _super);
    function IntegrationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new integration.
     * @summary Create Integration
     * @param {CreateIntegrationRequest} body integration credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.createIntegration = function (body, options) {
        return exports.IntegrationsApiFp(this.configuration).createIntegration(body, options)(this.fetch, this.basePath);
    };
    /**
     * Remove an integration.
     * @summary Delete Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.deleteIntegration = function (integration, options) {
        return exports.IntegrationsApiFp(this.configuration).deleteIntegration(integration, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve information about a single integration.
     * @summary Retrieve Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.getIntegration = function (integration, options) {
        return exports.IntegrationsApiFp(this.configuration).getIntegration(integration, options)(this.fetch, this.basePath);
    };
    /**
     * List all integrations in an organization.
     * @summary List Integrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.listIntegrations = function (options) {
        return exports.IntegrationsApiFp(this.configuration).listIntegrations(options)(this.fetch, this.basePath);
    };
    /**
     * Transfer ownership of an integration to a new user.
     * @summary Transfer Ownership of an Integration
     * @param {string} integration name of the integration
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.transferOwnership = function (integration, body, options) {
        return exports.IntegrationsApiFp(this.configuration).transferOwnership(integration, body, options)(this.fetch, this.basePath);
    };
    /**
     * Verify that an integration is healthy.
     * @summary Verify Integration
     * @param {string} integration name of the integration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    IntegrationsApi.prototype.verifyIntegration = function (integration, options) {
        return exports.IntegrationsApiFp(this.configuration).verifyIntegration(integration, options)(this.fetch, this.basePath);
    };
    return IntegrationsApi;
}(BaseAPI));
exports.IntegrationsApi = IntegrationsApi;
/**
 * LinearApi - fetch parameter creator
 * @export
 */
exports.LinearApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Creates an issue.
         * @summary Create issue
         * @param {CreateIssueRequest} body Creates an issue in linear
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssue: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createIssue.');
            }
            var localVarPath = "/v1/linear/issue";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateIssueRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * LinearApi - functional programming interface
 * @export
 */
exports.LinearApiFp = function (configuration) {
    return {
        /**
         * Creates an issue.
         * @summary Create issue
         * @param {CreateIssueRequest} body Creates an issue in linear
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssue: function (body, options) {
            var localVarFetchArgs = exports.LinearApiFetchParamCreator(configuration).createIssue(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * LinearApi - factory interface
 * @export
 */
exports.LinearApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Creates an issue.
         * @summary Create issue
         * @param {CreateIssueRequest} body Creates an issue in linear
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIssue: function (body, options) {
            return exports.LinearApiFp(configuration).createIssue(body, options)(fetch, basePath);
        },
    };
};
/**
 * LinearApi - object-oriented interface
 * @export
 * @class LinearApi
 * @extends {BaseAPI}
 */
var LinearApi = /** @class */ (function (_super) {
    __extends(LinearApi, _super);
    function LinearApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates an issue.
     * @summary Create issue
     * @param {CreateIssueRequest} body Creates an issue in linear
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinearApi
     */
    LinearApi.prototype.createIssue = function (body, options) {
        return exports.LinearApiFp(this.configuration).createIssue(body, options)(this.fetch, this.basePath);
    };
    return LinearApi;
}(BaseAPI));
exports.LinearApi = LinearApi;
/**
 * OrganizationsApi - fetch parameter creator
 * @export
 */
exports.OrganizationsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Add an organization to a new cluster.
         * @summary Add Organization to Cluster
         * @param {string} clusterName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrgToCluster: function (clusterName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clusterName' is not null or undefined
            if (clusterName === null || clusterName === undefined) {
                throw new RequiredError('clusterName', 'Required parameter clusterName was null or undefined when calling addOrgToCluster.');
            }
            var localVarPath = "/v1/orgs/self/clusters/{clusterName}"
                .replace("{" + "clusterName" + "}", encodeURIComponent(String(clusterName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirm an AWS Marketplace subscription for an organization.
         * @summary Confirm AWS Marketplace Subscription
         * @param {MarketplaceSubscriptionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmMarketplaceSubscription: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling confirmMarketplaceSubscription.');
            }
            var localVarPath = "/v1/orgs/self/billing/marketplace";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("MarketplaceSubscriptionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the rate card for an organization.
         * @summary Get Rate Card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRateCard: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/billing/cards";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all billing line items for a specified month and year.
         * @summary Retrieve billing line items.
         * @param {number} [month]
         * @param {number} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingLineItems: function (month, year, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/billing/lineitems";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }
            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the redirect to customer billing portal.
         * @summary Retrieve customer billing portal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingPortal: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/billing";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get metrics for all VIs with metrics enabled.
         * @summary Get metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/metrics";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information about current organization.
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Compute Time-Series data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationCompute: function (month, year, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/usage/compute";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }
            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization ingest usage data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationIngest: function (month, year, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/usage/ingest";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }
            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve settings for current organization.
         * @summary Get Organization Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationSettings: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/settings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Storage Time-Series data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationStorage: function (month, year, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/usage/storage";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }
            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization trial credit usage data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationTrialCredit: function (month, year, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/usage/trial";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }
            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsage: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/usage";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the payment information for your organization.
         * @summary Retrieve payment information about payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/payment/method";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get stored payment information for your organization.
         * @summary Retrieve payment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentSource: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/payment/invoices";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get stored sso information for your organization.
         * @summary Retrieve sso settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsoSettings: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/sso";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch time series metrics, for a specified VI, time interval, and granularity.
         * @summary Get time series metrics.
         * @param {string} [virtual_instance_id]
         * @param {'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU'} [metric_type]
         * @param {number} [start]
         * @param {number} [end]
         * @param {number} [granularity]
         * @param {number} [limit]
         * @param {string} [collection_path]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeSeriesMetrics: function (virtual_instance_id, metric_type, start, end, granularity, limit, collection_path, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/metrics/timeSeries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (virtual_instance_id !== undefined) {
                localVarQueryParameter['virtual_instance_id'] = virtual_instance_id;
            }
            if (metric_type !== undefined) {
                localVarQueryParameter['metric_type'] = metric_type;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }
            if (granularity !== undefined) {
                localVarQueryParameter['granularity'] = granularity;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (collection_path !== undefined) {
                localVarQueryParameter['collection_path'] = collection_path;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all credits for an organization.
         * @summary Retrieve credits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCredits: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/billing/credits";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update MFA settings for your organization.
         * @summary Update MFA settings
         * @param {UpdateOrgMfaSettingsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMfaSettings: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateMfaSettings.');
            }
            var localVarPath = "/v1/orgs/self/mfa";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateOrgMfaSettingsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update payment settings with new Stripe Source id.
         * @summary Update Payment Information
         * @param {UpdateOrgPaymentMethodRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentSource: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updatePaymentSource.');
            }
            var localVarPath = "/v1/orgs/self/payment/method";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateOrgPaymentMethodRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update SSO settings with certificates and redirect links.
         * @summary Update SSO settings
         * @param {UpdateSsoRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSsoSettings: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateSsoSettings.');
            }
            var localVarPath = "/v1/orgs/self/sso";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateSsoRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
exports.OrganizationsApiFp = function (configuration) {
    return {
        /**
         * Add an organization to a new cluster.
         * @summary Add Organization to Cluster
         * @param {string} clusterName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrgToCluster: function (clusterName, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).addOrgToCluster(clusterName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Confirm an AWS Marketplace subscription for an organization.
         * @summary Confirm AWS Marketplace Subscription
         * @param {MarketplaceSubscriptionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmMarketplaceSubscription: function (body, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).confirmMarketplaceSubscription(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the rate card for an organization.
         * @summary Get Rate Card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRateCard: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getActiveRateCard(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all billing line items for a specified month and year.
         * @summary Retrieve billing line items.
         * @param {number} [month]
         * @param {number} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingLineItems: function (month, year, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getBillingLineItems(month, year, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the redirect to customer billing portal.
         * @summary Retrieve customer billing portal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingPortal: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getBillingPortal(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get metrics for all VIs with metrics enabled.
         * @summary Get metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getMetrics(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve information about current organization.
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getOrganization(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Compute Time-Series data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationCompute: function (month, year, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getOrganizationCompute(month, year, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization ingest usage data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationIngest: function (month, year, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getOrganizationIngest(month, year, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve settings for current organization.
         * @summary Get Organization Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationSettings: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getOrganizationSettings(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Storage Time-Series data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationStorage: function (month, year, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getOrganizationStorage(month, year, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization trial credit usage data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationTrialCredit: function (month, year, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getOrganizationTrialCredit(month, year, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsage: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getOrganizationUsage(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the payment information for your organization.
         * @summary Retrieve payment information about payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getPaymentMethod(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get stored payment information for your organization.
         * @summary Retrieve payment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentSource: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getPaymentSource(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get stored sso information for your organization.
         * @summary Retrieve sso settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsoSettings: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getSsoSettings(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetch time series metrics, for a specified VI, time interval, and granularity.
         * @summary Get time series metrics.
         * @param {string} [virtual_instance_id]
         * @param {'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU'} [metric_type]
         * @param {number} [start]
         * @param {number} [end]
         * @param {number} [granularity]
         * @param {number} [limit]
         * @param {string} [collection_path]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeSeriesMetrics: function (virtual_instance_id, metric_type, start, end, granularity, limit, collection_path, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).getTimeSeriesMetrics(virtual_instance_id, metric_type, start, end, granularity, limit, collection_path, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all credits for an organization.
         * @summary Retrieve credits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCredits: function (options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).listCredits(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update MFA settings for your organization.
         * @summary Update MFA settings
         * @param {UpdateOrgMfaSettingsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMfaSettings: function (body, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).updateMfaSettings(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update payment settings with new Stripe Source id.
         * @summary Update Payment Information
         * @param {UpdateOrgPaymentMethodRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentSource: function (body, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).updatePaymentSource(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update SSO settings with certificates and redirect links.
         * @summary Update SSO settings
         * @param {UpdateSsoRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSsoSettings: function (body, options) {
            var localVarFetchArgs = exports.OrganizationsApiFetchParamCreator(configuration).updateSsoSettings(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * OrganizationsApi - factory interface
 * @export
 */
exports.OrganizationsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Add an organization to a new cluster.
         * @summary Add Organization to Cluster
         * @param {string} clusterName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrgToCluster: function (clusterName, options) {
            return exports.OrganizationsApiFp(configuration).addOrgToCluster(clusterName, options)(fetch, basePath);
        },
        /**
         * Confirm an AWS Marketplace subscription for an organization.
         * @summary Confirm AWS Marketplace Subscription
         * @param {MarketplaceSubscriptionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmMarketplaceSubscription: function (body, options) {
            return exports.OrganizationsApiFp(configuration).confirmMarketplaceSubscription(body, options)(fetch, basePath);
        },
        /**
         * Get the rate card for an organization.
         * @summary Get Rate Card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveRateCard: function (options) {
            return exports.OrganizationsApiFp(configuration).getActiveRateCard(options)(fetch, basePath);
        },
        /**
         * List all billing line items for a specified month and year.
         * @summary Retrieve billing line items.
         * @param {number} [month]
         * @param {number} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingLineItems: function (month, year, options) {
            return exports.OrganizationsApiFp(configuration).getBillingLineItems(month, year, options)(fetch, basePath);
        },
        /**
         * Get the redirect to customer billing portal.
         * @summary Retrieve customer billing portal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingPortal: function (options) {
            return exports.OrganizationsApiFp(configuration).getBillingPortal(options)(fetch, basePath);
        },
        /**
         * Get metrics for all VIs with metrics enabled.
         * @summary Get metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics: function (options) {
            return exports.OrganizationsApiFp(configuration).getMetrics(options)(fetch, basePath);
        },
        /**
         * Retrieve information about current organization.
         * @summary Get Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: function (options) {
            return exports.OrganizationsApiFp(configuration).getOrganization(options)(fetch, basePath);
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Compute Time-Series data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationCompute: function (month, year, options) {
            return exports.OrganizationsApiFp(configuration).getOrganizationCompute(month, year, options)(fetch, basePath);
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization ingest usage data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationIngest: function (month, year, options) {
            return exports.OrganizationsApiFp(configuration).getOrganizationIngest(month, year, options)(fetch, basePath);
        },
        /**
         * Retrieve settings for current organization.
         * @summary Get Organization Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationSettings: function (options) {
            return exports.OrganizationsApiFp(configuration).getOrganizationSettings(options)(fetch, basePath);
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Storage Time-Series data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationStorage: function (month, year, options) {
            return exports.OrganizationsApiFp(configuration).getOrganizationStorage(month, year, options)(fetch, basePath);
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization trial credit usage data
         * @param {string} [month]
         * @param {string} [year]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationTrialCredit: function (month, year, options) {
            return exports.OrganizationsApiFp(configuration).getOrganizationTrialCredit(month, year, options)(fetch, basePath);
        },
        /**
         * Retrieve usage levels for current organization.
         * @summary Get Organization Usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsage: function (options) {
            return exports.OrganizationsApiFp(configuration).getOrganizationUsage(options)(fetch, basePath);
        },
        /**
         * Get the payment information for your organization.
         * @summary Retrieve payment information about payment method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: function (options) {
            return exports.OrganizationsApiFp(configuration).getPaymentMethod(options)(fetch, basePath);
        },
        /**
         * Get stored payment information for your organization.
         * @summary Retrieve payment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentSource: function (options) {
            return exports.OrganizationsApiFp(configuration).getPaymentSource(options)(fetch, basePath);
        },
        /**
         * Get stored sso information for your organization.
         * @summary Retrieve sso settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsoSettings: function (options) {
            return exports.OrganizationsApiFp(configuration).getSsoSettings(options)(fetch, basePath);
        },
        /**
         * Fetch time series metrics, for a specified VI, time interval, and granularity.
         * @summary Get time series metrics.
         * @param {string} [virtual_instance_id]
         * @param {'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU'} [metric_type]
         * @param {number} [start]
         * @param {number} [end]
         * @param {number} [granularity]
         * @param {number} [limit]
         * @param {string} [collection_path]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeSeriesMetrics: function (virtual_instance_id, metric_type, start, end, granularity, limit, collection_path, options) {
            return exports.OrganizationsApiFp(configuration).getTimeSeriesMetrics(virtual_instance_id, metric_type, start, end, granularity, limit, collection_path, options)(fetch, basePath);
        },
        /**
         * List all credits for an organization.
         * @summary Retrieve credits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCredits: function (options) {
            return exports.OrganizationsApiFp(configuration).listCredits(options)(fetch, basePath);
        },
        /**
         * Update MFA settings for your organization.
         * @summary Update MFA settings
         * @param {UpdateOrgMfaSettingsRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMfaSettings: function (body, options) {
            return exports.OrganizationsApiFp(configuration).updateMfaSettings(body, options)(fetch, basePath);
        },
        /**
         * Update payment settings with new Stripe Source id.
         * @summary Update Payment Information
         * @param {UpdateOrgPaymentMethodRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentSource: function (body, options) {
            return exports.OrganizationsApiFp(configuration).updatePaymentSource(body, options)(fetch, basePath);
        },
        /**
         * Update SSO settings with certificates and redirect links.
         * @summary Update SSO settings
         * @param {UpdateSsoRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSsoSettings: function (body, options) {
            return exports.OrganizationsApiFp(configuration).updateSsoSettings(body, options)(fetch, basePath);
        },
    };
};
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
var OrganizationsApi = /** @class */ (function (_super) {
    __extends(OrganizationsApi, _super);
    function OrganizationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add an organization to a new cluster.
     * @summary Add Organization to Cluster
     * @param {string} clusterName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.addOrgToCluster = function (clusterName, options) {
        return exports.OrganizationsApiFp(this.configuration).addOrgToCluster(clusterName, options)(this.fetch, this.basePath);
    };
    /**
     * Confirm an AWS Marketplace subscription for an organization.
     * @summary Confirm AWS Marketplace Subscription
     * @param {MarketplaceSubscriptionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.confirmMarketplaceSubscription = function (body, options) {
        return exports.OrganizationsApiFp(this.configuration).confirmMarketplaceSubscription(body, options)(this.fetch, this.basePath);
    };
    /**
     * Get the rate card for an organization.
     * @summary Get Rate Card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getActiveRateCard = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getActiveRateCard(options)(this.fetch, this.basePath);
    };
    /**
     * List all billing line items for a specified month and year.
     * @summary Retrieve billing line items.
     * @param {number} [month]
     * @param {number} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getBillingLineItems = function (month, year, options) {
        return exports.OrganizationsApiFp(this.configuration).getBillingLineItems(month, year, options)(this.fetch, this.basePath);
    };
    /**
     * Get the redirect to customer billing portal.
     * @summary Retrieve customer billing portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getBillingPortal = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getBillingPortal(options)(this.fetch, this.basePath);
    };
    /**
     * Get metrics for all VIs with metrics enabled.
     * @summary Get metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getMetrics = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getMetrics(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve information about current organization.
     * @summary Get Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getOrganization = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getOrganization(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Compute Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getOrganizationCompute = function (month, year, options) {
        return exports.OrganizationsApiFp(this.configuration).getOrganizationCompute(month, year, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization ingest usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getOrganizationIngest = function (month, year, options) {
        return exports.OrganizationsApiFp(this.configuration).getOrganizationIngest(month, year, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve settings for current organization.
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getOrganizationSettings = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getOrganizationSettings(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Storage Time-Series data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getOrganizationStorage = function (month, year, options) {
        return exports.OrganizationsApiFp(this.configuration).getOrganizationStorage(month, year, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization trial credit usage data
     * @param {string} [month]
     * @param {string} [year]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getOrganizationTrialCredit = function (month, year, options) {
        return exports.OrganizationsApiFp(this.configuration).getOrganizationTrialCredit(month, year, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve usage levels for current organization.
     * @summary Get Organization Usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getOrganizationUsage = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getOrganizationUsage(options)(this.fetch, this.basePath);
    };
    /**
     * Get the payment information for your organization.
     * @summary Retrieve payment information about payment method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getPaymentMethod = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getPaymentMethod(options)(this.fetch, this.basePath);
    };
    /**
     * Get stored payment information for your organization.
     * @summary Retrieve payment information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getPaymentSource = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getPaymentSource(options)(this.fetch, this.basePath);
    };
    /**
     * Get stored sso information for your organization.
     * @summary Retrieve sso settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getSsoSettings = function (options) {
        return exports.OrganizationsApiFp(this.configuration).getSsoSettings(options)(this.fetch, this.basePath);
    };
    /**
     * Fetch time series metrics, for a specified VI, time interval, and granularity.
     * @summary Get time series metrics.
     * @param {string} [virtual_instance_id]
     * @param {'COLLECTION' | 'QUERY_LAMBDA' | 'VIRTUAL_INSTANCE' | 'VIRTUAL_INSTANCE_QUERY' | 'VIRTUAL_INSTANCE_STORAGE' | 'SLOW_QUERY_COUNT' | 'SLOW_QUERIES' | 'PERCENTILE_QUERY_LATENCY' | 'QUERY_COUNT' | 'COLLECTION_BULK_INGEST_CPU'} [metric_type]
     * @param {number} [start]
     * @param {number} [end]
     * @param {number} [granularity]
     * @param {number} [limit]
     * @param {string} [collection_path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.getTimeSeriesMetrics = function (virtual_instance_id, metric_type, start, end, granularity, limit, collection_path, options) {
        return exports.OrganizationsApiFp(this.configuration).getTimeSeriesMetrics(virtual_instance_id, metric_type, start, end, granularity, limit, collection_path, options)(this.fetch, this.basePath);
    };
    /**
     * List all credits for an organization.
     * @summary Retrieve credits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.listCredits = function (options) {
        return exports.OrganizationsApiFp(this.configuration).listCredits(options)(this.fetch, this.basePath);
    };
    /**
     * Update MFA settings for your organization.
     * @summary Update MFA settings
     * @param {UpdateOrgMfaSettingsRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.updateMfaSettings = function (body, options) {
        return exports.OrganizationsApiFp(this.configuration).updateMfaSettings(body, options)(this.fetch, this.basePath);
    };
    /**
     * Update payment settings with new Stripe Source id.
     * @summary Update Payment Information
     * @param {UpdateOrgPaymentMethodRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.updatePaymentSource = function (body, options) {
        return exports.OrganizationsApiFp(this.configuration).updatePaymentSource(body, options)(this.fetch, this.basePath);
    };
    /**
     * Update SSO settings with certificates and redirect links.
     * @summary Update SSO settings
     * @param {UpdateSsoRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    OrganizationsApi.prototype.updateSsoSettings = function (body, options) {
        return exports.OrganizationsApiFp(this.configuration).updateSsoSettings(body, options)(this.fetch, this.basePath);
    };
    return OrganizationsApi;
}(BaseAPI));
exports.OrganizationsApi = OrganizationsApi;
/**
 * ProvisionApi - fetch parameter creator
 * @export
 */
exports.ProvisionApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Provision an organization
         * @param {CreateOrganizationRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisionOrganization: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling provisionOrganization.');
            }
            var localVarPath = "/v1/provision/orgs";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateOrganizationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Provision a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisionUser: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/provision/orgs/self/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Resend verification email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/provision/orgs/self/verification/email";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProvisionApi - functional programming interface
 * @export
 */
exports.ProvisionApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Provision an organization
         * @param {CreateOrganizationRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisionOrganization: function (body, options) {
            var localVarFetchArgs = exports.ProvisionApiFetchParamCreator(configuration).provisionOrganization(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Provision a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisionUser: function (options) {
            var localVarFetchArgs = exports.ProvisionApiFetchParamCreator(configuration).provisionUser(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Resend verification email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: function (options) {
            var localVarFetchArgs = exports.ProvisionApiFetchParamCreator(configuration).verifyEmail(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ProvisionApi - factory interface
 * @export
 */
exports.ProvisionApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Provision an organization
         * @param {CreateOrganizationRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisionOrganization: function (body, options) {
            return exports.ProvisionApiFp(configuration).provisionOrganization(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Provision a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        provisionUser: function (options) {
            return exports.ProvisionApiFp(configuration).provisionUser(options)(fetch, basePath);
        },
        /**
         *
         * @summary Resend verification email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: function (options) {
            return exports.ProvisionApiFp(configuration).verifyEmail(options)(fetch, basePath);
        },
    };
};
/**
 * ProvisionApi - object-oriented interface
 * @export
 * @class ProvisionApi
 * @extends {BaseAPI}
 */
var ProvisionApi = /** @class */ (function (_super) {
    __extends(ProvisionApi, _super);
    function ProvisionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Provision an organization
     * @param {CreateOrganizationRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    ProvisionApi.prototype.provisionOrganization = function (body, options) {
        return exports.ProvisionApiFp(this.configuration).provisionOrganization(body, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Provision a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    ProvisionApi.prototype.provisionUser = function (options) {
        return exports.ProvisionApiFp(this.configuration).provisionUser(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Resend verification email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    ProvisionApi.prototype.verifyEmail = function (options) {
        return exports.ProvisionApiFp(this.configuration).verifyEmail(options)(this.fetch, this.basePath);
    };
    return ProvisionApi;
}(BaseAPI));
exports.ProvisionApi = ProvisionApi;
/**
 * QueriesApi - fetch parameter creator
 * @export
 */
exports.QueriesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns information for a query
         * @summary Get information for a query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuery: function (queryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queryId' is not null or undefined
            if (queryId === null || queryId === undefined) {
                throw new RequiredError('queryId', 'Required parameter queryId was null or undefined when calling getQuery.');
            }
            var localVarPath = "/v1/orgs/self/queries/{queryId}"
                .replace("{" + "queryId" + "}", encodeURIComponent(String(queryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch paginated query results
         * @param {string} queryId
         * @param {string} cursor
         * @param {number} [docs]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryPagination: function (queryId, cursor, docs, offset, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queryId' is not null or undefined
            if (queryId === null || queryId === undefined) {
                throw new RequiredError('queryId', 'Required parameter queryId was null or undefined when calling getQueryPagination.');
            }
            // verify required parameter 'cursor' is not null or undefined
            if (cursor === null || cursor === undefined) {
                throw new RequiredError('cursor', 'Required parameter cursor was null or undefined when calling getQueryPagination.');
            }
            var localVarPath = "/v1/orgs/self/queries/{queryId}/pages/{cursor}"
                .replace("{" + "queryId" + "}", encodeURIComponent(String(queryId)))
                .replace("{" + "cursor" + "}", encodeURIComponent(String(cursor)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (docs !== undefined) {
                localVarQueryParameter['docs'] = docs;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a query plan from Rockset's planner for a given SQL query.
         * @summary Plan Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryPlan: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling getQueryPlan.');
            }
            var localVarPath = "/v1/orgs/self/queries/plans";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("QueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch execution statistics for a particular query.
         * @summary Fetch Query Stats
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryStats: function (queryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queryId' is not null or undefined
            if (queryId === null || queryId === undefined) {
                throw new RequiredError('queryId', 'Required parameter queryId was null or undefined when calling getQueryStats.');
            }
            var localVarPath = "/v1/orgs/self/queries/{queryId}/stats"
                .replace("{" + "queryId" + "}", encodeURIComponent(String(queryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists data about ongoing queries.
         * @summary List all query pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryPages: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/queries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists data about this queries pages.
         * @summary Get pages for a query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryPages: function (queryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queryId' is not null or undefined
            if (queryId === null || queryId === undefined) {
                throw new RequiredError('queryId', 'Required parameter queryId was null or undefined when calling listQueryPages.');
            }
            var localVarPath = "/v1/orgs/self/queries/{queryId}/pages"
                .replace("{" + "queryId" + "}", encodeURIComponent(String(queryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Make a SQL query to Rockset.
         * @summary Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling query.');
            }
            var localVarPath = "/v1/orgs/self/queries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("QueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a SQL query with Rockset's parser and planner.
         * @summary Validate Query
         * @param {QueryRequest} body JSON object
         * @param {boolean} [parameters]
         * @param {boolean} [allow_undefined_parameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate: function (body, parameters, allow_undefined_parameters, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling validate.');
            }
            var localVarPath = "/v1/orgs/self/queries/validations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (parameters !== undefined) {
                localVarQueryParameter['parameters'] = parameters;
            }
            if (allow_undefined_parameters !== undefined) {
                localVarQueryParameter['allow_undefined_parameters'] = allow_undefined_parameters;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("QueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a SQL Expression with Rockset's parser and planner.
         * @summary Validate Expression
         * @param {ValidateExpressionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateExpression: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling validateExpression.');
            }
            var localVarPath = "/v1/orgs/self/queries/validateExpression";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ValidateExpressionRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate field mapping query with Rockset's parser and planner.
         * @summary Validate field mapping query
         * @param {ValidateFieldMappingQueryRequest} body SQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFieldMappingQuery: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling validateFieldMappingQuery.');
            }
            var localVarPath = "/v1/orgs/self/queries/validateMappings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ValidateFieldMappingQueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueriesApi - functional programming interface
 * @export
 */
exports.QueriesApiFp = function (configuration) {
    return {
        /**
         * Returns information for a query
         * @summary Get information for a query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuery: function (queryId, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).getQuery(queryId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Fetch paginated query results
         * @param {string} queryId
         * @param {string} cursor
         * @param {number} [docs]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryPagination: function (queryId, cursor, docs, offset, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).getQueryPagination(queryId, cursor, docs, offset, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetch a query plan from Rockset's planner for a given SQL query.
         * @summary Plan Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryPlan: function (body, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).getQueryPlan(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetch execution statistics for a particular query.
         * @summary Fetch Query Stats
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryStats: function (queryId, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).getQueryStats(queryId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists data about ongoing queries.
         * @summary List all query pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryPages: function (options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).listAllQueryPages(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lists data about this queries pages.
         * @summary Get pages for a query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryPages: function (queryId, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).listQueryPages(queryId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Make a SQL query to Rockset.
         * @summary Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: function (body, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).query(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validate a SQL query with Rockset's parser and planner.
         * @summary Validate Query
         * @param {QueryRequest} body JSON object
         * @param {boolean} [parameters]
         * @param {boolean} [allow_undefined_parameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate: function (body, parameters, allow_undefined_parameters, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).validate(body, parameters, allow_undefined_parameters, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validate a SQL Expression with Rockset's parser and planner.
         * @summary Validate Expression
         * @param {ValidateExpressionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateExpression: function (body, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).validateExpression(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validate field mapping query with Rockset's parser and planner.
         * @summary Validate field mapping query
         * @param {ValidateFieldMappingQueryRequest} body SQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFieldMappingQuery: function (body, options) {
            var localVarFetchArgs = exports.QueriesApiFetchParamCreator(configuration).validateFieldMappingQuery(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * QueriesApi - factory interface
 * @export
 */
exports.QueriesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns information for a query
         * @summary Get information for a query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuery: function (queryId, options) {
            return exports.QueriesApiFp(configuration).getQuery(queryId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Fetch paginated query results
         * @param {string} queryId
         * @param {string} cursor
         * @param {number} [docs]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryPagination: function (queryId, cursor, docs, offset, options) {
            return exports.QueriesApiFp(configuration).getQueryPagination(queryId, cursor, docs, offset, options)(fetch, basePath);
        },
        /**
         * Fetch a query plan from Rockset's planner for a given SQL query.
         * @summary Plan Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryPlan: function (body, options) {
            return exports.QueriesApiFp(configuration).getQueryPlan(body, options)(fetch, basePath);
        },
        /**
         * Fetch execution statistics for a particular query.
         * @summary Fetch Query Stats
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryStats: function (queryId, options) {
            return exports.QueriesApiFp(configuration).getQueryStats(queryId, options)(fetch, basePath);
        },
        /**
         * Lists data about ongoing queries.
         * @summary List all query pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryPages: function (options) {
            return exports.QueriesApiFp(configuration).listAllQueryPages(options)(fetch, basePath);
        },
        /**
         * Lists data about this queries pages.
         * @summary Get pages for a query
         * @param {string} queryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryPages: function (queryId, options) {
            return exports.QueriesApiFp(configuration).listQueryPages(queryId, options)(fetch, basePath);
        },
        /**
         * Make a SQL query to Rockset.
         * @summary Query
         * @param {QueryRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: function (body, options) {
            return exports.QueriesApiFp(configuration).query(body, options)(fetch, basePath);
        },
        /**
         * Validate a SQL query with Rockset's parser and planner.
         * @summary Validate Query
         * @param {QueryRequest} body JSON object
         * @param {boolean} [parameters]
         * @param {boolean} [allow_undefined_parameters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate: function (body, parameters, allow_undefined_parameters, options) {
            return exports.QueriesApiFp(configuration).validate(body, parameters, allow_undefined_parameters, options)(fetch, basePath);
        },
        /**
         * Validate a SQL Expression with Rockset's parser and planner.
         * @summary Validate Expression
         * @param {ValidateExpressionRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateExpression: function (body, options) {
            return exports.QueriesApiFp(configuration).validateExpression(body, options)(fetch, basePath);
        },
        /**
         * Validate field mapping query with Rockset's parser and planner.
         * @summary Validate field mapping query
         * @param {ValidateFieldMappingQueryRequest} body SQL query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFieldMappingQuery: function (body, options) {
            return exports.QueriesApiFp(configuration).validateFieldMappingQuery(body, options)(fetch, basePath);
        },
    };
};
/**
 * QueriesApi - object-oriented interface
 * @export
 * @class QueriesApi
 * @extends {BaseAPI}
 */
var QueriesApi = /** @class */ (function (_super) {
    __extends(QueriesApi, _super);
    function QueriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns information for a query
     * @summary Get information for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.getQuery = function (queryId, options) {
        return exports.QueriesApiFp(this.configuration).getQuery(queryId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Fetch paginated query results
     * @param {string} queryId
     * @param {string} cursor
     * @param {number} [docs]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.getQueryPagination = function (queryId, cursor, docs, offset, options) {
        return exports.QueriesApiFp(this.configuration).getQueryPagination(queryId, cursor, docs, offset, options)(this.fetch, this.basePath);
    };
    /**
     * Fetch a query plan from Rockset's planner for a given SQL query.
     * @summary Plan Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.getQueryPlan = function (body, options) {
        return exports.QueriesApiFp(this.configuration).getQueryPlan(body, options)(this.fetch, this.basePath);
    };
    /**
     * Fetch execution statistics for a particular query.
     * @summary Fetch Query Stats
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.getQueryStats = function (queryId, options) {
        return exports.QueriesApiFp(this.configuration).getQueryStats(queryId, options)(this.fetch, this.basePath);
    };
    /**
     * Lists data about ongoing queries.
     * @summary List all query pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.listAllQueryPages = function (options) {
        return exports.QueriesApiFp(this.configuration).listAllQueryPages(options)(this.fetch, this.basePath);
    };
    /**
     * Lists data about this queries pages.
     * @summary Get pages for a query
     * @param {string} queryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.listQueryPages = function (queryId, options) {
        return exports.QueriesApiFp(this.configuration).listQueryPages(queryId, options)(this.fetch, this.basePath);
    };
    /**
     * Make a SQL query to Rockset.
     * @summary Query
     * @param {QueryRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.query = function (body, options) {
        return exports.QueriesApiFp(this.configuration).query(body, options)(this.fetch, this.basePath);
    };
    /**
     * Validate a SQL query with Rockset's parser and planner.
     * @summary Validate Query
     * @param {QueryRequest} body JSON object
     * @param {boolean} [parameters]
     * @param {boolean} [allow_undefined_parameters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.validate = function (body, parameters, allow_undefined_parameters, options) {
        return exports.QueriesApiFp(this.configuration).validate(body, parameters, allow_undefined_parameters, options)(this.fetch, this.basePath);
    };
    /**
     * Validate a SQL Expression with Rockset's parser and planner.
     * @summary Validate Expression
     * @param {ValidateExpressionRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.validateExpression = function (body, options) {
        return exports.QueriesApiFp(this.configuration).validateExpression(body, options)(this.fetch, this.basePath);
    };
    /**
     * Validate field mapping query with Rockset's parser and planner.
     * @summary Validate field mapping query
     * @param {ValidateFieldMappingQueryRequest} body SQL query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueriesApi
     */
    QueriesApi.prototype.validateFieldMappingQuery = function (body, options) {
        return exports.QueriesApiFp(this.configuration).validateFieldMappingQuery(body, options)(this.fetch, this.basePath);
    };
    return QueriesApi;
}(BaseAPI));
exports.QueriesApi = QueriesApi;
/**
 * QueryLambdasApi - fetch parameter creator
 * @export
 */
exports.QueryLambdasApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a Query Lambda in given workspace.
         * @summary Create Query Lambda
         * @param {string} workspace name of the workspace
         * @param {CreateQueryLambdaRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambda: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createQueryLambda.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueryLambda.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
         * @summary Create Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {CreateQueryLambdaTagRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambdaTag: function (workspace, queryLambda, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createQueryLambdaTag.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling createQueryLambdaTag.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createQueryLambdaTag.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateQueryLambdaTagRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Query Lambda.
         * @summary Delete Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambda: function (workspace, queryLambda, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteQueryLambda.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling deleteQueryLambda.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a tag for a specific Query Lambda
         * @summary Delete Query Lambda Tag Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaTag: function (workspace, queryLambda, tag, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteQueryLambdaTag.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling deleteQueryLambdaTag.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling deleteQueryLambdaTag.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "tag" + "}", encodeURIComponent(String(tag)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Query Lambda version.
         * @summary Delete Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteQueryLambdaVersion.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling deleteQueryLambdaVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version', 'Required parameter version was null or undefined when calling deleteQueryLambdaVersion.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "version" + "}", encodeURIComponent(String(version)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute a particular version of a Query Lambda.
         * @summary Execute Query Lambda By Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambda: function (workspace, queryLambda, version, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling executeQueryLambda.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling executeQueryLambda.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version', 'Required parameter version was null or undefined when calling executeQueryLambda.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "version" + "}", encodeURIComponent(String(version)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ExecuteQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute the Query Lambda version associated with a given tag.
         * @summary Execute Query Lambda By Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag tag
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambdaByTag: function (workspace, queryLambda, tag, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling executeQueryLambdaByTag.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling executeQueryLambdaByTag.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling executeQueryLambdaByTag.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "tag" + "}", encodeURIComponent(String(tag)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ExecuteQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the Query Lambda version associated with a given tag.
         * @summary Retrieve Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaTagVersion: function (workspace, queryLambda, tag, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getQueryLambdaTagVersion.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling getQueryLambdaTagVersion.');
            }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling getQueryLambdaTagVersion.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "tag" + "}", encodeURIComponent(String(tag)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details for a specified version of a Query Lambda.
         * @summary Retrieve Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getQueryLambdaVersion.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling getQueryLambdaVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version', 'Required parameter version was null or undefined when calling getQueryLambdaVersion.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)))
                .replace("{" + "version" + "}", encodeURIComponent(String(version)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Query Lambdas in an organization.
         * @summary List Query Lambdas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryLambdas: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/lambdas";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all distinct Query Lambda tags in an organization.
         * @summary List All Query Lambda Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationTags: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/lambdas/tags";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Query Lambda versions associated with a given tag.
         * @summary List Query Lambda Tag Versions
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTagVersions: function (tag, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tag' is not null or undefined
            if (tag === null || tag === undefined) {
                throw new RequiredError('tag', 'Required parameter tag was null or undefined when calling listQueryLambdaTagVersions.');
            }
            var localVarPath = "/v1/orgs/self/lambdas/tags/{tag}"
                .replace("{" + "tag" + "}", encodeURIComponent(String(tag)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all tags associated with a Query Lambda
         * @summary List Query Lambda Tags
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTags: function (workspace, queryLambda, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listQueryLambdaTags.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling listQueryLambdaTags.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all versions of a Query Lambda.
         * @summary List Query Lambda Versions
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaVersions: function (workspace, queryLambda, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listQueryLambdaVersions.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling listQueryLambdaVersions.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Query Lambdas under given workspace.
         * @summary List Query Lambdas in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInWorkspace: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling listQueryLambdasInWorkspace.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer ownership of a Query Lambda to a new user.
         * @summary Transfer Ownership of a Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, queryLambda, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling transferOwnership.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling transferOwnership.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling transferOwnership.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/owner"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TransferOwnershipRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new version of a Query Lambda in given workspace.
         * @summary Update Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {UpdateQueryLambdaRequest} body JSON object
         * @param {boolean} [create]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryLambda: function (workspace, queryLambda, body, create, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling updateQueryLambda.');
            }
            // verify required parameter 'queryLambda' is not null or undefined
            if (queryLambda === null || queryLambda === undefined) {
                throw new RequiredError('queryLambda', 'Required parameter queryLambda was null or undefined when calling updateQueryLambda.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateQueryLambda.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "queryLambda" + "}", encodeURIComponent(String(queryLambda)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (create !== undefined) {
                localVarQueryParameter['create'] = create;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateQueryLambdaRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QueryLambdasApi - functional programming interface
 * @export
 */
exports.QueryLambdasApiFp = function (configuration) {
    return {
        /**
         * Create a Query Lambda in given workspace.
         * @summary Create Query Lambda
         * @param {string} workspace name of the workspace
         * @param {CreateQueryLambdaRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambda: function (workspace, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).createQueryLambda(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
         * @summary Create Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {CreateQueryLambdaTagRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambdaTag: function (workspace, queryLambda, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).createQueryLambdaTag(workspace, queryLambda, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a Query Lambda.
         * @summary Delete Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambda: function (workspace, queryLambda, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).deleteQueryLambda(workspace, queryLambda, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a tag for a specific Query Lambda
         * @summary Delete Query Lambda Tag Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaTag: function (workspace, queryLambda, tag, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).deleteQueryLambdaTag(workspace, queryLambda, tag, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a Query Lambda version.
         * @summary Delete Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).deleteQueryLambdaVersion(workspace, queryLambda, version, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Execute a particular version of a Query Lambda.
         * @summary Execute Query Lambda By Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambda: function (workspace, queryLambda, version, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).executeQueryLambda(workspace, queryLambda, version, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Execute the Query Lambda version associated with a given tag.
         * @summary Execute Query Lambda By Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag tag
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambdaByTag: function (workspace, queryLambda, tag, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).executeQueryLambdaByTag(workspace, queryLambda, tag, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the Query Lambda version associated with a given tag.
         * @summary Retrieve Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaTagVersion: function (workspace, queryLambda, tag, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).getQueryLambdaTagVersion(workspace, queryLambda, tag, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve details for a specified version of a Query Lambda.
         * @summary Retrieve Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).getQueryLambdaVersion(workspace, queryLambda, version, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all Query Lambdas in an organization.
         * @summary List Query Lambdas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryLambdas: function (options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listAllQueryLambdas(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all distinct Query Lambda tags in an organization.
         * @summary List All Query Lambda Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationTags: function (options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listOrganizationTags(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all Query Lambda versions associated with a given tag.
         * @summary List Query Lambda Tag Versions
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTagVersions: function (tag, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listQueryLambdaTagVersions(tag, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all tags associated with a Query Lambda
         * @summary List Query Lambda Tags
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTags: function (workspace, queryLambda, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listQueryLambdaTags(workspace, queryLambda, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all versions of a Query Lambda.
         * @summary List Query Lambda Versions
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaVersions: function (workspace, queryLambda, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listQueryLambdaVersions(workspace, queryLambda, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all Query Lambdas under given workspace.
         * @summary List Query Lambdas in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInWorkspace: function (workspace, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).listQueryLambdasInWorkspace(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Transfer ownership of a Query Lambda to a new user.
         * @summary Transfer Ownership of a Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, queryLambda, body, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).transferOwnership(workspace, queryLambda, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new version of a Query Lambda in given workspace.
         * @summary Update Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {UpdateQueryLambdaRequest} body JSON object
         * @param {boolean} [create]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryLambda: function (workspace, queryLambda, body, create, options) {
            var localVarFetchArgs = exports.QueryLambdasApiFetchParamCreator(configuration).updateQueryLambda(workspace, queryLambda, body, create, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * QueryLambdasApi - factory interface
 * @export
 */
exports.QueryLambdasApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a Query Lambda in given workspace.
         * @summary Create Query Lambda
         * @param {string} workspace name of the workspace
         * @param {CreateQueryLambdaRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambda: function (workspace, body, options) {
            return exports.QueryLambdasApiFp(configuration).createQueryLambda(workspace, body, options)(fetch, basePath);
        },
        /**
         * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
         * @summary Create Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {CreateQueryLambdaTagRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQueryLambdaTag: function (workspace, queryLambda, body, options) {
            return exports.QueryLambdasApiFp(configuration).createQueryLambdaTag(workspace, queryLambda, body, options)(fetch, basePath);
        },
        /**
         * Delete a Query Lambda.
         * @summary Delete Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambda: function (workspace, queryLambda, options) {
            return exports.QueryLambdasApiFp(configuration).deleteQueryLambda(workspace, queryLambda, options)(fetch, basePath);
        },
        /**
         * Delete a tag for a specific Query Lambda
         * @summary Delete Query Lambda Tag Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaTag: function (workspace, queryLambda, tag, options) {
            return exports.QueryLambdasApiFp(configuration).deleteQueryLambdaTag(workspace, queryLambda, tag, options)(fetch, basePath);
        },
        /**
         * Delete a Query Lambda version.
         * @summary Delete Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            return exports.QueryLambdasApiFp(configuration).deleteQueryLambdaVersion(workspace, queryLambda, version, options)(fetch, basePath);
        },
        /**
         * Execute a particular version of a Query Lambda.
         * @summary Execute Query Lambda By Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambda: function (workspace, queryLambda, version, body, options) {
            return exports.QueryLambdasApiFp(configuration).executeQueryLambda(workspace, queryLambda, version, body, options)(fetch, basePath);
        },
        /**
         * Execute the Query Lambda version associated with a given tag.
         * @summary Execute Query Lambda By Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag tag
         * @param {ExecuteQueryLambdaRequest} [body] JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeQueryLambdaByTag: function (workspace, queryLambda, tag, body, options) {
            return exports.QueryLambdasApiFp(configuration).executeQueryLambdaByTag(workspace, queryLambda, tag, body, options)(fetch, basePath);
        },
        /**
         * Retrieve the Query Lambda version associated with a given tag.
         * @summary Retrieve Query Lambda Tag
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaTagVersion: function (workspace, queryLambda, tag, options) {
            return exports.QueryLambdasApiFp(configuration).getQueryLambdaTagVersion(workspace, queryLambda, tag, options)(fetch, basePath);
        },
        /**
         * Retrieve details for a specified version of a Query Lambda.
         * @summary Retrieve Query Lambda Version
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {string} version version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryLambdaVersion: function (workspace, queryLambda, version, options) {
            return exports.QueryLambdasApiFp(configuration).getQueryLambdaVersion(workspace, queryLambda, version, options)(fetch, basePath);
        },
        /**
         * List all Query Lambdas in an organization.
         * @summary List Query Lambdas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllQueryLambdas: function (options) {
            return exports.QueryLambdasApiFp(configuration).listAllQueryLambdas(options)(fetch, basePath);
        },
        /**
         * List all distinct Query Lambda tags in an organization.
         * @summary List All Query Lambda Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizationTags: function (options) {
            return exports.QueryLambdasApiFp(configuration).listOrganizationTags(options)(fetch, basePath);
        },
        /**
         * List all Query Lambda versions associated with a given tag.
         * @summary List Query Lambda Tag Versions
         * @param {string} tag name of the tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTagVersions: function (tag, options) {
            return exports.QueryLambdasApiFp(configuration).listQueryLambdaTagVersions(tag, options)(fetch, basePath);
        },
        /**
         * List all tags associated with a Query Lambda
         * @summary List Query Lambda Tags
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaTags: function (workspace, queryLambda, options) {
            return exports.QueryLambdasApiFp(configuration).listQueryLambdaTags(workspace, queryLambda, options)(fetch, basePath);
        },
        /**
         * List all versions of a Query Lambda.
         * @summary List Query Lambda Versions
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdaVersions: function (workspace, queryLambda, options) {
            return exports.QueryLambdasApiFp(configuration).listQueryLambdaVersions(workspace, queryLambda, options)(fetch, basePath);
        },
        /**
         * List all Query Lambdas under given workspace.
         * @summary List Query Lambdas in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueryLambdasInWorkspace: function (workspace, options) {
            return exports.QueryLambdasApiFp(configuration).listQueryLambdasInWorkspace(workspace, options)(fetch, basePath);
        },
        /**
         * Transfer ownership of a Query Lambda to a new user.
         * @summary Transfer Ownership of a Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, queryLambda, body, options) {
            return exports.QueryLambdasApiFp(configuration).transferOwnership(workspace, queryLambda, body, options)(fetch, basePath);
        },
        /**
         * Create a new version of a Query Lambda in given workspace.
         * @summary Update Query Lambda
         * @param {string} workspace name of the workspace
         * @param {string} queryLambda name of the Query Lambda
         * @param {UpdateQueryLambdaRequest} body JSON object
         * @param {boolean} [create]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQueryLambda: function (workspace, queryLambda, body, create, options) {
            return exports.QueryLambdasApiFp(configuration).updateQueryLambda(workspace, queryLambda, body, create, options)(fetch, basePath);
        },
    };
};
/**
 * QueryLambdasApi - object-oriented interface
 * @export
 * @class QueryLambdasApi
 * @extends {BaseAPI}
 */
var QueryLambdasApi = /** @class */ (function (_super) {
    __extends(QueryLambdasApi, _super);
    function QueryLambdasApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a Query Lambda in given workspace.
     * @summary Create Query Lambda
     * @param {string} workspace name of the workspace
     * @param {CreateQueryLambdaRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.createQueryLambda = function (workspace, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).createQueryLambda(workspace, body, options)(this.fetch, this.basePath);
    };
    /**
     * Create a tag for a specific Query Lambda version, or update that tag if it already exists.
     * @summary Create Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {CreateQueryLambdaTagRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.createQueryLambdaTag = function (workspace, queryLambda, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).createQueryLambdaTag(workspace, queryLambda, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a Query Lambda.
     * @summary Delete Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.deleteQueryLambda = function (workspace, queryLambda, options) {
        return exports.QueryLambdasApiFp(this.configuration).deleteQueryLambda(workspace, queryLambda, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a tag for a specific Query Lambda
     * @summary Delete Query Lambda Tag Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.deleteQueryLambdaTag = function (workspace, queryLambda, tag, options) {
        return exports.QueryLambdasApiFp(this.configuration).deleteQueryLambdaTag(workspace, queryLambda, tag, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a Query Lambda version.
     * @summary Delete Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.deleteQueryLambdaVersion = function (workspace, queryLambda, version, options) {
        return exports.QueryLambdasApiFp(this.configuration).deleteQueryLambdaVersion(workspace, queryLambda, version, options)(this.fetch, this.basePath);
    };
    /**
     * Execute a particular version of a Query Lambda.
     * @summary Execute Query Lambda By Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.executeQueryLambda = function (workspace, queryLambda, version, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).executeQueryLambda(workspace, queryLambda, version, body, options)(this.fetch, this.basePath);
    };
    /**
     * Execute the Query Lambda version associated with a given tag.
     * @summary Execute Query Lambda By Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag tag
     * @param {ExecuteQueryLambdaRequest} [body] JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.executeQueryLambdaByTag = function (workspace, queryLambda, tag, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).executeQueryLambdaByTag(workspace, queryLambda, tag, body, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve the Query Lambda version associated with a given tag.
     * @summary Retrieve Query Lambda Tag
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.getQueryLambdaTagVersion = function (workspace, queryLambda, tag, options) {
        return exports.QueryLambdasApiFp(this.configuration).getQueryLambdaTagVersion(workspace, queryLambda, tag, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve details for a specified version of a Query Lambda.
     * @summary Retrieve Query Lambda Version
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {string} version version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.getQueryLambdaVersion = function (workspace, queryLambda, version, options) {
        return exports.QueryLambdasApiFp(this.configuration).getQueryLambdaVersion(workspace, queryLambda, version, options)(this.fetch, this.basePath);
    };
    /**
     * List all Query Lambdas in an organization.
     * @summary List Query Lambdas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listAllQueryLambdas = function (options) {
        return exports.QueryLambdasApiFp(this.configuration).listAllQueryLambdas(options)(this.fetch, this.basePath);
    };
    /**
     * List all distinct Query Lambda tags in an organization.
     * @summary List All Query Lambda Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listOrganizationTags = function (options) {
        return exports.QueryLambdasApiFp(this.configuration).listOrganizationTags(options)(this.fetch, this.basePath);
    };
    /**
     * List all Query Lambda versions associated with a given tag.
     * @summary List Query Lambda Tag Versions
     * @param {string} tag name of the tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listQueryLambdaTagVersions = function (tag, options) {
        return exports.QueryLambdasApiFp(this.configuration).listQueryLambdaTagVersions(tag, options)(this.fetch, this.basePath);
    };
    /**
     * List all tags associated with a Query Lambda
     * @summary List Query Lambda Tags
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listQueryLambdaTags = function (workspace, queryLambda, options) {
        return exports.QueryLambdasApiFp(this.configuration).listQueryLambdaTags(workspace, queryLambda, options)(this.fetch, this.basePath);
    };
    /**
     * List all versions of a Query Lambda.
     * @summary List Query Lambda Versions
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listQueryLambdaVersions = function (workspace, queryLambda, options) {
        return exports.QueryLambdasApiFp(this.configuration).listQueryLambdaVersions(workspace, queryLambda, options)(this.fetch, this.basePath);
    };
    /**
     * List all Query Lambdas under given workspace.
     * @summary List Query Lambdas in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.listQueryLambdasInWorkspace = function (workspace, options) {
        return exports.QueryLambdasApiFp(this.configuration).listQueryLambdasInWorkspace(workspace, options)(this.fetch, this.basePath);
    };
    /**
     * Transfer ownership of a Query Lambda to a new user.
     * @summary Transfer Ownership of a Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.transferOwnership = function (workspace, queryLambda, body, options) {
        return exports.QueryLambdasApiFp(this.configuration).transferOwnership(workspace, queryLambda, body, options)(this.fetch, this.basePath);
    };
    /**
     * Create a new version of a Query Lambda in given workspace.
     * @summary Update Query Lambda
     * @param {string} workspace name of the workspace
     * @param {string} queryLambda name of the Query Lambda
     * @param {UpdateQueryLambdaRequest} body JSON object
     * @param {boolean} [create]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLambdasApi
     */
    QueryLambdasApi.prototype.updateQueryLambda = function (workspace, queryLambda, body, create, options) {
        return exports.QueryLambdasApiFp(this.configuration).updateQueryLambda(workspace, queryLambda, body, create, options)(this.fetch, this.basePath);
    };
    return QueryLambdasApi;
}(BaseAPI));
exports.QueryLambdasApi = QueryLambdasApi;
/**
 * StatusApi - fetch parameter creator
 * @export
 */
exports.StatusApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Server responds with 200 if healthy.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StatusApi - functional programming interface
 * @export
 */
exports.StatusApiFp = function (configuration) {
    return {
        /**
         * Server responds with 200 if healthy.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health: function (options) {
            var localVarFetchArgs = exports.StatusApiFetchParamCreator(configuration).health(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * StatusApi - factory interface
 * @export
 */
exports.StatusApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Server responds with 200 if healthy.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        health: function (options) {
            return exports.StatusApiFp(configuration).health(options)(fetch, basePath);
        },
    };
};
/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
var StatusApi = /** @class */ (function (_super) {
    __extends(StatusApi, _super);
    function StatusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Server responds with 200 if healthy.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    StatusApi.prototype.health = function (options) {
        return exports.StatusApiFp(this.configuration).health(options)(this.fetch, this.basePath);
    };
    return StatusApi;
}(BaseAPI));
exports.StatusApi = StatusApi;
/**
 * TelemetryApi - fetch parameter creator
 * @export
 */
exports.TelemetryApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Record an item.
         * @summary Record Activity
         * @param {TelemetryRequest} body the activity item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordActivity: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling recordActivity.');
            }
            var localVarPath = "/v1/telemetry";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TelemetryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TelemetryApi - functional programming interface
 * @export
 */
exports.TelemetryApiFp = function (configuration) {
    return {
        /**
         * Record an item.
         * @summary Record Activity
         * @param {TelemetryRequest} body the activity item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordActivity: function (body, options) {
            var localVarFetchArgs = exports.TelemetryApiFetchParamCreator(configuration).recordActivity(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * TelemetryApi - factory interface
 * @export
 */
exports.TelemetryApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Record an item.
         * @summary Record Activity
         * @param {TelemetryRequest} body the activity item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordActivity: function (body, options) {
            return exports.TelemetryApiFp(configuration).recordActivity(body, options)(fetch, basePath);
        },
    };
};
/**
 * TelemetryApi - object-oriented interface
 * @export
 * @class TelemetryApi
 * @extends {BaseAPI}
 */
var TelemetryApi = /** @class */ (function (_super) {
    __extends(TelemetryApi, _super);
    function TelemetryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Record an item.
     * @summary Record Activity
     * @param {TelemetryRequest} body the activity item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelemetryApi
     */
    TelemetryApi.prototype.recordActivity = function (body, options) {
        return exports.TelemetryApiFp(this.configuration).recordActivity(body, options)(this.fetch, this.basePath);
    };
    return TelemetryApi;
}(BaseAPI));
exports.TelemetryApi = TelemetryApi;
/**
 * UsersApi - fetch parameter creator
 * @export
 */
exports.UsersApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a new user for an organization.
         * @summary Create User
         * @param {CreateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createUser.');
            }
            var localVarPath = "/v1/orgs/self/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user from an organization.
         * @summary Delete User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling deleteUser.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve currently authenticated user.
         * @summary Retrieve Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get invite_state for current user's org_membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInviteState: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/inviteState";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve currently active user's nux values.
         * @summary Get Current User's Nux Values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserNux: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/nux";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get state value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserState: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/state";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get accepted_ToS value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserTos: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/tos";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Functional in public API server's only - used to bootstrap Console
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserUnchecked: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/public";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve user by email.
         * @summary Retrieve User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling getUser.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get query history for user.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserQueryHistory: function (limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/query-history";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all roles for a user.
         * @summary List User Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/roles";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all notification preferences.
         * @summary Get all notification preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnsubscribePreferences: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/preferences";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all users for an organization.
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set invite_state for current user's org_membership.
         * @param {InviteState} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserInviteState: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling setCurrentUserInviteState.');
            }
            var localVarPath = "/v1/orgs/self/users/self/inviteState";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("InviteState" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update state value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserState: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/state";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Set accepted_ToS value to true for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserTos: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/tos";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Auth0 to require MFA for a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserMfa: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/users/self/mfa";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update currently active user.
         * @summary Update Current User
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateCurrentUser.');
            }
            var localVarPath = "/v1/orgs/self/users/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update nux info for user.
         * @summary Update Nux Info for User
         * @param {UpdateUserNuxRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUserNux: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateCurrentUserNux.');
            }
            var localVarPath = "/v1/orgs/self/users/self/nux";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateUserNuxRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update notification preference.
         * @summary Update notification preferences
         * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnsubscribePreferences: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateUnsubscribePreferences.');
            }
            var localVarPath = "/v1/orgs/self/users/self/preferences";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateUnsubscribePreferencesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user in an organization.
         * @summary Update User
         * @param {string} user email of the user to update
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling updateUser.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateUser.');
            }
            var localVarPath = "/v1/orgs/self/users/{user}"
                .replace("{" + "user" + "}", encodeURIComponent(String(user)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateUserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    return {
        /**
         * Create a new user for an organization.
         * @summary Create User
         * @param {CreateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).createUser(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a user from an organization.
         * @summary Delete User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).deleteUser(user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve currently authenticated user.
         * @summary Retrieve Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getCurrentUser(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get invite_state for current user's org_membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInviteState: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getCurrentUserInviteState(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve currently active user's nux values.
         * @summary Get Current User's Nux Values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserNux: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getCurrentUserNux(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get state value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserState: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getCurrentUserState(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get accepted_ToS value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserTos: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getCurrentUserTos(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Functional in public API server's only - used to bootstrap Console
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserUnchecked: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getCurrentUserUnchecked(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve user by email.
         * @summary Retrieve User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getUser(user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get query history for user.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserQueryHistory: function (limit, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).getUserQueryHistory(limit, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all roles for a user.
         * @summary List User Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).listRoles(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all notification preferences.
         * @summary Get all notification preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnsubscribePreferences: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).listUnsubscribePreferences(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all users for an organization.
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).listUsers(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Set invite_state for current user's org_membership.
         * @param {InviteState} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserInviteState: function (body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).setCurrentUserInviteState(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update state value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserState: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).setCurrentUserState(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Set accepted_ToS value to true for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserTos: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).setCurrentUserTos(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update Auth0 to require MFA for a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserMfa: function (options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).setUserMfa(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update currently active user.
         * @summary Update Current User
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser: function (body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).updateCurrentUser(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update nux info for user.
         * @summary Update Nux Info for User
         * @param {UpdateUserNuxRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUserNux: function (body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).updateCurrentUserNux(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update notification preference.
         * @summary Update notification preferences
         * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnsubscribePreferences: function (body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).updateUnsubscribePreferences(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a user in an organization.
         * @summary Update User
         * @param {string} user email of the user to update
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, body, options) {
            var localVarFetchArgs = exports.UsersApiFetchParamCreator(configuration).updateUser(user, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a new user for an organization.
         * @summary Create User
         * @param {CreateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            return exports.UsersApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * Delete a user from an organization.
         * @summary Delete User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user, options) {
            return exports.UsersApiFp(configuration).deleteUser(user, options)(fetch, basePath);
        },
        /**
         * Retrieve currently authenticated user.
         * @summary Retrieve Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: function (options) {
            return exports.UsersApiFp(configuration).getCurrentUser(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get invite_state for current user's org_membership.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInviteState: function (options) {
            return exports.UsersApiFp(configuration).getCurrentUserInviteState(options)(fetch, basePath);
        },
        /**
         * Retrieve currently active user's nux values.
         * @summary Get Current User's Nux Values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserNux: function (options) {
            return exports.UsersApiFp(configuration).getCurrentUserNux(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get state value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserState: function (options) {
            return exports.UsersApiFp(configuration).getCurrentUserState(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get accepted_ToS value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserTos: function (options) {
            return exports.UsersApiFp(configuration).getCurrentUserTos(options)(fetch, basePath);
        },
        /**
         * Functional in public API server's only - used to bootstrap Console
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserUnchecked: function (options) {
            return exports.UsersApiFp(configuration).getCurrentUserUnchecked(options)(fetch, basePath);
        },
        /**
         * Retrieve user by email.
         * @summary Retrieve User
         * @param {string} user user email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user, options) {
            return exports.UsersApiFp(configuration).getUser(user, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get query history for user.
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserQueryHistory: function (limit, options) {
            return exports.UsersApiFp(configuration).getUserQueryHistory(limit, options)(fetch, basePath);
        },
        /**
         * List all roles for a user.
         * @summary List User Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (options) {
            return exports.UsersApiFp(configuration).listRoles(options)(fetch, basePath);
        },
        /**
         * Get all notification preferences.
         * @summary Get all notification preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUnsubscribePreferences: function (options) {
            return exports.UsersApiFp(configuration).listUnsubscribePreferences(options)(fetch, basePath);
        },
        /**
         * Retrieve all users for an organization.
         * @summary List Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            return exports.UsersApiFp(configuration).listUsers(options)(fetch, basePath);
        },
        /**
         *
         * @summary Set invite_state for current user's org_membership.
         * @param {InviteState} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserInviteState: function (body, options) {
            return exports.UsersApiFp(configuration).setCurrentUserInviteState(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update state value for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserState: function (options) {
            return exports.UsersApiFp(configuration).setCurrentUserState(options)(fetch, basePath);
        },
        /**
         *
         * @summary Set accepted_ToS value to true for user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentUserTos: function (options) {
            return exports.UsersApiFp(configuration).setCurrentUserTos(options)(fetch, basePath);
        },
        /**
         *
         * @summary Update Auth0 to require MFA for a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserMfa: function (options) {
            return exports.UsersApiFp(configuration).setUserMfa(options)(fetch, basePath);
        },
        /**
         * Update currently active user.
         * @summary Update Current User
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser: function (body, options) {
            return exports.UsersApiFp(configuration).updateCurrentUser(body, options)(fetch, basePath);
        },
        /**
         * Update nux info for user.
         * @summary Update Nux Info for User
         * @param {UpdateUserNuxRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUserNux: function (body, options) {
            return exports.UsersApiFp(configuration).updateCurrentUserNux(body, options)(fetch, basePath);
        },
        /**
         * Update notification preference.
         * @summary Update notification preferences
         * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnsubscribePreferences: function (body, options) {
            return exports.UsersApiFp(configuration).updateUnsubscribePreferences(body, options)(fetch, basePath);
        },
        /**
         * Update a user in an organization.
         * @summary Update User
         * @param {string} user email of the user to update
         * @param {UpdateUserRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, body, options) {
            return exports.UsersApiFp(configuration).updateUser(user, body, options)(fetch, basePath);
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new user for an organization.
     * @summary Create User
     * @param {CreateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.createUser = function (body, options) {
        return exports.UsersApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a user from an organization.
     * @summary Delete User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUser = function (user, options) {
        return exports.UsersApiFp(this.configuration).deleteUser(user, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve currently authenticated user.
     * @summary Retrieve Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getCurrentUser = function (options) {
        return exports.UsersApiFp(this.configuration).getCurrentUser(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get invite_state for current user's org_membership.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getCurrentUserInviteState = function (options) {
        return exports.UsersApiFp(this.configuration).getCurrentUserInviteState(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve currently active user's nux values.
     * @summary Get Current User's Nux Values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getCurrentUserNux = function (options) {
        return exports.UsersApiFp(this.configuration).getCurrentUserNux(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getCurrentUserState = function (options) {
        return exports.UsersApiFp(this.configuration).getCurrentUserState(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get accepted_ToS value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getCurrentUserTos = function (options) {
        return exports.UsersApiFp(this.configuration).getCurrentUserTos(options)(this.fetch, this.basePath);
    };
    /**
     * Functional in public API server's only - used to bootstrap Console
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getCurrentUserUnchecked = function (options) {
        return exports.UsersApiFp(this.configuration).getCurrentUserUnchecked(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve user by email.
     * @summary Retrieve User
     * @param {string} user user email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUser = function (user, options) {
        return exports.UsersApiFp(this.configuration).getUser(user, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get query history for user.
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUserQueryHistory = function (limit, options) {
        return exports.UsersApiFp(this.configuration).getUserQueryHistory(limit, options)(this.fetch, this.basePath);
    };
    /**
     * List all roles for a user.
     * @summary List User Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.listRoles = function (options) {
        return exports.UsersApiFp(this.configuration).listRoles(options)(this.fetch, this.basePath);
    };
    /**
     * Get all notification preferences.
     * @summary Get all notification preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.listUnsubscribePreferences = function (options) {
        return exports.UsersApiFp(this.configuration).listUnsubscribePreferences(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all users for an organization.
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.listUsers = function (options) {
        return exports.UsersApiFp(this.configuration).listUsers(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Set invite_state for current user's org_membership.
     * @param {InviteState} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.setCurrentUserInviteState = function (body, options) {
        return exports.UsersApiFp(this.configuration).setCurrentUserInviteState(body, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update state value for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.setCurrentUserState = function (options) {
        return exports.UsersApiFp(this.configuration).setCurrentUserState(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Set accepted_ToS value to true for user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.setCurrentUserTos = function (options) {
        return exports.UsersApiFp(this.configuration).setCurrentUserTos(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update Auth0 to require MFA for a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.setUserMfa = function (options) {
        return exports.UsersApiFp(this.configuration).setUserMfa(options)(this.fetch, this.basePath);
    };
    /**
     * Update currently active user.
     * @summary Update Current User
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateCurrentUser = function (body, options) {
        return exports.UsersApiFp(this.configuration).updateCurrentUser(body, options)(this.fetch, this.basePath);
    };
    /**
     * Update nux info for user.
     * @summary Update Nux Info for User
     * @param {UpdateUserNuxRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateCurrentUserNux = function (body, options) {
        return exports.UsersApiFp(this.configuration).updateCurrentUserNux(body, options)(this.fetch, this.basePath);
    };
    /**
     * Update notification preference.
     * @summary Update notification preferences
     * @param {UpdateUnsubscribePreferencesRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUnsubscribePreferences = function (body, options) {
        return exports.UsersApiFp(this.configuration).updateUnsubscribePreferences(body, options)(this.fetch, this.basePath);
    };
    /**
     * Update a user in an organization.
     * @summary Update User
     * @param {string} user email of the user to update
     * @param {UpdateUserRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUser = function (user, body, options) {
        return exports.UsersApiFp(this.configuration).updateUser(user, body, options)(this.fetch, this.basePath);
    };
    return UsersApi;
}(BaseAPI));
exports.UsersApi = UsersApi;
/**
 * ViewsApi - fetch parameter creator
 * @export
 */
exports.ViewsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Create a view
         * @summary Create View
         * @param {string} workspace name of the workspace
         * @param {CreateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling createView.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createView.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateViewRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a view
         * @summary Delete View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView: function (workspace, view, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteView.');
            }
            // verify required parameter 'view' is not null or undefined
            if (view === null || view === undefined) {
                throw new RequiredError('view', 'Required parameter view was null or undefined when calling deleteView.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views/{view}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "view" + "}", encodeURIComponent(String(view)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a view
         * @summary Retrieve View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView: function (workspace, view, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getView.');
            }
            // verify required parameter 'view' is not null or undefined
            if (view === null || view === undefined) {
                throw new RequiredError('view', 'Required parameter view was null or undefined when calling getView.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views/{view}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "view" + "}", encodeURIComponent(String(view)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all views in an organization
         * @summary List Views
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/views";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a view
         * @summary Update View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {UpdateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView: function (workspace, view, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling updateView.');
            }
            // verify required parameter 'view' is not null or undefined
            if (view === null || view === undefined) {
                throw new RequiredError('view', 'Required parameter view was null or undefined when calling updateView.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateView.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views/{view}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)))
                .replace("{" + "view" + "}", encodeURIComponent(String(view)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateViewRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all views in a workspace.
         * @summary List Views in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceViews: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling workspaceViews.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/views"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ViewsApi - functional programming interface
 * @export
 */
exports.ViewsApiFp = function (configuration) {
    return {
        /**
         * Create a view
         * @summary Create View
         * @param {string} workspace name of the workspace
         * @param {CreateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView: function (workspace, body, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).createView(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a view
         * @summary Delete View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView: function (workspace, view, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).deleteView(workspace, view, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get details about a view
         * @summary Retrieve View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView: function (workspace, view, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).getView(workspace, view, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all views in an organization
         * @summary List Views
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews: function (options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).listViews(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a view
         * @summary Update View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {UpdateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView: function (workspace, view, body, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).updateView(workspace, view, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all views in a workspace.
         * @summary List Views in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceViews: function (workspace, options) {
            var localVarFetchArgs = exports.ViewsApiFetchParamCreator(configuration).workspaceViews(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ViewsApi - factory interface
 * @export
 */
exports.ViewsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Create a view
         * @summary Create View
         * @param {string} workspace name of the workspace
         * @param {CreateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createView: function (workspace, body, options) {
            return exports.ViewsApiFp(configuration).createView(workspace, body, options)(fetch, basePath);
        },
        /**
         * Delete a view
         * @summary Delete View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteView: function (workspace, view, options) {
            return exports.ViewsApiFp(configuration).deleteView(workspace, view, options)(fetch, basePath);
        },
        /**
         * Get details about a view
         * @summary Retrieve View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getView: function (workspace, view, options) {
            return exports.ViewsApiFp(configuration).getView(workspace, view, options)(fetch, basePath);
        },
        /**
         * Retrieve all views in an organization
         * @summary List Views
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViews: function (options) {
            return exports.ViewsApiFp(configuration).listViews(options)(fetch, basePath);
        },
        /**
         * Update a view
         * @summary Update View
         * @param {string} workspace name of the workspace
         * @param {string} view name of the view
         * @param {UpdateViewRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateView: function (workspace, view, body, options) {
            return exports.ViewsApiFp(configuration).updateView(workspace, view, body, options)(fetch, basePath);
        },
        /**
         * Retrieve all views in a workspace.
         * @summary List Views in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceViews: function (workspace, options) {
            return exports.ViewsApiFp(configuration).workspaceViews(workspace, options)(fetch, basePath);
        },
    };
};
/**
 * ViewsApi - object-oriented interface
 * @export
 * @class ViewsApi
 * @extends {BaseAPI}
 */
var ViewsApi = /** @class */ (function (_super) {
    __extends(ViewsApi, _super);
    function ViewsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a view
     * @summary Create View
     * @param {string} workspace name of the workspace
     * @param {CreateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.createView = function (workspace, body, options) {
        return exports.ViewsApiFp(this.configuration).createView(workspace, body, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a view
     * @summary Delete View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.deleteView = function (workspace, view, options) {
        return exports.ViewsApiFp(this.configuration).deleteView(workspace, view, options)(this.fetch, this.basePath);
    };
    /**
     * Get details about a view
     * @summary Retrieve View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.getView = function (workspace, view, options) {
        return exports.ViewsApiFp(this.configuration).getView(workspace, view, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all views in an organization
     * @summary List Views
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.listViews = function (options) {
        return exports.ViewsApiFp(this.configuration).listViews(options)(this.fetch, this.basePath);
    };
    /**
     * Update a view
     * @summary Update View
     * @param {string} workspace name of the workspace
     * @param {string} view name of the view
     * @param {UpdateViewRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.updateView = function (workspace, view, body, options) {
        return exports.ViewsApiFp(this.configuration).updateView(workspace, view, body, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all views in a workspace.
     * @summary List Views in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewsApi
     */
    ViewsApi.prototype.workspaceViews = function (workspace, options) {
        return exports.ViewsApiFp(this.configuration).workspaceViews(workspace, options)(this.fetch, this.basePath);
    };
    return ViewsApi;
}(BaseAPI));
exports.ViewsApi = ViewsApi;
/**
 * VirtualInstancesApi - fetch parameter creator
 * @export
 */
exports.VirtualInstancesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Get details about a virtual instance.
         * @summary Retrieve Virtual Instance
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstance: function (virtualInstanceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling getVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get relevant metrics for a specific virtual instance.
         * @summary Get Virtual Instance metrics
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {number} start start time (ms)
         * @param {number} end end time (ms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstanceMetrics: function (virtualInstanceId, start, end, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling getVirtualInstanceMetrics.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start', 'Required parameter start was null or undefined when calling getVirtualInstanceMetrics.');
            }
            // verify required parameter 'end' is not null or undefined
            if (end === null || end === undefined) {
                throw new RequiredError('end', 'Required parameter end was null or undefined when calling getVirtualInstanceMetrics.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/metrics"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all virtual instances in an organization.
         * @summary List Virtual Instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualInstances: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/virtualinstances";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the properties of a virtual instance.
         * @summary Update Virtual Instance
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstance: function (virtualInstanceId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling setVirtualInstance.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling setVirtualInstance.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateVirtualInstanceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Switch a virtual instance type within an organization to a new virtual instance type.
         * @summary Switch Virtual Instance Type
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstanceType: function (virtualInstanceId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'virtualInstanceId' is not null or undefined
            if (virtualInstanceId === null || virtualInstanceId === undefined) {
                throw new RequiredError('virtualInstanceId', 'Required parameter virtualInstanceId was null or undefined when calling setVirtualInstanceType.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling setVirtualInstanceType.');
            }
            var localVarPath = "/v1/orgs/self/virtualinstances/{virtualInstanceId}/type"
                .replace("{" + "virtualInstanceId" + "}", encodeURIComponent(String(virtualInstanceId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UpdateVirtualInstanceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * VirtualInstancesApi - functional programming interface
 * @export
 */
exports.VirtualInstancesApiFp = function (configuration) {
    return {
        /**
         * Get details about a virtual instance.
         * @summary Retrieve Virtual Instance
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstance: function (virtualInstanceId, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).getVirtualInstance(virtualInstanceId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get relevant metrics for a specific virtual instance.
         * @summary Get Virtual Instance metrics
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {number} start start time (ms)
         * @param {number} end end time (ms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstanceMetrics: function (virtualInstanceId, start, end, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).getVirtualInstanceMetrics(virtualInstanceId, start, end, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all virtual instances in an organization.
         * @summary List Virtual Instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualInstances: function (options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).listVirtualInstances(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the properties of a virtual instance.
         * @summary Update Virtual Instance
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstance: function (virtualInstanceId, body, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).setVirtualInstance(virtualInstanceId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Switch a virtual instance type within an organization to a new virtual instance type.
         * @summary Switch Virtual Instance Type
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstanceType: function (virtualInstanceId, body, options) {
            var localVarFetchArgs = exports.VirtualInstancesApiFetchParamCreator(configuration).setVirtualInstanceType(virtualInstanceId, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * VirtualInstancesApi - factory interface
 * @export
 */
exports.VirtualInstancesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Get details about a virtual instance.
         * @summary Retrieve Virtual Instance
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstance: function (virtualInstanceId, options) {
            return exports.VirtualInstancesApiFp(configuration).getVirtualInstance(virtualInstanceId, options)(fetch, basePath);
        },
        /**
         * Get relevant metrics for a specific virtual instance.
         * @summary Get Virtual Instance metrics
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {number} start start time (ms)
         * @param {number} end end time (ms)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVirtualInstanceMetrics: function (virtualInstanceId, start, end, options) {
            return exports.VirtualInstancesApiFp(configuration).getVirtualInstanceMetrics(virtualInstanceId, start, end, options)(fetch, basePath);
        },
        /**
         * Retrieve all virtual instances in an organization.
         * @summary List Virtual Instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualInstances: function (options) {
            return exports.VirtualInstancesApiFp(configuration).listVirtualInstances(options)(fetch, basePath);
        },
        /**
         * Update the properties of a virtual instance.
         * @summary Update Virtual Instance
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstance: function (virtualInstanceId, body, options) {
            return exports.VirtualInstancesApiFp(configuration).setVirtualInstance(virtualInstanceId, body, options)(fetch, basePath);
        },
        /**
         * Switch a virtual instance type within an organization to a new virtual instance type.
         * @summary Switch Virtual Instance Type
         * @param {string} virtualInstanceId uuid of the virtual instance
         * @param {UpdateVirtualInstanceRequest} body JSON object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVirtualInstanceType: function (virtualInstanceId, body, options) {
            return exports.VirtualInstancesApiFp(configuration).setVirtualInstanceType(virtualInstanceId, body, options)(fetch, basePath);
        },
    };
};
/**
 * VirtualInstancesApi - object-oriented interface
 * @export
 * @class VirtualInstancesApi
 * @extends {BaseAPI}
 */
var VirtualInstancesApi = /** @class */ (function (_super) {
    __extends(VirtualInstancesApi, _super);
    function VirtualInstancesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get details about a virtual instance.
     * @summary Retrieve Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.getVirtualInstance = function (virtualInstanceId, options) {
        return exports.VirtualInstancesApiFp(this.configuration).getVirtualInstance(virtualInstanceId, options)(this.fetch, this.basePath);
    };
    /**
     * Get relevant metrics for a specific virtual instance.
     * @summary Get Virtual Instance metrics
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {number} start start time (ms)
     * @param {number} end end time (ms)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.getVirtualInstanceMetrics = function (virtualInstanceId, start, end, options) {
        return exports.VirtualInstancesApiFp(this.configuration).getVirtualInstanceMetrics(virtualInstanceId, start, end, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all virtual instances in an organization.
     * @summary List Virtual Instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.listVirtualInstances = function (options) {
        return exports.VirtualInstancesApiFp(this.configuration).listVirtualInstances(options)(this.fetch, this.basePath);
    };
    /**
     * Update the properties of a virtual instance.
     * @summary Update Virtual Instance
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.setVirtualInstance = function (virtualInstanceId, body, options) {
        return exports.VirtualInstancesApiFp(this.configuration).setVirtualInstance(virtualInstanceId, body, options)(this.fetch, this.basePath);
    };
    /**
     * Switch a virtual instance type within an organization to a new virtual instance type.
     * @summary Switch Virtual Instance Type
     * @param {string} virtualInstanceId uuid of the virtual instance
     * @param {UpdateVirtualInstanceRequest} body JSON object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualInstancesApi
     */
    VirtualInstancesApi.prototype.setVirtualInstanceType = function (virtualInstanceId, body, options) {
        return exports.VirtualInstancesApiFp(this.configuration).setVirtualInstanceType(virtualInstanceId, body, options)(this.fetch, this.basePath);
    };
    return VirtualInstancesApi;
}(BaseAPI));
exports.VirtualInstancesApi = VirtualInstancesApi;
/**
 * WorkspacesApi - fetch parameter creator
 * @export
 */
exports.WorkspacesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * List workspaces under given workspace.
         * @summary List Workspaces in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childWorkspaces: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling childWorkspaces.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/ws"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new workspace.
         * @summary Create Workspace
         * @param {CreateWorkspaceRequest} body workspace details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createWorkspace.');
            }
            var localVarPath = "/v1/orgs/self/ws";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CreateWorkspaceRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a workspace.
         * @summary Delete Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling deleteWorkspace.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a single workspace.
         * @summary Retrieve Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: function (workspace, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling getWorkspace.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all workspaces in an organization.
         * @summary List Workspaces
         * @param {boolean} [fetch_across_regions]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaces: function (fetch_across_regions, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/orgs/self/ws";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (fetch_across_regions !== undefined) {
                localVarQueryParameter['fetch_across_regions'] = fetch_across_regions;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer ownership of a workspace to a new user.
         * @summary Transfer Ownership of a Workspace
         * @param {string} workspace name of the workspace
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace', 'Required parameter workspace was null or undefined when calling transferOwnership.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling transferOwnership.');
            }
            var localVarPath = "/v1/orgs/self/ws/{workspace}/owner"
                .replace("{" + "workspace" + "}", encodeURIComponent(String(workspace)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TransferOwnershipRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * WorkspacesApi - functional programming interface
 * @export
 */
exports.WorkspacesApiFp = function (configuration) {
    return {
        /**
         * List workspaces under given workspace.
         * @summary List Workspaces in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childWorkspaces: function (workspace, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).childWorkspaces(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new workspace.
         * @summary Create Workspace
         * @param {CreateWorkspaceRequest} body workspace details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace: function (body, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).createWorkspace(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove a workspace.
         * @summary Delete Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: function (workspace, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).deleteWorkspace(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get information about a single workspace.
         * @summary Retrieve Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: function (workspace, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).getWorkspace(workspace, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * List all workspaces in an organization.
         * @summary List Workspaces
         * @param {boolean} [fetch_across_regions]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaces: function (fetch_across_regions, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).listWorkspaces(fetch_across_regions, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Transfer ownership of a workspace to a new user.
         * @summary Transfer Ownership of a Workspace
         * @param {string} workspace name of the workspace
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, body, options) {
            var localVarFetchArgs = exports.WorkspacesApiFetchParamCreator(configuration).transferOwnership(workspace, body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * WorkspacesApi - factory interface
 * @export
 */
exports.WorkspacesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * List workspaces under given workspace.
         * @summary List Workspaces in Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        childWorkspaces: function (workspace, options) {
            return exports.WorkspacesApiFp(configuration).childWorkspaces(workspace, options)(fetch, basePath);
        },
        /**
         * Create a new workspace.
         * @summary Create Workspace
         * @param {CreateWorkspaceRequest} body workspace details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspace: function (body, options) {
            return exports.WorkspacesApiFp(configuration).createWorkspace(body, options)(fetch, basePath);
        },
        /**
         * Remove a workspace.
         * @summary Delete Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: function (workspace, options) {
            return exports.WorkspacesApiFp(configuration).deleteWorkspace(workspace, options)(fetch, basePath);
        },
        /**
         * Get information about a single workspace.
         * @summary Retrieve Workspace
         * @param {string} workspace name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: function (workspace, options) {
            return exports.WorkspacesApiFp(configuration).getWorkspace(workspace, options)(fetch, basePath);
        },
        /**
         * List all workspaces in an organization.
         * @summary List Workspaces
         * @param {boolean} [fetch_across_regions]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaces: function (fetch_across_regions, options) {
            return exports.WorkspacesApiFp(configuration).listWorkspaces(fetch_across_regions, options)(fetch, basePath);
        },
        /**
         * Transfer ownership of a workspace to a new user.
         * @summary Transfer Ownership of a Workspace
         * @param {string} workspace name of the workspace
         * @param {TransferOwnershipRequest} body JSON Object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOwnership: function (workspace, body, options) {
            return exports.WorkspacesApiFp(configuration).transferOwnership(workspace, body, options)(fetch, basePath);
        },
    };
};
/**
 * WorkspacesApi - object-oriented interface
 * @export
 * @class WorkspacesApi
 * @extends {BaseAPI}
 */
var WorkspacesApi = /** @class */ (function (_super) {
    __extends(WorkspacesApi, _super);
    function WorkspacesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List workspaces under given workspace.
     * @summary List Workspaces in Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.childWorkspaces = function (workspace, options) {
        return exports.WorkspacesApiFp(this.configuration).childWorkspaces(workspace, options)(this.fetch, this.basePath);
    };
    /**
     * Create a new workspace.
     * @summary Create Workspace
     * @param {CreateWorkspaceRequest} body workspace details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.createWorkspace = function (body, options) {
        return exports.WorkspacesApiFp(this.configuration).createWorkspace(body, options)(this.fetch, this.basePath);
    };
    /**
     * Remove a workspace.
     * @summary Delete Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.deleteWorkspace = function (workspace, options) {
        return exports.WorkspacesApiFp(this.configuration).deleteWorkspace(workspace, options)(this.fetch, this.basePath);
    };
    /**
     * Get information about a single workspace.
     * @summary Retrieve Workspace
     * @param {string} workspace name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.getWorkspace = function (workspace, options) {
        return exports.WorkspacesApiFp(this.configuration).getWorkspace(workspace, options)(this.fetch, this.basePath);
    };
    /**
     * List all workspaces in an organization.
     * @summary List Workspaces
     * @param {boolean} [fetch_across_regions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.listWorkspaces = function (fetch_across_regions, options) {
        return exports.WorkspacesApiFp(this.configuration).listWorkspaces(fetch_across_regions, options)(this.fetch, this.basePath);
    };
    /**
     * Transfer ownership of a workspace to a new user.
     * @summary Transfer Ownership of a Workspace
     * @param {string} workspace name of the workspace
     * @param {TransferOwnershipRequest} body JSON Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApi
     */
    WorkspacesApi.prototype.transferOwnership = function (workspace, body, options) {
        return exports.WorkspacesApiFp(this.configuration).transferOwnership(workspace, body, options)(this.fetch, this.basePath);
    };
    return WorkspacesApi;
}(BaseAPI));
exports.WorkspacesApi = WorkspacesApi;
//# sourceMappingURL=api.js.map