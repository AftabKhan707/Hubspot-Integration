"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// /* eslint-disable @typescript-eslint/no-unsafe-assignment */
var index_1 = require("../index");
var version_1 = require("../version");
var basePath = 'https://api.rs2.usw2.rockset.com';
var apikey = 'apikey';
var simpleFetch = jest.fn(function (url, options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, ({
                url: url,
                options: options,
            })];
    });
}); });
afterAll(function () { return simpleFetch.mockClear(); });
test('simple query', function () { return __awaiter(void 0, void 0, void 0, function () {
    var rockset, out;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                rockset = index_1.default(apikey, basePath, simpleFetch);
                return [4 /*yield*/, rockset.queries.query({
                        sql: {
                            query: 'Select count(*) from _events;',
                        },
                    })];
            case 1:
                out = _a.sent();
                expect(out).toMatchObject({
                    options: {
                        body: '{"sql":{"query":"Select count(*) from _events;"}}',
                        headers: {
                            Authorization: 'ApiKey apikey',
                            'Content-Type': 'application/json',
                            'User-Agent': "Rockset Node SDK/" + version_1.version,
                        },
                        method: 'POST',
                    },
                    url: 'https://api.rs2.usw2.rockset.com/v1/orgs/self/queries',
                });
                expect(simpleFetch).toHaveBeenCalledWith('https://api.rs2.usw2.rockset.com/v1/orgs/self/queries', {
                    body: '{"sql":{"query":"Select count(*) from _events;"}}',
                    headers: {
                        Authorization: 'ApiKey apikey',
                        'Content-Type': 'application/json',
                        'User-Agent': "Rockset Node SDK/" + version_1.version,
                    },
                    method: 'POST',
                });
                return [2 /*return*/];
        }
    });
}); });
test('query with midstream query exception', function () { return __awaiter(void 0, void 0, void 0, function () {
    var fetchWithMidstreamException, rockset, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                fetchWithMidstreamException = jest.fn(function (url, options) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, ({
                                url: url,
                                options: options,
                                query_errors: [
                                    {
                                        type: 'ResourceExceeded',
                                        message: 'You have exceeded your resources',
                                        status_code: 429,
                                    },
                                ],
                            })];
                    });
                }); });
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                rockset = index_1.default(apikey, basePath, fetchWithMidstreamException);
                return [4 /*yield*/, rockset.queries.query({
                        sql: {
                            query: 'Select count(*) from _events;',
                        },
                    })];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                e_1 = _a.sent();
                expect(e_1).toMatchObject({
                    message: 'You have exceeded your resources',
                });
                return [3 /*break*/, 4];
            case 4:
                expect(fetchWithMidstreamException).toHaveBeenCalledWith('https://api.rs2.usw2.rockset.com/v1/orgs/self/queries', {
                    body: '{"sql":{"query":"Select count(*) from _events;"}}',
                    headers: {
                        Authorization: 'ApiKey apikey',
                        'Content-Type': 'application/json',
                        'User-Agent': "Rockset Node SDK/" + version_1.version,
                    },
                    method: 'POST',
                });
                return [2 /*return*/];
        }
    });
}); });
test('add documents', function () { return __awaiter(void 0, void 0, void 0, function () {
    var rockset;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                rockset = index_1.default(apikey, basePath, simpleFetch);
                return [4 /*yield*/, rockset.documents.addDocuments('commons', 'thebestcollection', {
                        data: [{}],
                    })];
            case 1:
                _a.sent();
                expect(simpleFetch).toHaveBeenCalledWith('https://api.rs2.usw2.rockset.com/v1/orgs/self/ws/commons/collections/thebestcollection/docs', {
                    body: '{"data":[{}]}',
                    headers: {
                        Authorization: 'ApiKey apikey',
                        'Content-Type': 'application/json',
                        'User-Agent': "Rockset Node SDK/" + version_1.version,
                    },
                    method: 'POST',
                });
                return [2 /*return*/];
        }
    });
}); });
test('is snake case', function () { return __awaiter(void 0, void 0, void 0, function () {
    var rockset;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                rockset = index_1.default(apikey, basePath, simpleFetch);
                // This line won't type check if the generated code is camel case
                return [4 /*yield*/, rockset.collections.createCollection('ws', {
                        name: 'sname',
                        field_mappings: [],
                    })];
            case 1:
                // This line won't type check if the generated code is camel case
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=mockclient.test.js.map