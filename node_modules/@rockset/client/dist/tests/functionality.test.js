"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
var index_1 = require("../index");
var basePath = process.env.ROCKSET_APISERVER;
var apikey = process.env.ROCKSET_APIKEY;
if (!apikey) {
    throw 'No ROCKSET_APIKEY specified. Please specify an environment variable ROCKSET_APIKEY with your Rockset key. eg: $ export ROCKSET_APIKEY=...';
}
if (!basePath) {
    throw 'No ROCKSET_APISERVER specified. Please specify an environment variable ROCKSET_APISERVER with your Rockset key. eg: $ export ROCKSET_APISERVER=...';
}
console.log('Specified apiserver to hit:', basePath);
var rockset = index_1.default(apikey, basePath);
var collection = 'test_collection_' + Math.random().toString(36).slice(2);
var queryLambdaName = 'test_query_' + Math.random().toString(36).slice(2);
afterAll(function () { });
describe('functionality tests (e2e)', function () {
    var _this = this;
    test('creating a collection', function () { return __awaiter(_this, void 0, void 0, function () {
        var result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rockset.collections.createCollection('commons', {
                            name: collection,
                        })];
                case 1:
                    result = _a.sent();
                    expect(result).toMatchObject({
                        data: {
                            field_mappings: [],
                            name: collection,
                            sources: [],
                            status: 'CREATED',
                            workspace: 'commons',
                        },
                    });
                    return [3 /*break*/, 3];
                case 2:
                    e_1 = _a.sent();
                    fail(e_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    test('running a query', function () { return __awaiter(_this, void 0, void 0, function () {
        var out;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rockset.queries.query({
                        sql: {
                            query: 'Select count(*) from _events;',
                        },
                    })];
                case 1:
                    out = _a.sent();
                    expect(out).toMatchObject({
                        collections: ['commons._events'],
                        column_fields: [{ name: '?count', type: '' }],
                        results: [{ '?count': expect.anything() }],
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('paginate with no more pages', function () { return __awaiter(_this, void 0, void 0, function () {
        var out;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rockset.queries.query({
                        sql: {
                            query: 'SELECT COUNT(*) FROM _events;',
                            paginate: true,
                        },
                    })];
                case 1:
                    out = _a.sent();
                    expect(out).toMatchObject({
                        collections: ['commons._events'],
                        column_fields: [{ name: '?COUNT', type: '' }],
                        results: [{ '?COUNT': expect.anything() }],
                        pagination: {
                            // There should not be any more results.
                            next_cursor: null,
                        },
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('paginate with more pages', function () { return __awaiter(_this, void 0, void 0, function () {
        var out, nextPage;
        var _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0: return [4 /*yield*/, rockset.queries.query({
                        sql: {
                            query: 'SELECT * FROM _events LIMIT 2;',
                            paginate: true,
                            initial_paginate_response_doc_count: 1,
                        },
                    })];
                case 1:
                    out = _d.sent();
                    expect(out).toMatchObject({
                        collections: ['commons._events'],
                        results: [{ _event_time: expect.anything() }],
                        results_total_doc_count: 2,
                        pagination: {
                            // There should be a next cursor.
                            next_cursor: expect.anything(),
                            current_page_doc_count: 1,
                        },
                    });
                    return [4 /*yield*/, rockset.queries.getQueryPagination((_a = out.query_id) !== null && _a !== void 0 ? _a : '', (_c = (_b = out.pagination) === null || _b === void 0 ? void 0 : _b.next_cursor) !== null && _c !== void 0 ? _c : '', 1, 0)];
                case 2:
                    nextPage = _d.sent();
                    expect(nextPage).toMatchObject({
                        results: [{ _event_time: expect.anything() }],
                        results_total_doc_count: 2,
                        pagination: {
                            // There should not be any more documents.
                            next_cursor: null,
                            current_page_doc_count: 1,
                        },
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('getting collections', function () { return __awaiter(_this, void 0, void 0, function () {
        var out, sampleOutput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rockset.collections.getCollection('commons', '_events')];
                case 1:
                    out = _a.sent();
                    sampleOutput = {
                        data: {
                            created_at: '2019-10-16T01:46:55Z',
                            created_by: null,
                            description: null,
                            field_mappings: [],
                            name: '_events',
                            retention_secs: 2592000,
                            sources: [],
                            stats: expect.anything(),
                            status: 'READY',
                            workspace: 'commons',
                        },
                    };
                    expect(Object.getOwnPropertyNames(out)).toMatchObject(Object.getOwnPropertyNames(sampleOutput));
                    return [2 /*return*/];
            }
        });
    }); });
    test('deleting a collection', function () { return __awaiter(_this, void 0, void 0, function () {
        var result, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rockset.collections.deleteCollection('commons', collection)];
                case 1:
                    result = _a.sent();
                    expect(result).toMatchObject({
                        data: {
                            field_mappings: [],
                            name: collection,
                            sources: [],
                            workspace: 'commons',
                        },
                    });
                    return [3 /*break*/, 3];
                case 2:
                    e_2 = _a.sent();
                    fail(e_2);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    var queryLambda;
    test('creating a Query Lambda', function () { return __awaiter(_this, void 0, void 0, function () {
        var e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rockset.queryLambdas.createQueryLambda('commons', {
                            name: queryLambdaName,
                            sql: {
                                query: 'SELECT :param as echo',
                                default_parameters: [
                                    {
                                        name: 'param',
                                        type: 'string',
                                        value: 'Hello world!',
                                    },
                                ],
                            },
                        })];
                case 1:
                    queryLambda = _a.sent();
                    expect(queryLambda).toMatchObject({
                        data: {
                            created_at: expect.anything(),
                            created_by: expect.anything(),
                            name: queryLambdaName,
                            workspace: 'commons',
                            version: expect.anything(),
                            description: null,
                            sql: {
                                query: 'SELECT :param as echo',
                                default_parameters: [
                                    {
                                        name: 'param',
                                        type: 'string',
                                        value: 'Hello world!',
                                    },
                                ],
                            },
                            stats: expect.anything(),
                            collections: [],
                        },
                    });
                    return [3 /*break*/, 3];
                case 2:
                    e_3 = _a.sent();
                    fail(e_3);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    test('running a Query Lambda with default parameters', function () { return __awaiter(_this, void 0, void 0, function () {
        var result, e_4;
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rockset.queryLambdas.executeQueryLambda('commons', queryLambdaName, (_b = (_a = queryLambda.data) === null || _a === void 0 ? void 0 : _a.version) !== null && _b !== void 0 ? _b : '')];
                case 1:
                    result = _c.sent();
                    expect(result).toMatchObject({
                        results: [
                            {
                                echo: 'Hello world!',
                            },
                        ],
                        stats: expect.anything(),
                    });
                    return [3 /*break*/, 3];
                case 2:
                    e_4 = _c.sent();
                    fail(e_4);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    test('running a Query Lambda with custom parameters', function () { return __awaiter(_this, void 0, void 0, function () {
        var result, e_5;
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rockset.queryLambdas.executeQueryLambda('commons', queryLambdaName, (_b = (_a = queryLambda.data) === null || _a === void 0 ? void 0 : _a.version) !== null && _b !== void 0 ? _b : '', {
                            parameters: [
                                {
                                    name: 'param',
                                    type: 'string',
                                    value: 'All work and no play makes Jack a dull boy',
                                },
                            ],
                        })];
                case 1:
                    result = _c.sent();
                    expect(result).toMatchObject({
                        results: [
                            {
                                echo: 'All work and no play makes Jack a dull boy',
                            },
                        ],
                        stats: expect.anything(),
                    });
                    return [3 /*break*/, 3];
                case 2:
                    e_5 = _c.sent();
                    fail(e_5);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    // This test also tests that errors are converted to JSON before being thrown
    test("Running a Query Lambda that doesn't exist", function () { return __awaiter(_this, void 0, void 0, function () {
        var e_6, error;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rockset.queryLambdas.executeQueryLambda('commons.fake.workspace', 'myFakeQuery', 'not_a_version', {
                            parameters: [
                                {
                                    name: 'param',
                                    type: 'string',
                                    value: 'All work and no play makes Jack a dull boy',
                                },
                            ],
                        })];
                case 1:
                    _a.sent();
                    fail("This query shouldn't exist!");
                    return [3 /*break*/, 3];
                case 2:
                    e_6 = _a.sent();
                    error = e_6;
                    expect(error).toMatchObject({
                        message: 'Query Lambda "myFakeQuery" not found in workspace "commons.fake.workspace".',
                        type: 'NotFound',
                        line: null,
                        column: null,
                        trace_id: expect.anything(),
                    });
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    test('deleting a Query Lambda', function () { return __awaiter(_this, void 0, void 0, function () {
        var result, e_7;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, rockset.queryLambdas.deleteQueryLambda('commons', queryLambdaName)];
                case 1:
                    result = _a.sent();
                    expect(result).toMatchObject({
                        data: {
                            name: queryLambdaName,
                            workspace: 'commons',
                            collections: [],
                        },
                    });
                    return [3 /*break*/, 3];
                case 2:
                    e_7 = _a.sent();
                    fail(e_7);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=functionality.test.js.map