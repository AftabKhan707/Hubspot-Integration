"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
var api = require("./codegen/api");
var version_1 = require("./version");
require('node-fetch');
/**
 * Returns a master object for all rockset apis
 *
 * @param apikey Your rockset APIKEY
 * @param host The rockset apiserver that you are hitting, eg https://api.rs2.usw2.rockset.com
 */
var rocksetConfigure = function (apikey, host, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
customFetch) {
    if (host === void 0) { host = 'https://api.rs2.usw2.rockset.com'; }
    // Overwrite the apikey so it doesn't need to be specified on every query
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var authFetch = function (url, options) { return __awaiter(void 0, void 0, void 0, function () {
        var newOptions, out_1, response, body, error;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    newOptions = __assign(__assign({}, options), { headers: __assign(__assign({}, options.headers), { Authorization: "ApiKey " + apikey, 'User-Agent': "Rockset Node SDK/" + version_1.version }) });
                    if (!customFetch) return [3 /*break*/, 2];
                    return [4 /*yield*/, customFetch(url, newOptions)];
                case 1:
                    out_1 = _b.sent();
                    return [2 /*return*/, {
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                            json: function () { return out_1; },
                            status: 200,
                        }];
                case 2: return [4 /*yield*/, fetch(url, newOptions)];
                case 3:
                    response = _b.sent();
                    if (!(response.status >= 200 && response.status < 300)) return [3 /*break*/, 4];
                    return [2 /*return*/, response];
                case 4: return [4 /*yield*/, response.text().catch(console.log)];
                case 5:
                    body = (_a = (_b.sent())) !== null && _a !== void 0 ? _a : '';
                    error = void 0;
                    try {
                        error = JSON.parse(body);
                    }
                    catch (e) {
                        error = {
                            code: response.status,
                            message: response.statusText,
                            bodyText: body,
                        };
                    }
                    throw error;
            }
        });
    }); };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var queryFetch = function (url, options) { return __awaiter(void 0, void 0, void 0, function () {
        var response, queryResponse, queryError, err;
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, authFetch(url, options)];
                case 1:
                    response = _b.sent();
                    return [4 /*yield*/, response.json()];
                case 2:
                    queryResponse = (_a = (_b.sent())) !== null && _a !== void 0 ? _a : {};
                    // We can sometimes have a query exception that occurs after sending the status code,
                    // so catch that here.
                    // The server only sends one error for now so just look at the first one in the list.
                    if (queryResponse.query_errors && queryResponse.query_errors.length > 0) {
                        queryError = queryResponse.query_errors[0];
                        err = {
                            message: queryError.message,
                        };
                        throw err;
                    }
                    return [2 /*return*/, {
                            json: function () { return queryResponse; },
                            status: 200,
                        }];
            }
        });
    }); };
    return {
        aliases: new api.AliasesApi({}, host, authFetch),
        users: new api.UsersApi({}, host, authFetch),
        apikeys: new api.APIKeysApi({}, host, authFetch),
        workspaces: new api.WorkspacesApi({}, host, authFetch),
        collections: new api.CollectionsApi({}, host, authFetch),
        documents: new api.DocumentsApi({}, host, authFetch),
        integrations: new api.IntegrationsApi({}, host, authFetch),
        orgs: new api.OrganizationsApi({}, host, authFetch),
        queries: new api.QueriesApi({}, host, queryFetch),
        queryLambdas: new api.QueryLambdasApi({}, host, queryFetch),
        views: new api.ViewsApi({}, host, authFetch),
        virtualInstances: new api.VirtualInstancesApi({}, host, authFetch),
        customRolesBeta: new api.CustomRolesBetaApi({}, host, authFetch),
        _fetch: authFetch,
    };
};
exports.default = rocksetConfigure;
//# sourceMappingURL=index.js.map