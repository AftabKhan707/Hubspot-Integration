"use strict";
/**
 * CRM Objects
 * CRM objects such as companies, contacts, deals, line items, products, tickets, and quotes are standard objects in HubSpotâ€™s CRM. These core building blocks support custom properties, store critical information, and play a central role in the HubSpot application.  ## Supported Object Types  This API provides access to collections of CRM objects, which return a map of property names to values. Each object type has its own set of default properties, which can be found by exploring the [CRM Object Properties API](https://developers.hubspot.com/docs/methods/crm-properties/crm-properties-overview).  |Object Type |Properties returned by default | |--|--| | `companies` | `name`, `domain` | | `contacts` | `firstname`, `lastname`, `email` | | `deals` | `dealname`, `amount`, `closedate`, `pipeline`, `dealstage` | | `products` | `name`, `description`, `price` | | `tickets` | `content`, `hs_pipeline`, `hs_pipeline_stage`, `hs_ticket_category`, `hs_ticket_priority`, `subject` |  Find a list of all properties for an object type using the [CRM Object Properties](https://developers.hubspot.com/docs/methods/crm-properties/get-properties) API. e.g. `GET https://api.hubapi.com/properties/v2/companies/properties`. Change the properties returned in the response using the `properties` array in the request body.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filter = void 0;
class Filter {
    static getAttributeTypeMap() {
        return Filter.attributeTypeMap;
    }
}
exports.Filter = Filter;
Filter.discriminator = undefined;
Filter.attributeTypeMap = [
    {
        "name": "value",
        "baseName": "value",
        "type": "string"
    },
    {
        "name": "propertyName",
        "baseName": "propertyName",
        "type": "string"
    },
    {
        "name": "operator",
        "baseName": "operator",
        "type": "Filter.OperatorEnum"
    }
];
(function (Filter) {
    let OperatorEnum;
    (function (OperatorEnum) {
        OperatorEnum[OperatorEnum["Eq"] = 'EQ'] = "Eq";
        OperatorEnum[OperatorEnum["Neq"] = 'NEQ'] = "Neq";
        OperatorEnum[OperatorEnum["Lt"] = 'LT'] = "Lt";
        OperatorEnum[OperatorEnum["Lte"] = 'LTE'] = "Lte";
        OperatorEnum[OperatorEnum["Gt"] = 'GT'] = "Gt";
        OperatorEnum[OperatorEnum["Gte"] = 'GTE'] = "Gte";
        OperatorEnum[OperatorEnum["Between"] = 'BETWEEN'] = "Between";
        OperatorEnum[OperatorEnum["In"] = 'IN'] = "In";
        OperatorEnum[OperatorEnum["NotIn"] = 'NOT_IN'] = "NotIn";
        OperatorEnum[OperatorEnum["HasProperty"] = 'HAS_PROPERTY'] = "HasProperty";
        OperatorEnum[OperatorEnum["NotHasProperty"] = 'NOT_HAS_PROPERTY'] = "NotHasProperty";
        OperatorEnum[OperatorEnum["ContainsToken"] = 'CONTAINS_TOKEN'] = "ContainsToken";
        OperatorEnum[OperatorEnum["NotContainsToken"] = 'NOT_CONTAINS_TOKEN'] = "NotContainsToken";
    })(OperatorEnum = Filter.OperatorEnum || (Filter.OperatorEnum = {}));
})(Filter = exports.Filter || (exports.Filter = {}));
